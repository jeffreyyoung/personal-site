'use strict';

angular.module('common', ['ngResource', 'cancelable-q', 'infinite-scroll', 'ngAnimate']);

angular.module('common').run(function ($http, _, analyticsConfig, appModel) {

	// set a custom authorization header (with the analytics services token) for ALL http requests
	$http.defaults.headers.common['Authorization'] = appModel.appService.token;

	if (appModel.company.id && appModel.user.id) {
		$http.defaults.headers.common['x-proxy-company-id'] = appModel.company.id;
		$http.defaults.headers.common['x-proxy-userid'] = appModel.user.id;
	} else {
		$http.defaults.headers.common['x-proxy-company'] = appModel.company.name;
		$http.defaults.headers.common['x-proxy-username'] = appModel.user.username;
	}

	var customHeaders = appModel.settings.customXHRHeaders;
	if (customHeaders) {
		_.extend($http.defaults.headers.common, customHeaders);
	}
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('appModel', function ($window) {
	var _analyticsui$model = analyticsui['model'],
	    UserService = _analyticsui$model.UserService,
	    Company = _analyticsui$model.Company,
	    ReportSuite = _analyticsui$model.ReportSuite,
	    OmnitureUrlService = _analyticsui$model.OmnitureUrlService,
	    OmnitureService = _analyticsui$model.OmnitureService;
	var _analyticsui$core = analyticsui['core'],
	    EventEmitter = _analyticsui$core.EventEmitter,
	    dateService = _analyticsui$core.dateService,
	    EntityCache = _analyticsui$core.EntityCache,
	    MetricFormatter = _analyticsui$core.MetricFormatter;

	if ($window.analyticsui && $window.analyticsui.app) {
		return $window.analyticsui.app;
	} else {
		var Application = function (_EventEmitter) {
			_inherits(Application, _EventEmitter);

			function Application(params) {
				_classCallCheck(this, Application);

				var _this = _possibleConstructorReturn(this, (Application.__proto__ || Object.getPrototypeOf(Application)).call(this));

				_this.omnitureUrl = new OmnitureUrlService();
				_this.omnitureService = new OmnitureService(_this.omnitureUrl);

				_this.user = UserService.fromJSON(Object.assign({}, params.user, { omnitureService: _this.omnitureService }));
				_this.reportSuite = ReportSuite.fromJSON(params.reportSuite);
				_this.company = Company.fromJSON(params.company);
				_this.appService = {
					baseURL: "https://appservice.dev.ut1.omniture.com/analytics/1.0",
					token: '',
					disableOberonRemoteLoading: false
				};
				_this.settings = {};

				_this.cache = new EntityCache();
				return _this;
			}

			_createClass(Application, [{
				key: 'getMetricFormatter',
				value: function getMetricFormatter() {
					return new MetricFormatter({ currency: this.reportSuite.currency });
				}
			}, {
				key: 'format',
				value: function format(input) {
					var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

					return this.getMetricFormatter().format(input, opts);
				}
			}]);

			return Application;
		}(EventEmitter);

		// Make this work with test code


		var app = new Application({
			user: {
				id: "123456",
				username: "sallysocial",
				fullName: "Sally Social",
				isAdmin: true,
				skipServiceInitialization: true
			},
			company: {
				id: "67891",
				name: "Sally's Corp"
			},
			reportSuite: {
				rsid: "sallysal",
				name: "Sally's delicious report suite",
				currency: "USD",
				calendarAnchorDate: "1969-12-31",
				calendarType: {
					type: "GREGORIAN",
					anchorDate: "1969-12-31",
					firstDayOfWeek: 0,
					firstMonthOfYear: 0
				},
				axleConfig: {
					axleData: true,
					axleStart: "2013-08-16"
				},
				currentTimezoneOffset: -6,
				permissions: {
					privileges: ["Omni.Tools.AnalysisWorkspace.Create", "Omni.UI.AnomalyDetection", "Omni.UI.CalculatedMetricCreation", "Omni.UI.SegmentCreation"]
				}
			}
		});

		// Since we know this is a testing environment let's also setup the dateService so that it returns the appropriate instance. 
		dateService.setAppInstance(app.reportSuite);

		return app;
	}
});
'use strict';

angular.module('common').factory('cls', function (_, $injector) {

	function isPropertyDefinition(member) {
		return angular.isObject(member) && member.get || member.set;
	}

	function createSuperWrapper(name, fn, superFn) {
		if (!superFn) {
			throw new Error(name + ' calls super method, but no base class contains this method/property.');
		}

		return function () {
			var oldSuper = this.super[name];
			this.super[name] = superFn.bind(this);
			var result;
			try {
				result = fn.apply(this, arguments);
			} finally {
				this.super[name] = oldSuper;
			}
			return result;
		};
	}

	function callsSuper(fn) {
		var str = fn.toString();
		return fn && (str.indexOf('this.super.') > -1 || str.indexOf('this["super"].') > -1 || str.indexOf('this[\'super\'].') > -1);
	}

	function wrapSuperCalls(members, baseClass) {
		Object.keys(members).forEach(function (key) {
			var member = members[key];
			if (angular.isFunction(member) && callsSuper(member)) {
				members[key] = createSuperWrapper(key, member, baseClass.prototype[key]);
			}
		});
	}

	function bindGetterSetter(propertyDescriptor, context) {
		var result = {};
		if (propertyDescriptor.get) {
			result.get = propertyDescriptor.get.bind(context);
		}
		if (propertyDescriptor.set) {
			result.set = propertyDescriptor.set.bind(context);
		}
		return result;
	}

	function createSuperObject(baseClass, bindTo) {
		var _super = {};
		Object.getOwnPropertyNames(baseClass.prototype).forEach(function (memberName) {

			if (memberName === 'constructor') {
				return;
			}

			var propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, memberName);
			if (isPropertyDefinition(propertyDescriptor)) {
				Object.defineProperty(_super, memberName, bindGetterSetter(propertyDescriptor, bindTo));
			} else {
				_super[memberName] = baseClass.prototype[memberName].bind(bindTo);
			}
		});
		return _super;
	}

	function createChildConstructor(childClass, baseClass) {
		var ctr = function ctr() {
			if (!this.__type__) {
				this.__type__ = ctr;
			}

			// Create a super object for calling base class methods
			if (!this.super) {
				this.super = createSuperObject(baseClass, this);
			}

			// Expose the base class constructor as this.super$
			this.super$ = baseClass.bind(this);

			// Call to the actual constructor
			childClass.apply(this, arguments);
		};
		return ctr;
	}

	function addMissingBaseMembers(members, baseClass) {
		Object.getOwnPropertyNames(baseClass.prototype).forEach(function (memberName) {

			if (memberName === 'constructor' || members[memberName]) {
				return;
			}

			var propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, memberName);
			if (isPropertyDefinition(propertyDescriptor)) {
				members[memberName] = propertyDescriptor;
			} else {
				members[memberName] = baseClass.prototype[memberName];
			}
		});
	}

	function ensureConstructor(members) {
		if (!members._constructor) {
			members._constructor = function () {
				this.super$.apply(this, Array.prototype.slice.call(arguments));
			};
		}
	}

	var cls = {

		create: function create(members) {
			var ctr = members._constructor || function () {};
			var remainingMembers = _.omit(members, '_constructor');
			this.append(ctr, remainingMembers);
			return ctr;
		},

		extend: function extend(baseClass, members) {
			members = angular.extend({}, members);

			// Add a constructor that calls $super() if no constructor is provided
			ensureConstructor(members);

			// Wrap any members that call super, so they call the right super method
			wrapSuperCalls(members, baseClass);

			// Add members that aren't on the child class
			addMissingBaseMembers(members, baseClass);

			// Create the actual class
			var childClass = this.create(members);

			// Create a new constructor, so we can populate the runtime super during construction
			var ctr = createChildConstructor(childClass, baseClass);

			// Set the prototype to the real classes prototpye
			ctr.prototype = childClass.prototype;

			// Keep track of the base class, so that we can walk the tree in cls.descendsFrom
			ctr.__base__ = baseClass;

			return ctr;
		},

		append: function append(type, members) {
			if (type.__base__) {
				members = angular.extend({}, members);
				wrapSuperCalls(members, type.__base__);
			}
			_.forOwn(members, function (member, memberName) {
				if (isPropertyDefinition(member)) {
					// We need the property definition to be configurable so it can be overridden later
					member.configurable = true;
					Object.defineProperty(type.prototype, memberName, member);
				} else {
					type.prototype[memberName] = member;
				}
			});
		},

		getType: function getType(obj) {
			return obj.__type__;
		},

		getBaseType: function getBaseType(type) {
			return type.__base__;
		},

		descendsFrom: function descendsFrom(type, baseType) {
			if (!type) {
				return false;
			}

			return type === baseType || type.__base__ === baseType || this.descendsFrom(type.__base__, baseType);
		},

		instanceOf: function instanceOf(obj, type) {
			return obj instanceof type || this.descendsFrom(obj.__type__, type);
		},

		import: function _import(name) {
			return $injector.get(name);
		},

		bind: function bind(obj, methods) {
			methods.forEach(function (method) {
				obj[method] = obj[method].bind(obj);
			});
		}
	};

	window.analyticsui.uicore.cls = cls;
	window.dispatchEvent(new CustomEvent('clsReady', {
		detail: { cls: cls }
	}));

	return cls;
}).factory('util.cls', function (cls) {
	return cls;
});
'use strict';

angular.module('common').constant('embed', {

	modules: [],

	preventConfig: function preventConfig(module) {
		this.modules.push(module);
	},

	shouldConfig: function shouldConfig(module) {
		return this.modules.indexOf(module) === -1;
	}

});
'use strict';

angular.module('common').factory('EventEmitter', function (cls, $window, $log) {

	var debugObserver;

	var EventEmitter = cls.create({

		_constructor: function _constructor() {
			this._handlers = {};
			this._supressedEvents = [];
		},

		on: function on(event, callback) {
			var handlers = this._handlers[event] || [];
			handlers.push(callback);
			this._handlers[event] = handlers;
			return function () {
				this.off(event, callback);
			}.bind(this);
		},

		off: function off(event, callback) {
			var handlers = this._handlers[event] || [];
			var index = handlers.indexOf(callback);
			if (index > -1) {
				handlers.splice(index, 1);
			}
		},

		supressEvent: function supressEvent(event, fn) {

			this._supressedEvents.push(event);

			try {
				fn();
			} finally {
				this._supressedEvents.pop();
			}
		},

		emit: function emit(event) {
			if (debugObserver) {
				try {
					debugObserver.apply(this, arguments);
				} catch (e) {
					$log.error(e);
				}
			}

			if (this._supressedEvents.indexOf(event) > -1) {
				return;
			}

			var args = Array.prototype.slice.call(arguments, 1);
			var handlers = this._handlers[event] || [];
			var handlersCopy = handlers.slice(0); // If an handler removes itself, we don't want to mess up the array.

			handlersCopy.forEach(function (handler) {
				if (handler) {
					handler.apply(this, args);
				}
			}.bind(this));
		}

	});

	var observers = {

		default: function _default(eventName, args) {
			$log.log(this, eventName, args);
		},

		className: function className(eventName, args) {
			$log.log('EVENT: ', this.className || this, eventName);
		}
	};

	function observeEvents(observer) {
		observer = observer || 'default';
		if (angular.isFunction(observer)) {
			debugObserver = observer;
		} else {
			debugObserver = observers[observer];
		}
	}

	function stopObservingEvents() {
		debugObserver = undefined;
	}

	$window.adobe = $window.adobe || {};
	$window.adobe.tools = $window.adobe.tools || {};
	$window.adobe.tools.observeEvents = observeEvents;
	$window.adobe.tools.stopObservingEvents = stopObservingEvents;

	return EventEmitter;
});
'use strict';

angular.module('common').factory('Keys', function () {
	var Keys = analyticsui['ui'].Keys;

	return Keys;
});
'use strict';

angular.module('common').factory('localCache', function (cls) {

	// If you change DB_NAME or CACHE_STORE, you should also write code to clean
	// up the old db/objectStore on clients that are using the old names
	var DB_NAME = 'anlocalcache'; // IndexedDB database name
	var CACHE_STORE = 'cache'; // ObjectStore name
	var OPEN_TIMEOUT = 1000; // How long (in milliseconds to wait when trying to open the cache before timing out)
	var db = null;

	var LocalCache = cls.create({

		_constructor: function _constructor() {

			this.supported = typeof window.indexedDB !== 'undefined';
		},

		/*
  * setScope: a scope to add to all keys (e.g. userId, so keys are scoped to that user)
  */
		setScope: function setScope(scope) {
			this._scope = scope;
		},

		/*
  *	put: Add/update a value with the given key to the cache
  *	  returns: promise that resolves when added or rejects with an error
  */
		put: function put(key, value) {

			// Check if the key is already in the db, as indexedDB will throw an error if you 
			// try to 'add' a value already in the db, you have to use 'put'
			return this.has(key).then(function (hasKey) {

				return this._cacheAction('readwrite', function (cacheStore) {

					var obj = { key: this._scopedKey(key), value: value };

					if (hasKey) {
						return cacheStore.put(obj);
					} else {
						return cacheStore.add(obj);
					}
				}.bind(this));
			}.bind(this));
		},

		/*
  *	get: Gets a value with the given key from the cache
  *	  returns: promise that resolves with the value or rejects with an error
  */
		get: function get(key) {

			// Check if there is a key first, since indexedDB throws
			// an exception if you ask for a key that doesn't exist
			return this.has(key).then(function (hasKey) {

				return this._cacheAction('readonly', function (cacheStore) {

					if (hasKey) {
						return cacheStore.get(this._scopedKey(key));
					} else {
						return undefined;
					}
				}.bind(this)).then(function (obj) {
					return obj ? obj.value : undefined;
				});
			}.bind(this));
		},

		/*
  *	has: Checks to see if the given key is stored in the cache
  *	  returns: promise that resolves with true/false or rejects with an error
  */
		has: function has(key) {

			return this._cacheAction('readonly', function (cacheStore) {
				return cacheStore.count(this._scopedKey(key));
			}.bind(this)).then(function (count) {
				return count == 1;
			});
		},

		/*
  *    clear: removes everything in the cache, mostly useful for testing
  */
		clear: function clear() {

			return this._cacheAction('readwrite', function (cacheStore) {
				return cacheStore.clear();
			});
		},

		/*
  *  _scopedKey: returns the given key with the scope (if any) added to it
  */
		_scopedKey: function _scopedKey(key) {
			if (this._scope) {
				return this._scope + '_' + key;
			} else {
				return key;
			}
		},

		/*
  *   _cacheAction: runs an action against the cacheStore and converts the 
  * resulting request to a promise (also catches any errors and handles them)
  */
		_cacheAction: function _cacheAction(type, callback) {
			return this._openDb().then(function (db) {
				var transaction = db.transaction([CACHE_STORE], type);
				var cacheStore = transaction.objectStore(CACHE_STORE);
				try {
					return toPromise(callback(cacheStore));
				} catch (err) {
					console.log(err);
					return Promise.reject(err);
				}
			});
		},

		/*
  *   _openDB: Opens the cache database and creates the cache ObjectStore if necessary
  * return: A promise that resolves with the db or rejects with an error
  */
		_openDb: function _openDb() {

			// If the db is already open, then just return a resolved promise with the db
			if (db) {
				return Promise.resolve(db);
			}

			// Open the db
			var openRequest = window.indexedDB.open(DB_NAME, 2);

			// Define the schema
			openRequest.onupgradeneeded = function (e) {

				var db = e.target.result;

				if (!db.objectStoreNames.contains(CACHE_STORE)) {
					db.createObjectStore(CACHE_STORE, { keyPath: 'key' });
				}
			};

			var opts = { timeout: OPEN_TIMEOUT, timeoutMessage: 'LocalCache Open Timeout' };

			return toPromise(openRequest, opts).then(function (database) {
				db = database;
				return db;
			});
		}

	});

	// Convert an IDBRequest to a Promise
	function toPromise(request, opts) {

		opts = opts || {};

		if (!request) {
			return Promise.resolve(request);
		}

		return new Promise(function (resolve, reject) {

			var completed = false;

			// Reject the promise
			if (opts.timeout) {
				setTimeout(function () {
					if (!completed) {
						reject(new Error(opts.timeoutMessage || 'LocalCache Timeout'));
					}
				}, opts.timeout);
			}

			request.onsuccess = function () {
				completed = true;
				resolve(this.result);
			};

			request.onerror = function () {
				completed = true;
				reject(this.error);
			};
		});
	}

	return new LocalCache();
});
'use strict';

angular.module('common').factory('model', function () {
	var Model = analyticsui['core'].Model;

	return Model;
}).factory('util.model', function (model) {
	return model;
});
'use strict';

angular.module('common').factory('ObservableList', function () {
	var ObservableList = analyticsui['core'].ObservableList;

	return ObservableList;
});
'use strict';

angular.module('common').factory('Repository', function (_, $q, $http, $resource, cls, EventEmitter, util) {
	var l10nConfig = analyticsui['core'].l10nConfig;


	var PAGE_SIZE = 1000;
	var MAX_CONCURRENT = 10;

	var Repository = cls.extend(EventEmitter, {

		// config
		//  - endpoint - url for $resource
		//  - params - global parameter defaults for $resource
		//  - actions - array of action names to add
		//  - pageQueryResults - if true, calls to query() will transparently 
		//   chunk responses into pages and return the same result as before (one combined list)
		_constructor: function _constructor(config) {
			this.super$();

			this._config = config;

			// bind our transform methods so they always call this
			this._transformInboundItem = this._transformInboundItem.bind(this);
			this._transformInboundList = this._transformInboundList.bind(this);
			this._transformOutboundItem = this._transformOutboundItem.bind(this);

			// create the internal resource object
			this._$resource = this._createResource(config);
		},

		// Returns a promise
		create: function create(args) {
			return this._executeResourceAction('create', arguments);
		},

		// Retruns a promise
		update: function update(args) {
			return this._executeResourceAction('update', arguments);
		},

		// Returns a promise
		get: function get(args) {
			return this._executeResourceAction('get', arguments);
		},

		// Returns a promise
		query: function query(args) {
			if (this._config.pageQueryResults) {
				return this._executePagedResourceAction('query', arguments);
			} else {
				return this._executeResourceAction('query', arguments);
			}
		},

		// Returns a promise
		delete: function _delete(args) {
			return this._executeResourceAction('delete', arguments);
		},

		// Returns a promise
		saveModel: function saveModel(model) {
			this._ensureModel();

			if (model.id) {
				return this.update(model.toJSON());
			} else {
				return this.create(model.toJSON()).then(function (res) {
					model.id = res.id;
					return res;
				});
			}
		},

		// Returns a promise
		getModel: function getModel(args) {
			this._ensureModel();

			// convert expansions array to expansion param
			args = Array.prototype.slice.apply(arguments);
			if (args.length > 0) {
				args[0] = this._createExpansionString(args[0]);
			}

			// call the get action
			var deferred = $q.defer();
			var promise = this._executeResourceAction('get', args);

			// When the promise returns, turn the JSON into a model
			promise.then(function (item) {
				deferred.resolve(this._config.model.fromJSON(item));
			}.bind(this)).catch(function (err) {
				deferred.reject(err);
			});
			return deferred.promise;
		},

		// Protected
		_getDefaultParams: function _getDefaultParams() {
			return {};
		},

		_transformInboundList: function _transformInboundList(items) {
			//Errors will not be returned as arrays - AN-102357
			if (angular.isArray(items)) {
				return items.map(this._transformInboundItem);
			}
			return items;
		},

		_transformInboundItem: function _transformInboundItem(item) {
			return item;
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			return item;
		},

		_createResource: function _createResource(args) {

			return $resource(args.endpoint, args.params, this._getResourceActions(args));
		},

		_getResourceActions: function _getResourceActions(args) {
			var self = this;
			return {
				'query': {
					method: 'GET',
					params: {
						locale: l10nConfig.currentLocale
					},
					isArray: !this._config.pageQueryResults,
					transformResponse: self._transformResponse(this._queryTransforms())
				},
				'get': {
					method: 'GET',
					params: {
						locale: l10nConfig.currentLocale
					},
					transformResponse: self._transformResponse([this._transformInboundItem])
				},
				'update': {
					method: 'PUT',
					params: {
						locale: l10nConfig.currentLocale
					},
					transformRequest: self._transformRequest([this._transformOutboundItem])
				},
				'create': {
					method: 'POST',
					params: {
						locale: l10nConfig.currentLocale
					},
					transformRequest: self._transformRequest([this._transformOutboundItem])
				}
			};
		},

		// Private
		_executeResourceAction: function _executeResourceAction(action, args) {
			// ensure this is an array, not just an arguments object
			args = Array.prototype.slice.call(args);

			// Ensure this action is supported
			this._ensureActionIsSupported(action);

			// Add default params
			if (!args[0] || jQuery.isPlainObject(args[0])) {
				args[0] = _.extend({}, this._getDefaultParams(), args[0]);
			}

			// Execute the action
			var promise = this._$resource[action].apply(this._$resource, args).$promise;

			// Emit an event after action is successfully completed				
			promise.then(function () {
				var args = Array.prototype.slice.call(arguments);
				this.emit.apply(this, [action].concat(args));
			}.bind(this));

			return promise;
		},

		/* Long-term we will need to handle pagination in the UI. 
  In the near-term, we are moving a step closer by loading all the data
  via multiple paged requests and combining them into a single response.
  This at least chunks up the response size from the backend and starts using 
  the paging API. Breaking those up is probably good for the 
  backend, but will actually slow down the request time even more - as we 
  have to wait for the first request to return before knowing the total number
  of pages to request - or do a preflight query to get the count - either one
  translates to a slower overall experience.  Component manager is probably the 
  main place that we need to rewrite, as it is the main place we make requests 
  that have potentially huge responses.
  */
		_executePagedResourceAction: function _executePagedResourceAction(action, args) {
			// ensure this is an array, not just an arguments object
			args = Array.prototype.slice.call(args);

			var paginationSettings = {
				pagination: true,
				page: 0,
				limit: PAGE_SIZE
			};

			args[0] = _.extend({}, args[0], paginationSettings);

			var self = this;

			// Execute this request, create requests for additional pages
			return this._executeResourceAction(action, args).then(function (result) {

				return $q.all(self._createRequestsForRemainingPages(action, args, result)).then(function (responses) {
					responses = responses || [];

					// Combine all responses into one array								
					var combinedResult = result.content.slice();
					responses.forEach(function (result) {
						combinedResult = combinedResult.concat(result.content);
					});

					// Run the result through the inbound transform
					return self._transformInboundList(combinedResult);
				});
			});
		},

		_createRequestsForRemainingPages: function _createRequestsForRemainingPages(action, args, result) {

			// Limit the max number of request running concurrently
			var limit = util.qlimit(MAX_CONCURRENT);

			var executePageAction = limit(function (pageNumber) {
				args[0].page = pageNumber;
				return this._executeResourceAction(action, args);
			}.bind(this));

			var requests = [];

			for (var i = 1; i < result.totalPages; i++) {
				requests.push(executePageAction(i));
			}

			return requests;
		},

		_queryTransforms: function _queryTransforms() {

			// If this result contains paging information, we need to handle it differently
			if (this._config.pageQueryResults) {
				// We will run transforms after the whole result-set is finished loading
				// so we turn them off here
				return [];
			} else {
				return [this._transformInboundList];
			}
		},

		_ensureActionIsSupported: function _ensureActionIsSupported(action) {
			if (this._config.actions.indexOf(action) === -1) {
				throw new Error('Action ' + action + ' is not supported.');
			}
		},

		_ensureModel: function _ensureModel() {
			if (!this._config.model) {
				throw new Error('config.model was not provided.  getModel/setModel are not supported.');
			}
		},

		_createExpansionString: function _createExpansionString(config) {
			if (!config.expansions) {
				return config;
			}
			var newConfig = _.omit(config, 'expansions');
			newConfig.expansion = config.expansions.join(',');
			return newConfig;
		},

		_transformResponse: function _transformResponse(transforms) {
			return $http.defaults.transformResponse.concat(transforms);
		},

		_transformRequest: function _transformRequest(transforms) {
			return transforms.concat($http.defaults.transformRequest);
		}
	});

	return Repository;
});
'use strict';

angular.module('common')

// Expose lodash
.factory('_', function ($window) {
	// return the version of _ that is included in our vendor.js file
	// this is necessary as some pages include underscore which overwrites our version of _
	// and causes issues
	return $window.vendor._;
})

// Expose introJS	
.factory('introJs', function ($window) {
	return $window.introJs;
})

// Expose moment
.factory('moment', function ($window, calendarLocaleConfig) {
	var moment = $window.moment;
	moment.lang(calendarLocaleConfig.getMomentLocale());
	return moment;
});
'use strict';

angular.module('common').factory('appCache', function (_, $q, cls, EventEmitter, ObservableList) {

	var BY_ID_SUFFIX = 'ById';

	var AppCache = cls.extend(EventEmitter, {

		_constructor: function _constructor() {
			this.super$();
			this._lists = [];
			this._promises = {};
			this.data = {};
			this.configs = {};
			this.definitions = {};
		},

		import: function _import() /* definitions... */{
			var definitions = Array.prototype.slice.call(arguments);
			definitions.forEach(function (definition) {
				cls.import('app-cache.' + definition);
			});
		},

		define: function define(name, fn) {
			this.definitions[name] = fn;
			return this;
		},

		config: function config(name, _config) {
			this.configs[name] = _config;
			return this;
		},

		add: function add(name, items, filter) {
			if (angular.isUndefined(items) || items === null) {
				throw new Error('You must provide items for ' + name);
			}
			if (isPromise(items)) {
				this._addItemsPromise(name, items, filter);
				return this;
			} else if (angular.isFunction(items)) {
				this._addItemsFunction(name, items, filter);
				return this;
			}

			if (filter) {
				items = filter(items);
			}

			if (!angular.isArray(items)) {
				throw new Error('items must be of type array or a function/promise that returns an array for ' + name);
			}

			if (this.data[name]) {
				throw new Error(name + ' already exists, use "replace" to replace the items.');
			}

			this._lists.push(name);

			this.data[name] = new ObservableList(items);

			this._addItemsById(name, items);

			this.emit('add', { name: name, items: items });

			return this;
		},

		when: function when() /* name, [name], ... */{

			var names = Array.prototype.slice.call(arguments);

			names.forEach(this._ensureDefinitionCalled, this);

			var promises = this._getPromises(names);
			return $q.all(promises);
		},

		replace: function replace(name, items) {
			this.get(name).empty();
			this.get(name).pushAll(items);

			this._addItemsById(name, items);

			this.emit('replace', { name: name, items: items });
		},

		clearAll: function clearAll() {
			this._lists.concat().forEach(this.clear, this);
			this.configs = {};
		},

		clear: function clear(name) {
			delete this.data[name];
			delete this.data[name + BY_ID_SUFFIX];
			delete this._promises[name];
			var index = this._lists.indexOf(name);
			if (index > -1) {
				this._lists.splice(index, 1);
			}
		},

		get: function get(name) {
			this._ensureItems(name);

			return this.data[name];
		},

		filtered: function filtered(name, filter) {
			return this.get(name).filter(filter);
		},

		has: function has(name) {
			return angular.isDefined(this.data[name]);
		},

		getItemById: function getItemById(name, id) {
			return this._itemsById(name)[id];
		},

		getItemsById: function getItemsById(name) {
			return this._itemsById(name);
		},

		addItem: function addItem(name, item) {
			if (this.getItemById(name, item.id)) {
				throw new Error('Item with that id is already in the list, use updateItem insetad.');
			}
			this.get(name).push(item);
			this._itemsById(name)[item.id] = item;
			this._emitItemChange('add', name, item);
		},

		updateItem: function updateItem(name, updatedItem) {
			var item = this.getItemById(name, updatedItem.id);
			if (item) {
				_.assign(item, updatedItem);
				this._emitItemChange('update', name, item);
			} else {
				this.addItem(name, updatedItem);
			}
		},

		deleteItem: function deleteItem(name, id) {
			var itemsById = this._itemsById(name),
			    item = itemsById[id];

			this.getItems(name).remove(item);
			delete itemsById[id];
			this._emitItemChange('delete', name, item);
		},

		_emitItemChange: function _emitItemChange(changeType, name, item) {
			this.emit('itemChange', { name: name, item: item, changeType: changeType });
		},

		_itemsById: function _itemsById(name) {
			this._ensureItems(name);
			return this.data[name + BY_ID_SUFFIX];
		},

		_ensureItems: function _ensureItems(name) {
			if (!this.data[name]) {
				throw new Error('No items have been set for: ' + name);
			}
		},

		_ensureDefinitionCalled: function _ensureDefinitionCalled(name) {
			if (!this.has(name) && !this._promises[name] && this.definitions[name]) {
				this.add(name, this._executeDefinition(name));
			}
		},

		_addItemsById: function _addItemsById(name, items) {
			var itemsById = {};

			items.forEach(function (item) {
				itemsById[item.id] = item;
			});

			this.data[name + BY_ID_SUFFIX] = itemsById;
		},

		_addItemsPromise: function _addItemsPromise(name, promise, filter) {
			if (this._promises[name]) {
				throw new Error('Promise already provided for ' + name);
			}
			this._promises[name] = promise;
			promise.then(function (items) {
				this.add(name, items, filter);
			}.bind(this));
		},

		_addItemsFunction: function _addItemsFunction(name, fn, filter) {
			this.add(name, fn(), filter);
		},

		_getPromises: function _getPromises(names) {
			return names.map(function (name) {
				return this._promises[name];
			}, this);
		},

		_executeDefinition: function _executeDefinition(name) {
			var definitionFn = this.definitions[name];
			return definitionFn(this.configs[name] || {});
		}

	});

	function isPromise(obj) {
		return angular.isFunction(obj.then) && angular.isFunction(obj.catch);
	}

	return new AppCache();
});
'use strict';

angular.module('common').factory('app', function (cls, EventEmitter, userActivity, sessionManager, localCache, user, serverTime, analyticsConfig) {

	/*
 	App:
 	- Application entry point
 	- Manages user sessions and other spa-level cross-cutting concerns
 */

	var App = cls.extend(EventEmitter, {

		start: function start() {

			if (analyticsConfig.serverRender) {
				// Don't use local cache
				localCache.supported = false;
				// We don't want to run sessionManager or userActivity tracker in serverSide rendering
				return;
			}
			// userActivity.enable();
			// sessionManager.enable();
			// sessionManager.on('session-expired', this._onSessionExpired.bind(this));
			localCache.setScope(user.id);
			serverTime.init();
		},

		_onSessionExpired: function _onSessionExpired() {
			userActivity.disable();
			sessionManager.disable();
		}

	});

	return new App();
});
'use strict';

angular.module('common').factory('inAppEditors', function (appModel) {
	var InAppEditors = analyticsui['ui'].InAppEditors;

	return new InAppEditors(appModel);
});
'use strict';

angular.module('common').factory('progressReporter', function () {
	var progressReporter = analyticsui['model'].progressReporter;

	return progressReporter;
});
'use strict';

angular.module('common').factory('serverTime', function (_, cls, EventEmitter, $http, moment) {

	/*	
 	ServerTime:
 	- Keeps track of server time
 */

	var ServerTime = cls.extend(EventEmitter, {

		/*
  * Hook angular response and listen for date header
  */
		init: function init() {
			$http.defaults.transformResponse.push(function (data, headers) {
				// console.log(headers())
				// console.log(headers('date'), headers('Date'))
				if (!this.hasTime()) {
					if (headers('date')) {
						var serverTime = new Date(headers('date'));
						this.setTime(serverTime);
					}
				}
				return data;
			}.bind(this));
		},

		/*
  * If someone has initialized the server time yet
  */
		hasTime: function hasTime() {
			return _.isDate(this._serverTime);
		},

		/*
  * Sets the time that is currently on the server
  */
		setTime: function setTime(serverTime) {
			/* This is a placehodler until the App Service team adds support for exposing Date header */
			if (serverTime) {
				this._serverTime = serverTime;
				this._setAt = new Date();
				this.emit('time-set', serverTime);
			}
		},

		/*
  * Gets the current time from the servers point of view
  */
		getTime: function getTime() {
			if (!this.hasTime()) {
				return new Date();
				// throw new Error('serverTime has not been initialized yet.');
			}
			var timeSinceSet = new Date() - this._setAt;
			return moment(this._serverTime).add(timeSinceSet).toDate();
		}

	});

	return new ServerTime();
}).factory('serverTimeHandler', function ($injector) {

	return {

		response: function response(_response) {
			// console.log('here')
			// var serverTime = $injector.get('serverTime');

			// if (!serverTime.hasTime()) {

			// 	// console.log('d', response.headers());
			// 	var date = response.headers()['date'];
			// 	// console.log('date', date)					
			// 	if (date) {						
			// 		try {
			// 			serverTime.setTime(new Date(date));
			// 		} catch(e) {
			// 			console.error('e', e);
			// 		}
			// 	}
			// }

			return _response;
		}

	};
});
'use strict';

angular.module('common').factory('sessionManager', function (cls, EventEmitter, userActivity, moment, scUrl, appModel, $window) {

	/*	
 	SessionManager
 	- Keep alive the PHP session when the user is actively using the application
 	- Poll the backend periodically to see if the user session has expired, if it has
 	 then show a session timeout dialog with a link to login back in.
 */

	var SessionManager = cls.extend(EventEmitter, {

		_constructor: function _constructor() {
			this.super$();

			this.pollingId = null;
			this.pollingInterval = moment.duration(5, 'minutes');
			this._sessionCheck = this._sessionCheck.bind(this);

			// The app-service returns 401 and PHP returns 403 for an invalid/expired session
			jQuery(document).ajaxError(function (e, xhr) {
				if (xhr.status === 401 || xhr.status === 403) {
					this.triggerSessionExpired();
				}
			}.bind(this));
		},

		enable: function enable() {
			this.pollingId = setInterval(this._sessionCheck, this.pollingInterval.asMilliseconds());
		},

		disable: function disable() {
			clearInterval(this.pollingId);
			this.pollingId = null;
		},

		triggerSessionExpired: function triggerSessionExpired() {
			this.emit('session-expired');
		},

		_sessionCheck: function _sessionCheck() {
			if (this._userHasActivity()) {
				this._sendSessionKeepAlive();
			} else {
				this._checkIfSessionIsActive();
			}
		},

		_userHasActivity: function _userHasActivity() {
			return moment(userActivity.lastActivity).isAfter(moment().subtract(this.pollingInterval));
		},

		_sendSessionKeepAlive: function _sendSessionKeepAlive() {
			try {
				jQuery.getJSON(scUrl.suitej('Shell.SessionKeepAlive'));
			} catch (e) {}
		},

		_checkIfSessionIsActive: function _checkIfSessionIsActive() {

			// Currently, there isn't an easy way to create a PHP endpoint that doesn't touch (extend)
			// the session when accessing it, so we are going to check to see if the session is active 
			// by hitting the app-service.  The only drawback with this approach is that the app-service
			// tokens don't expire immediately with the PHP sessions - there is a job that cleans
			// out expired app-service tokens that runs every few minutes.
			//
			// We are querying the pastebin for a non-existent key as Rene said that would be a cheap 
			// operation for app-service to perform

			var appServicePingUrl = appModel.appService.baseURL + '/pastebin/sessionping';

			// If this returns a 401 the ajaxError handler will pick it up, see constructor
			jQuery.ajax({
				url: appServicePingUrl,
				headers: {
					'Authorization': appModel.appService.token
				}
			});
		}

	});

	return new SessionManager();
});
'use strict';

angular.module('common').factory('userActivity', function (cls) {

	/*	
 	Keep track of user activity so we know when the user was last using the app.
 */

	var UserActivity = cls.create({

		_constructor: function _constructor() {
			this.lastActivity = new Date();
			this._onActivity = this._onActivity.bind(this);
		},

		enable: function enable() {
			jQuery(document).on('mousedown mousemove keypress', this._onActivity);
		},

		disable: function disable() {
			jQuery(document).off('mousedown mousemove keypress', this._onActivity);
		},

		_onActivity: function _onActivity() {
			this.lastActivity = new Date();
		}

	});

	return new UserActivity();
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('CalculatedMetric', function (_, cls, POLARITY) {
	var DeprecatedComponent = analyticsui['model'].DeprecatedComponent;


	var Expression = cls.import('calculated-metric.Expression'),
	    ExpressionItem = cls.import('calculated-metric.ExpressionItem'),
	    Operator = cls.import('calculated-metric.Operator'),
	    MetricRef = cls.import('calculated-metric.MetricRef'),
	    FunctionRef = cls.import('calculated-metric.FunctionRef'),
	    SegmentRef = cls.import('calculated-metric.SegmentRef'),
	    DimensionRef = cls.import('calculated-metric.DimensionRef'),
	    NumericValue = cls.import('calculated-metric.NumericValue');

	var CalculatedMetric = function (_DeprecatedComponent) {
		_inherits(CalculatedMetric, _DeprecatedComponent);

		function CalculatedMetric() {
			_classCallCheck(this, CalculatedMetric);

			return _possibleConstructorReturn(this, (CalculatedMetric.__proto__ || Object.getPrototypeOf(CalculatedMetric)).apply(this, arguments));
		}

		_createClass(CalculatedMetric, [{
			key: 'loadMetric',


			// Loads an existing calculated metric into this one, so as not to lose the data-bindings
			value: function loadMetric(calculatedMetric) {
				// Set data for definition so we keep the same instance in tact
				this._expansions = calculatedMetric._expansions;
				var metricData = _.omit(calculatedMetric.getData(), 'definition');
				this.setData(metricData);
				this.definition.setData(calculatedMetric.definition.getData());
			}
		}, {
			key: 'hasDeprecatedItem',
			value: function hasDeprecatedItem() {
				var hasDeprecated = false;
				this.definition.visit(function (item) {
					if (item.deprecated) {
						hasDeprecated = true;
					}
				}, true);
				return hasDeprecated;
			}
		}, {
			key: 'componentType',
			get: function get() {
				return 'calculatedMetric';
			}
		}, {
			key: 'metricValueType',
			get: function get() {
				switch (this.type) {
					case 'decimal':
						return 'number';
					default:
						return this.type;
				}
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					definition: { type: Expression, ensureExists: true, observe: true },
					rsid: String,
					precision: { type: Number, default: 0, serializeDefault: true },
					internal: { type: Boolean, default: false, serializeDefault: true },
					type: { type: 'enum (decimal, time, percent, currency)', default: 'decimal', serializeDefault: true },
					polarity: { type: String, enum: [POLARITY.POSITIVE, POLARITY.NEGATIVE], default: POLARITY.POSITIVE },
					warning: Object
				};
			}
		}, {
			key: 'convertItem',
			value: function convertItem(item) {

				if (item instanceof ExpressionItem || item instanceof SegmentRef) {
					return item;
				}

				switch (item.itemType) {
					case 'segment':
						return new SegmentRef({ id: item.id });
					case 'metric':
						return new MetricRef({ id: item.id });
					case 'function':
						return new FunctionRef({ id: item.id });
					case 'dimension':
						return new DimensionRef({ id: item.id });
					default:
						throw new Error('Unrecongnized itemType: ' + item.itemType);
				}
			}
		}, {
			key: 'operator',
			value: function operator(args) {
				return new Operator(args);
			}
		}, {
			key: 'expression',
			value: function expression(args) {
				return new Expression(args);
			}
		}, {
			key: 'metricRef',
			value: function metricRef(args) {
				return new MetricRef(args);
			}
		}, {
			key: 'functionRef',
			value: function functionRef(args) {
				return new FunctionRef(args);
			}
		}, {
			key: 'segmentRef',
			value: function segmentRef(args) {
				return new SegmentRef(args);
			}
		}, {
			key: 'dimensionRef',
			value: function dimensionRef(args) {
				return new DimensionRef(args);
			}
		}, {
			key: 'numericValue',
			value: function numericValue(args) {
				return new NumericValue(args);
			}
		}]);

		return CalculatedMetric;
	}(DeprecatedComponent);

	return CalculatedMetric;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('DateRange', function () {
	var DeprecatedComponent = analyticsui['model'].DeprecatedComponent;

	var DateRange = function (_DeprecatedComponent) {
		_inherits(DateRange, _DeprecatedComponent);

		function DateRange() {
			_classCallCheck(this, DateRange);

			return _possibleConstructorReturn(this, (DateRange.__proto__ || Object.getPrototypeOf(DateRange)).apply(this, arguments));
		}

		_createClass(DateRange, [{
			key: 'componentType',
			get: function get() {
				return 'dateRange';
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					definition: { type: String }
				};
			}
		}]);

		return DateRange;
	}(DeprecatedComponent);

	return DateRange;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('DeliverySettings', function () {
	var Owner = analyticsui['model'].Owner;
	var Model = analyticsui['core'].Model;

	var DeliverySettings = function (_Model) {
		_inherits(DeliverySettings, _Model);

		function DeliverySettings() {
			_classCallCheck(this, DeliverySettings);

			return _possibleConstructorReturn(this, (DeliverySettings.__proto__ || Object.getPrototypeOf(DeliverySettings)).apply(this, arguments));
		}

		_createClass(DeliverySettings, null, [{
			key: 'properties',
			value: function properties() {
				return {
					id: { type: String, copyable: false },
					definition: Object,
					name: String,
					owner: Owner,
					isDeleted: { type: String, default: 'false' },
					modified: String
				};
			}
		}]);

		return DeliverySettings;
	}(Model);

	return DeliverySettings;
});
'use strict';

angular.module('common').factory('Owner', function () {
	var Owner = analyticsui['model'].Owner;


	return Owner;
});
'use strict';

angular.module('common').factory('ProductCompatibility', function ($filter) {
	var productCompatibility = analyticsui['model'].productCompatibility;

	return productCompatibility;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('ScheduledJob', function () {
	var DeprecatedComponent = analyticsui['model'].DeprecatedComponent;

	var ScheduledJob = function (_DeprecatedComponent) {
		_inherits(ScheduledJob, _DeprecatedComponent);

		_createClass(ScheduledJob, null, [{
			key: 'properties',
			value: function properties() {
				return {
					schedule: { type: Object },
					version: { type: String, default: '1.0.0', serializeDefault: true },
					rsid: { type: String },
					locale: { type: String },
					reportSuiteName: { type: String },
					tasks: { Array: Object },
					scheduledItemName: { type: String },
					isDeleted: { type: Boolean },
					includeIsDeleted: { type: Boolean }
				};
			}
		}]);

		function ScheduledJob(data, config) {
			_classCallCheck(this, ScheduledJob);

			var _this = _possibleConstructorReturn(this, (ScheduledJob.__proto__ || Object.getPrototypeOf(ScheduledJob)).call(this, data, config));

			_this._expansions.tags = false;
			_this._expansions.shares = false;
			_this._expansions.favorite = false;
			return _this;
		}

		_createClass(ScheduledJob, [{
			key: 'componentType',
			get: function get() {
				return 'scheduledJob';
			}
		}]);

		return ScheduledJob;
	}(DeprecatedComponent);

	return ScheduledJob;
});
'use strict';

angular.module('common').factory('Share', function () {
	var Share = analyticsui['model'].Share;


	return Share;
});
'use strict';

angular.module('common').factory('Tag', function () {
	var Tag = analyticsui['model'].Tag;


	return Tag;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('VirtualReportSuite', function () {
	var DeprecatedComponent = analyticsui['model'].DeprecatedComponent;

	var VirtualReportSuite = function (_DeprecatedComponent) {
		_inherits(VirtualReportSuite, _DeprecatedComponent);

		function VirtualReportSuite() {
			_classCallCheck(this, VirtualReportSuite);

			return _possibleConstructorReturn(this, (VirtualReportSuite.__proto__ || Object.getPrototypeOf(VirtualReportSuite)).apply(this, arguments));
		}

		_createClass(VirtualReportSuite, [{
			key: 'componentType',
			get: function get() {
				return 'virtualReportSuite';
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					parentRsid: { type: String },
					parentRsidName: { type: String },
					segmentList: { Array: String },
					groups: { Array: Object },
					timezone: { type: Number, default: null }
				};
			}
		}]);

		return VirtualReportSuite;
	}(DeprecatedComponent);

	return VirtualReportSuite;
});
'use strict';

angular.module('common');
'use strict';

// Make common entities available to angular test cases. 
angular.module('common').service('entities', function () {
	var _analyticsui$model = analyticsui['model'],
	    Dimension = _analyticsui$model.Dimension,
	    CalculatedMetric = _analyticsui$model.CalculatedMetric,
	    Metric = _analyticsui$model.Metric,
	    Segment = _analyticsui$model.Segment,
	    DateRange = _analyticsui$model.DateRange,
	    DimensionItem = _analyticsui$model.DimensionItem,
	    MetricView = _analyticsui$model.MetricView,
	    ComputedComponent = _analyticsui$model.ComputedComponent;

	return {
		'Dimension': Dimension,
		'CalculatedMetric': CalculatedMetric,
		'Metric': Metric,
		'Segment': Segment,
		'DateRange': DateRange,
		'DimensionItem': DimensionItem,
		'MetricView': MetricView,
		'ComputedComponent': ComputedComponent
	};
});
'use strict';

angular.module('common');
'use strict';

angular.module('common').directive('anRegisterCallback', function (callbackRegistryService) {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs) {
			$element.on('click', function () {
				callbackRegistryService.register($attrs.anRegisterCallback, $scope.$eval($attrs.anCallbackParams));
			});
		}
	};
});
'use strict';

angular.module('common').factory('callbackRegistryService', function (scUrl) {
	var CallbackRegistry = analyticsui['ui'].CallbackRegistry;

	return new CallbackRegistry(scUrl);
});
'use strict';

angular.module('common');
'use strict';

angular.module('common');
'use strict';

(function ($) {
	$(function () {
		// Wait until the page loads to run this.

		//Example link: data-target="#more-popup" data-toggle="popover" data-point-from="bottom" data-point-at="#toolbar-more-button" data-align-from="right"

		$('body').on('click', '[data-toggle="popover"], [data-toggle="modal"]', function (e) {
			var params = $.extend({}, $(this).data());
			params.target = params.target || $(this).attr('href');
			var isModal = e.currentTarget.dataset.toggle == 'modal';
			params.pointAt = params.pointAt ? document.querySelector(params.pointAt) : this; // this is the same as event.currentTarget

			var closeOtherPopoversOnShow = e.currentTarget.attributes.closeOtherPopovers;

			setTimeout(function () {
				analyticsui.uicore.Popover.show({
					target: params.pointAt, //event.currentTarget,
					ref: params.target || 'popover_' + Math.random() + new Date().getTime(),
					isModal: isModal,
					dialog: { padded: false },
					closeOnClickOutside: !isModal,
					selector: params.target,
					closeOtherPopovers: closeOtherPopoversOnShow
				});
			}, 0);
		});

		// This is purely for old coral.
		$('body').on('click', '[data-dismiss="popover"], [data-dismiss="modal"]', function (event) {
			analyticsui.uicore.Popover.close(event.currentTarget);
		});

		// This is purely for old coral, too.
		$('body').on('click', '[data-dismiss="alert"]', function (event) {
			$(event.currentTarget).closest('.coral3-Alert').remove();
		});

		$('body').on('click', '.js-endor-innerrail-toggle', function (e) {
			var params = jQuery.extend({}, jQuery(this).data());
			// Trigger the Rail to update it's own properties.
			analyticsui.shell.Rail.updateProps({
				activePanelId: params.target.substring(1), // Remove the hash since this was based on id's (e.g. #my-analytics-rail will become my-analytics-rail).
				isPinned: true,
				location: 'left'
			}, e.target);

			analyticsui.shell.Rail.updateProps({
				activePanelId: params.target.substring(1), // Remove the hash since this was based on id's (e.g. #my-analytics-rail will become my-analytics-rail).
				isPinned: true,
				location: 'right'
			}, e.target);
		});

		$('body').on('showFeedbackForm', function () {
			if ($("#beta_feedback_iframe").length === 0) {
				var betaFeedbackConfig = window.OM && window.OM.Config && window.OM.Config.appConfig ? window.OM.Config.appConfig.betaFeedbackConfig : window.adobe.analytics.appConfig.betaFeedbackConfig;
				var p = "&project=AN&environment=";

				for (var name in betaFeedbackConfig.betaFeedBackData) {
					if (betaFeedbackConfig.betaFeedBackData.hasOwnProperty(name)) {
						p += name + ": " + betaFeedbackConfig.betaFeedBackData[name] + ", ";
					}
				}

				var css = "width: 100%; height: 100%; background-color: transparent; border: none; padding: 0; margin: 0; position: absolute; top: 0; left: 0; z-index: 30000;";
				var iframe = $("<iframe frameborder='0' src='" + betaFeedbackConfig.betaFeedBackFormUrl + encodeURI(p) + "' id='beta_feedback_iframe' style='" + css + "'/>");

				$("body").append(iframe);

				$(window).on("message", function messageHandler(e) {
					e = e.originalEvent;
					if (e.source == iframe[0].contentWindow) {
						var data = JSON.parse(e.data);
						switch (data.type) {
							case "closed":
								iframe.remove();
								$(window).off("message", messageHandler);
								break;
						}
					}
				});
			}
		});
	});
})(jQuery);
'use strict';

angular.module('common');
'use strict';

angular.module('common');
'use strict';

angular.module('common').factory('metricCallbackExecutor', function (scUrl, util) {
	return {
		getDestinationUrl: function getDestinationUrl(params) {
			if (!params.metric) {
				return params.destinationUrl;
			}

			var existingMetrics = params.existingMetrics || [];

			var newMetricList = existingMetrics.map(function (metric) {
				return metric.fragRelId;
			});

			var destinationParams = util.getQueryParams(params.destinationUrl);

			if (params.actionType != 'cancel') {
				// don't change any applied metrics if they cancelled
				if (~newMetricList.indexOf(params.metric.id)) {
					// check if metric is already applied to report
					newMetricList.splice(newMetricList.indexOf(params.metric.id), 1);
				}

				if (params.actionType != 'delete') {
					// apply the metric to the report unless they deleted it
					newMetricList.push(params.metric.id);
				}
			}

			delete destinationParams.jpj; // scUrl updates jpj and ssSession automatically
			delete destinationParams.ssSession;

			switch (params.type) {
				case 'sc-report':

					destinationParams.rp = '';
					for (var i = 0; i < newMetricList.length; i++) {
						destinationParams.rp += params.reportParamName + '[' + i + ']';
						destinationParams.rp += '|' + newMetricList[i];
						destinationParams.rp += i === newMetricList.length - 1 ? '' : ';';
					}
					return scUrl.fs(destinationParams.a, destinationParams); // don't pass gateway url because we're rebuilding the params from scratch

				default:
					return params.destinationUrl;
			}
		}
	};
});
'use strict';

angular.module('common').factory('SchemaGenerator', function () {
	var SchemaGenerator = analyticsui['core'].SchemaGenerator;

	return SchemaGenerator;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('common').factory('model.Validator', function (_, cls) {

	function isUnset(value) {
		return value === null || value === undefined;
	}

	function isType(value, type) {
		return isUnset(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === type;
	}

	var Validator = cls.create({

		isValid: function isValid(value) {
			return false;
		},

		ensureValid: function ensureValid(field, value) {
			if (!this.isValid(value)) {
				throw new Error('Invalid value for \'' + field + '\'. Value was \'' + value + '\'.');
			}
		}

	});

	var StringValidator = cls.extend(Validator, {

		isValid: function isValid(value) {
			return isType(value, 'string');
		}

	});

	var EnumValidator = cls.extend(StringValidator, {

		_constructor: function _constructor(typeInfo) {
			this.enumValues = typeInfo.values;
		},

		isValid: function isValid(value) {
			return this.super.isValid(value) && this.enumValues.indexOf(value) > -1;
		}

	});

	var NumberValidator = cls.extend(Validator, {

		isValid: function isValid(value) {
			return isType(value, 'number');
		}

	});

	var BooleanValidator = cls.extend(Validator, {

		isValid: function isValid(value) {
			return isType(value, 'boolean');
		}

	});

	var ClassValidator = cls.extend(Validator, {

		_constructor: function _constructor(type) {
			if (!type) {
				throw new Error('You must define a type.');
			}
			this.validType = type;
		},

		isValidType: function isValidType(value) {
			if (angular.isArray(this.validType)) {
				return this.validType.some(function (validType) {
					return cls.instanceOf(value, validType);
				});
			} else {
				// Object is kind of an 'any', e.g. we let anything validate
				return this.validType === Object || cls.instanceOf(value, this.validType);
			}
		},

		isValid: function isValid(value) {
			return isUnset(value) || this.isValidType(value);
		}

	});

	Validator.create = function (type) {
		var typeInfo;

		if (_.isPlainObject(type)) {
			typeInfo = type;
		} else {
			typeInfo = { type: type };
		}

		type = typeInfo.type;

		if (typeof type === 'string') {
			var typeName = type.split(' ')[0];
			switch (typeName) {
				case 'string':
					return new StringValidator();
				case 'number':
					return new NumberValidator();
				case 'boolean':
					return new BooleanValidator();
				case 'enum':
					return new EnumValidator(typeInfo);
				default:
					throw new Error('Unknown validator type: ' + type);
			}
		} else {
			switch (type) {
				case Number:
					return new NumberValidator();
				case String:
					return new StringValidator();
				case Boolean:
					return new BooleanValidator();
				default:
					return new ClassValidator(type);
			}
		}
	};

	return Validator;
});
'use strict';

angular.module('common').factory('app-cache.default-definitions', function (_, appCache, segmentRepository, metricRepository, dimensionRepository, calculatedMetricRepository, ObservableList, tagRepository, dateRangeRepository, reportSuiteRepository, virtualReportSuiteRepository, suitesRepository) {
	appCache.define('segments', function (config) {
		return segmentRepository.ownOrShared(config);
	}).define('metrics', function (config) {
		return metricRepository.query(config);
	}).define('functions', function () {
		return calculatedMetricRepository.functions.query({});
	}).define('calculatedMetrics', function (config) {
		return calculatedMetricRepository.ownOrShared(config);
	}).define('dimensions', function (config) {
		return dimensionRepository.query(config);
	})
	// combined list of metrics & calculated metrics, sorted by name
	.define('combinedMetrics', function () {
		return appCache.when('metrics', 'calculatedMetrics').then(function () {
			var list = new ObservableList();
			list.pushAll(appCache.data.metrics);
			list.pushAll(appCache.data.calculatedMetrics);
			list.sort(function (a, b) {
				return (a.name || '').localeCompare(b.name || '');
			});
			return list;
		});
	}).define('tags', function (config) {
		return tagRepository.query(config);
	}).define('dateRanges', function (config) {
		return dateRangeRepository.query(config);
	});
	return {};
});
'use strict';

angular.module('common').factory('alertRepository', function (_, cls, ComponentRepository, appModel, $filter, axle, util) {

	var AlertRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/alerts/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			return _.omit(item, ['$promise', '$resolved']);
		}

	});

	return new AlertRepository();
});
'use strict';

angular.module('common').factory('calculatedMetricRepository', function ($http, cls, util, appModel, Repository, ComponentRepository, CalculatedMetric, scUrl) {

	var calculatedMetricsRoot = appModel.appService.baseURL + '/calculatedmetrics';

	var CalculatedMetricRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				model: CalculatedMetric,
				endpoint: calculatedMetricsRoot + '/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});

			this.functions = new FunctionRepository();
		},

		saveModel: function saveModel(metric) {
			var _this = this;

			var isCreate = !metric.id;

			this._ensureRsid(metric);

			/* We need to wait until we get a response from cache busting before proceeding, otherwise, 
    the UI will do a redirect and the browser may cancel thie cache-bust request before it
    is actually made */
			return this.super.saveModel(metric).then(function (res) {
				if (isCreate) {
					return _this._bustMenuCache().then(function () {
						return res;
					});
				} else {
					return res;
				}
			});
		},

		getModel: function getModel(args) {
			args = angular.extend({ expansions: ['definition', 'tags', 'authorization', 'internal', 'ownerFullName', 'modified'] }, args);
			return this.super.getModel(args);
		},

		// Calls the validation endpoint to validate a given calculated metric
		//  - calculatedMetric: A calculated metric model or json representing a calculated metric
		validate: function validate(calculatedMetric) {
			if (cls.instanceOf(calculatedMetric, CalculatedMetric)) {
				calculatedMetric = calculatedMetric.toJSON();
			}
			this._ensureRsid(calculatedMetric);
			return $http.post(calculatedMetricsRoot + '/validate', calculatedMetric);
		},

		_ensureRsid: function _ensureRsid(metric) {
			if (!metric.rsid) {
				metric.rsid = appModel.reportSuite.rsid;
			}
		},

		_transformInboundItem: function _transformInboundItem(item) {
			if (item.shares) {
				item.shares = this._transformShares(item.shares);
			}

			return item;
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			if (item.shares) {
				item.shares = this._transformSharesOutbound(item.shares);
			}
			return item;
		},

		_transformShares: function _transformShares(shares) {
			return util.pluckMap(shares, { id: 'shareToId', type: 'shareToType', name: 'shareToDisplayName' });
		},

		_transformSharesOutbound: function _transformSharesOutbound(shares) {
			return util.pluckMap(shares, { shareToId: 'id', shareToType: 'type', shareToDisplayName: 'name' });
		},

		_bustMenuCache: function _bustMenuCache() {
			var cacheBustURL = scUrl.fs('ComponentManager.MenuCacheBuster');
			return $http.get(cacheBustURL);
		}

	});

	var FunctionRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: calculatedMetricsRoot + '/functions/:id',
				params: { id: '@id' },
				actions: ['get', 'query']
			});
		},

		_transformInboundList: function _transformInboundList(list) {
			var visibleFunctions = list.filter(function (item) {
				return item.category != 'internal';
			});
			return this.super._transformInboundList(visibleFunctions);
		},

		_transformInboundItem: function _transformInboundItem(item) {
			item.itemType = 'function';
			return item;
		}

	});

	return new CalculatedMetricRepository();
});
'use strict';

angular.module('common').factory('ComponentRepository', function ($q, $http, cls, util, Repository, tagRepository, shareRepository, simpleAttributeService, localCache, _, moment, serverTime) {

	var TAGS = 'tags',
	    SHARES = 'shares';

	/**
 * A base repository for that implements shared component behavior, like updating tags/shares when saving a model object
 * Note: The repository tracks what expansions are provided when the model is loaded (getModel)
 * and will only update tags/shares if the corresponding expansion was loaded
 * 
 * This Repository isn't used directly, rather the various repositories for components descend
 * from this repository.
 */
	var ComponentRepository = cls.extend(Repository, {

		_constructor: function _constructor(config) {
			this.super$(config);
		},

		ownOrShared: function ownOrShared(config) {
			var includeType = 'shared';
			if (config && config.templates) {
				includeType += ',templates';
			}
			config = angular.extend({
				includeType: includeType
			}, config || {});
			return this.query(config);
		},

		/**
  * Override query so we can handle component caching if this request uses localCache
  */
		query: function query(args) {

			var cacheKey = args.localCache;
			args = _.omit(args, 'localCache');

			if (localCache.supported && cacheKey) {

				// Try to get the value ou of the cache
				return localCache.get(cacheKey).then(function (dataSet) {

					if (dataSet) {
						// Request any changes and update the cache values and return the updated values
						return this._updateCache(cacheKey, dataSet, this.super.query(this._updateQueryArgs(args, dataSet)));
					} else {
						// Nothing is in the cache, so make the full request (and add result to cache)
						return this._addToCache(cacheKey, this.super.query(args));
					}
				}.bind(this)).catch(function (err) {

					// If the cache fails, just get the data like normal
					console.log(err);
					return this.super.query(args);
				}.bind(this));
			}

			return this.super.query(args);
		},

		/**
  * Saves a component and its tags and shares (if they were loaded to begin with)
  */
		saveModel: function saveModel(component) {

			this._ensureExpansions(component);

			// Save the component
			return this.super.saveModel(component).then(function (data) {
				var updates = [];

				component.modified = data.modified;

				// update tags
				if (component._expansions.tags) {
					updates.push(this.updateTags(component));
				}

				// update shares
				if (component._expansions.shares) {
					updates.push(this.updateShares(component));
				}

				// update favorite
				if (component._expansions.favorite) {
					updates.push(this.updateFavorite(component));
				}

				return $q.all(updates).then(function () {
					return data;
				});
			}.bind(this));
		},

		/**
  * Gets a component
  * - expansions: [string] - list of expansions (e.g. tags, shares, description, etc...)
  */
		getModel: function getModel(args) {
			// set up defaults
			args = angular.extend({ expansions: [] }, args);

			// track which expansions we are loading with
			var expansions = {};
			expansions.tags = args.expansions.indexOf(TAGS) > -1;
			expansions.shares = args.expansions.indexOf(SHARES) > -1;

			// Load the model and set the expansions
			return this.super.getModel(args).then(function (component) {
				component._expansions = expansions;
				return component;
			});
		},

		/**
  * Updates the tags for this compnent, automatically called when calling saveModel()
  */
		updateTags: function updateTags(component) {
			var tagInfo = {
				componentType: component.componentType,
				componentId: component.id,
				tags: component.tags.map(function (tag) {
					return tag.toJSON();
				})
			};

			return tagRepository.update({}, [tagInfo]); // Multiple components can be tagged at once. That is why an array is used.
		},

		/**
  * Updates the shares for this compnent, automatically called when calling saveModel()
  */
		updateShares: function updateShares(component) {
			var shareInfo = {
				componentType: component.componentType,
				componentId: component.id,
				shares: component.shares.map(function (share) {
					return share.toJSON();
				})
			};
			return shareRepository.update({}, [shareInfo]); // Multiple components can be shared at once. That is why an array is used.
		},

		/**
  * Updates if the component is a favorite, automatically called when calling saveModel()
  */
		updateFavorite: function updateFavorite(component) {
			var favoriteInfo = {
				componentType: component.componentType,
				componentId: component.id
			};
			return simpleAttributeService.save('favorites', favoriteInfo, component.favorite);
		},

		_ensureExpansions: function _ensureExpansions(component) {

			if (!component._expansions.tags && component.tags.length > 0) {
				throw new Error('You must load the tags expansion if you want to save tags.');
			}

			if (!component._expansions.shares && component.shares.length > 0) {
				throw new Error('You must load the shares expansion if you want to save shares.');
			}
		},

		_updateQueryArgs: function _updateQueryArgs(args, dataSet) {
			// Make a request to get anything new since last check (back it up to make up for any differenes between client's version of server time and actual server time)
			var lastUpdate = moment(dataSet.lastUpdate).subtract(2, 'minutes').toDate();
			// Include deleted items so we can remove them from the list
			args = _.extend({}, args, {
				filterByModifiedAfter: lastUpdate,
				includeDeleted: true
			});
			if (args.expansion) {
				args.expansion += ',isDeleted';
			} else {
				if (!args.expansions) {
					args.expansions = [];
				}
				args.expansions.push('isDeleted');
			}
			return args;
		},

		/*
  * _updateCache: updates the items in the cache with the modified results
  */
		_updateCache: function _updateCache(cacheKey, dataSet, queryPromise) {

			return queryPromise.then(function (results) {

				// Update the components					
				dataSet.lastUpdate = serverTime.getTime();

				this._updateComponents(dataSet.items, results);

				// Restore them in the cache
				localCache.put(cacheKey, dataSet);

				return dataSet.items;
			}.bind(this));
		},

		/*
  * _updateComponents: update the list of components based on the list of changed items
  */
		_updateComponents: function _updateComponents(components, changes) {

			var deletedItems = changes.filter(function (item) {
				return item.isDeleted;
			});
			var newOrUpdated = changes.filter(function (item) {
				return !item.isDeleted;
			});

			removeDeleted(deletedItems);
			addOrUpdate(newOrUpdated);

			function removeDeleted(deletedItems) {
				deletedItems.forEach(function (deleted) {
					var index = findById(deleted.id);
					components.splice(index, 1);
				});
			}

			function addOrUpdate(items) {
				items.forEach(function (item) {
					var index = findById(item.id);
					// Add or replace the item in the cache with the changed item
					if (index > -1) {
						components[index] = item;
					} else {
						components.push(item);
					}
				});
			}

			function findById(id) {
				for (var i = 0; i < components.length; i++) {
					if (components[i].id === id) {
						return i;
					}
				}
				return -1;
			}
		},

		/*
  * _addToCache: Gets the results of a promise and stores them in the cache with the given cacheKey
  */
		_addToCache: function _addToCache(cacheKey, queryPromise) {
			queryPromise.then(function (results) {

				var dataSet = {
					lastUpdate: serverTime.getTime(),
					items: results
				};

				localCache.put(cacheKey, dataSet);
			});
			return queryPromise;
		}

	});

	return ComponentRepository;
});
'use strict';

angular.module('common').factory('dataFeedRepository', function (_, cls, ComponentRepository, appModel, $filter, axle, util) {

	var DataFeedRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/datafeeds/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			return _.omit(item, ['$promise', '$resolved']);
		}

	});

	return new DataFeedRepository();
});
'use strict';

angular.module('common').factory('dateRangeRepository', function (util, cls, ComponentRepository, appModel, DateRange, DateService) {
	var DateRangeRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				model: DateRange,
				endpoint: appModel.appService.baseURL + '/dateranges/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		getModel: function getModel(args) {
			args = angular.extend({ expansions: ['definition', 'tags', 'modified', 'internal'] }, args);
			return this.super.getModel(args);
		},

		query: function query(config) {
			return this.super.query(config).then(function (items) {
				if (config && config.includePresets) {
					items = items.concat(DateService.instance().getDateRanges());
				}
				return items;
			});
		},

		_transformInboundItem: function _transformInboundItem(item) {
			item.itemType = 'dateRange';
			return item;
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			item = util.stripAngularObjects(item);
			delete item.itemType;
			delete item.favorite;
			return item;
		}

	});

	return new DateRangeRepository();
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('deliverySettingsRepository', function (cls, ComponentRepository, appModel, _, $q, $http, scUrl, Repository, DeliverySettings) {

	var DeliverySettingsRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				model: DeliverySettings,
				endpoint: appModel.appService.baseURL + '/scheduler/deliverysettings/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		}
	});

	return new DeliverySettingsRepository();
});
'use strict';

angular.module('common').factory('dimensionRepository', function (cls, Repository, appModel) {

	var DimensionRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/dimensions/:id',
				params: {
					id: '@id',
					expansion: 'description',
					rsid: appModel.reportSuite.rsid
				},
				actions: ['get', 'query']
			});
		},

		_transformInboundItem: function _transformInboundItem(dimension) {
			if (dimension.extraTitleInfo) {
				dimension.name += ' (' + dimension.extraTitleInfo + ')'; //ie, Membership (eVar2)
			}
			dimension.tooltip = dimension.description ? dimension.description : dimension.name;

			// give each item a type for display purposes
			dimension.itemType = 'dimension';
			return dimension;
		},

		_getDefaultParams: function _getDefaultParams() {
			return {
				rsid: appModel.reportSuite.rsid
			};
		}

	});

	return new DimensionRepository();
});
'use strict';

angular.module('common').factory('favoriteRepository', function (cls, Repository, appModel, $filter) {

	var FavoriteRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/favorites/:id',
				params: { id: '@id' },
				actions: ['get', 'query'],
				pageQueryResults: true
			});
		}

	});

	return new FavoriteRepository();
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('jobInstanceRepository', function (cls, $http, scUrl, Repository, appModel) {

	var JobInstanceRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/scheduler/jobinstances/:id',
				params: { id: '@id' },
				actions: ['query', 'get']
			});
		}
	});

	return new JobInstanceRepository();
});
'use strict';

angular.module('common').factory('metricRepository', function (cls, Repository, appModel) {

	var MetricRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/metrics',
				params: {
					id: '@id',
					expansion: 'description',
					rsid: appModel.reportSuite.rsid,
					showMetricViews: true
				},
				actions: ['get', 'query']
			});
		},

		_transformInboundItem: function _transformInboundItem(metric) {
			metric.tooltip = metric.description ? metric.description : metric.name;
			return metric;
		},

		_getDefaultParams: function _getDefaultParams() {
			return {
				rsid: appModel.reportSuite.rsid
			};
		}

	});

	return new MetricRepository();
});
'use strict';

angular.module('common').factory('tcg.projectRepository', function (cls, ComponentRepository, appModel) {
	var Project = analyticsui['model'].Project;


	var ProjectRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this._rsidComponentsLoadedFor = null;

			this.super$({
				model: Project,
				endpoint: appModel.appService.baseURL + '/projects/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		}

	});

	return new ProjectRepository();
});
'use strict';

angular.module('common').factory('ReportSuiteBaseRepository', function (cls, Repository, $q) {

	/**
 * A base repository that implements permission querying for report suites
 * 
 * This Repository isn't used directly, rather the various repositories for components descend
 * from this repository.
 */
	var ReportSuiteBaseRepository = cls.extend(Repository, {

		_constructor: function _constructor(config) {
			this.super$(config);
			this.permissionsTokens = {
				ANALYSIS_WORKSPACE: 'Omni.Tools.AnalysisWorkspace.Create',
				CALCULATED_METRIC_CREATION: 'Omni.UI.CalculatedMetricCreation',
				SEGMENT_CREATION: 'Omni.UI.SegmentCreation',
				REAL_TIME: 'Omni.UI.AdminConsole.ReportSuite.GetRealtime'
			};

			// Initialize all permissions as false. They are set when queryAll is called.
			this.permissions = {
				workspace: false,
				metric: false,
				segment: false
			};
		},

		queryAll: function queryAll() {
			var deferred = $q.defer();
			$q.all([this.queryRsidsWithPermission(this.permissionsTokens.ANALYSIS_WORKSPACE), this.queryRsidsWithPermission(this.permissionsTokens.CALCULATED_METRIC_CREATION), this.queryRsidsWithPermission(this.permissionsTokens.SEGMENT_CREATION)]).then(function (results) {
				deferred.resolve({ workspace: results[0], metric: results[1], segment: results[2] });
			}.bind(this));
			return deferred.promise;
		},
		queryRsidsWithPermission: function queryRsidsWithPermission(permissionToken) {
			var deferred = $q.defer();

			this.query({ permission: permissionToken }).then(function (result) {
				var rsidsWithPermission = result;
				deferred.resolve(rsidsWithPermission);
			}, function () {
				deferred.resolve(false);
			});
			return deferred.promise;
		}

	});

	return ReportSuiteBaseRepository;
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('reportSuiteRepository', function (cls, appModel, ReportSuiteBaseRepository, $q) {

	var ReportSuiteRepository = cls.extend(ReportSuiteBaseRepository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/reportsuites/:rsid',
				params: {
					rsid: '@rsid'
				},
				pageQueryResults: true,
				actions: ['query', 'get']
			});
		},

		/*
   * Returns all the report suites available to the active user (what's listed in the report suite selector)
   */
		getAvailableReportSuites: function getAvailableReportSuites(params) {
			return this.query(params);
		},

		queryAll: function queryAll() {
			var deferred = $q.defer();
			$q.all([this.queryRsidsWithPermission(this.permissionsTokens.ANALYSIS_WORKSPACE), this.queryRsidsWithPermission(this.permissionsTokens.CALCULATED_METRIC_CREATION), this.queryRsidsWithPermission(this.permissionsTokens.SEGMENT_CREATION)]).then(function (results) {
				deferred.resolve({ workspace: results[0], metric: results[1], segment: results[2] });
			}.bind(this));
			return deferred.promise;
		},

		queryRsidsWithPermission: function queryRsidsWithPermission(permissionToken) {
			var rsidsToMatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

			return this.query({ permission: permissionToken, rsids: rsidsToMatch.join(',') }).then(function (rsidsWithPermission) {
				return rsidsWithPermission;
			});
		}
	});

	return new ReportSuiteRepository();
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('scheduledJobRepository', function (cls, ComponentRepository, appModel, _, $q, $http, scUrl, ScheduledJob) {

	var ScheduledJobRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				model: ScheduledJob,
				endpoint: appModel.appService.baseURL + '/scheduler/scheduledjobs/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		getModel: function getModel(args) {
			args = angular.extend({ expansions: ['schedule, version, tasks, reportSuiteName'] }, args);
			return this.super.getModel(args);
		},

		_transformOutboundItem: function _transformOutboundItem(item) {
			var omittedItems = ['tags', 'shares', 'favorite', 'includeIsDeleted'];
			if (!item.includeIsDeleted) {
				omittedItems.push('isDeleted');
			}
			return _.omit(item, omittedItems);
		}
	});

	return new ScheduledJobRepository();
});
'use strict';

angular.module('common').factory('segmentRepository', function (_, cls, ComponentRepository, appModel, $filter, axle, util) {

	var SegmentRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/segments/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		}

	});

	return new SegmentRepository();
});
'use strict';

angular.module('common').factory('shareRepository', function (cls, Repository, appModel, Share, $http, $filter, userRepository, userGroupRepository, _) {
	var l10nConfig = analyticsui['core'].l10nConfig;


	var ShareRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				model: Share,
				endpoint: appModel.appService.baseURL + '/shares/:id',
				params: { id: '@id', limit: 0 },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		_getResourceActions: function _getResourceActions(args) {
			var self = this;
			var actions = this.super._getResourceActions(args);
			actions.update = {
				method: 'PUT',
				params: {
					locale: l10nConfig.currentLocale
				},
				isArray: true,
				transformRequest: self._transformRequest([this._transformOutboundItem])
			};

			return actions;
		},

		getUsers: function getUsers() {
			return userRepository.query({});
		},

		getGroups: function getGroups() {
			return userGroupRepository.query({});
		},

		convertSharesToShareModels: function convertSharesToShareModels(shares) {
			return _.map(shares, function (share) {
				return Share.fromJSON(share);
			});
		}

	});

	return new ShareRepository();
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('suitesRepository', function (cls, _, appModel, ReportSuiteBaseRepository, $window) {

	var SuitesRepository = cls.extend(ReportSuiteBaseRepository, {
		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/collections/suites/:rsid',
				params: {
					rsid: '@rsid'
				},
				pageQueryResults: true,
				actions: ['query', 'get']
			});
		},

		getReportSuite: function getReportSuite(rsid) {
			return this.get({
				rsid: rsid,
				expansion: 'currency,axleConfig,currentTimezoneOffset'
			});
		}
	});

	return new SuitesRepository();
});
'use strict';

angular.module('common').factory('tagRepository', function (cls, Repository, appModel, Tag) {
	var l10nConfig = analyticsui['core'].l10nConfig;


	var TagRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				model: Tag,
				endpoint: appModel.appService.baseURL + '/tags/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		_getResourceActions: function _getResourceActions(args) {
			var self = this;
			var actions = this.super._getResourceActions(args);

			actions.create.isArray = true;

			actions.update = {
				url: appModel.appService.baseURL + '/tags/tagitems',
				method: 'PUT',
				params: {
					locale: l10nConfig.currentLocale
				},
				isArray: true,
				transformRequest: self._transformRequest([this._transformOutboundItem])
			};

			return actions;
		}

	});

	return new TagRepository();
});
'use strict';

angular.module('common').factory('timezoneRepository', function (cls, Repository, appModel, $filter) {

	var TimezoneRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/timezones',
				params: {},
				actions: ['query']
			});
		}

	});

	return new TimezoneRepository();
});
'use strict';

angular.module('common').factory('userGroupRepository', function (cls, Repository, appModel, $filter) {
	var l10nConfig = analyticsui['core'].l10nConfig;


	var UserGroupRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/usergroups/custom',
				params: {},
				actions: ['query', 'myGroups', 'update'],
				pageQueryResults: true
			});
		},

		_getDefaultParams: function _getDefaultParams() {
			return {
				expansion: 'name,description'
			};
		},

		_getResourceActions: function _getResourceActions(args) {
			var actions = this.super._getResourceActions(args);
			actions['myGroups'] = {
				method: 'GET',
				url: appModel.appService.baseURL + '/usergroups/custom/me',
				params: {
					locale: l10nConfig.currentLocale
				},
				transformResponse: this._transformResponse(this._queryTransforms())
			};
			actions['update'] = {
				method: 'PUT',
				isArray: true
			};
			return actions;
		},

		getMyGroups: function getMyGroups() {
			return this._executePagedResourceAction('myGroups', arguments);
		},

		_transformInboundItem: function _transformInboundItem(item) {
			item.id = item.groupId;
			item.type = item.type || 'group';
			return item;
		},

		_transformInboundList: function _transformInboundList(list) {
			list.push({
				'groupId': 1, /* always id == 1 for 'everyone' */
				'name': $filter('l10n')(['everyoneGroupName', 'All']),
				'type': 'all'
			});

			return this.super._transformInboundList(list);
		}

	});

	return new UserGroupRepository();
});
'use strict';

angular.module('common').factory('userRepository', function (cls, Repository, appModel) {

	var UserRepository = cls.extend(Repository, {

		_constructor: function _constructor() {
			this.super$({
				endpoint: appModel.appService.baseURL + '/users',
				params: { addAdminExpansion: false },
				actions: ['query'],
				pageQueryResults: true
			});
		},

		_transformInboundItem: function _transformInboundItem(item) {
			item.id = item.loginId;
			item.name = item.fullName;
			item.type = 'user';
			// This only means that the user has a temp login assigned to him/her.
			// For now, removing since it is confusing. It was disabling options in the share dialog for users.
			delete item.disabled;
			return item;
		}

	});

	return new UserRepository();
});
'use strict';

/* jshint camelcase: false */
angular.module('common').factory('virtualReportSuiteRepository', function (cls, ComponentRepository, appModel, _, $q, $http, scUrl, VirtualReportSuite, userGroupRepository) {

	var VirtualReportSuiteRepository = cls.extend(ComponentRepository, {

		_constructor: function _constructor() {
			this.super$({
				model: VirtualReportSuite,
				endpoint: appModel.appService.baseURL + '/virtualreportsuites/:id',
				params: { id: '@id' },
				actions: ['get', 'create', 'update', 'delete', 'query'],
				pageQueryResults: true
			});
		},

		getModel: function getModel(args) {
			args = angular.extend({ expansions: ['parentRsid', 'description', 'segmentList', 'tags', 'userGroups', 'timezone'] }, args);
			return this.super.getModel(args);
		},

		saveModel: function saveModel(component, originalGroups, selectedGroups) {
			var self = this;

			return self.super.saveModel(component).then(function (savedVirtualReportSuite) {
				var ALL_GROUP_ID = 1;
				var savedId = savedVirtualReportSuite.id;

				var deletedGroups = [];
				var newGroups = [];

				if (selectedGroups === undefined) {
					return $q.when();
				} else if (selectedGroups.length === 0) {
					// If no selected groups, delete VRS from each original group
					if (originalGroups.length === 0) {
						// If no original groups, do nothing
						return $q.when();
					} else {
						return userGroupRepository.query({ expansion: 'rsids', groupIds: _.pluck(originalGroups, 'groupId').join(',') }).then(function (origGroups) {
							// Remove the All group
							origGroups = _.reject(origGroups, { groupId: ALL_GROUP_ID });
							origGroups = _.map(origGroups, function (group) {
								return _.omit(group, ['id', 'type']);
							});

							origGroups.forEach(function (group) {
								var index = _.indexOf(group.rsids, savedId);
								if (index >= 0) {
									group.rsids.splice(index, 1);
									deletedGroups.push(group);
								}
							});

							return self._updateGroups(deletedGroups);
						});
					}
				} else {
					return userGroupRepository.query({ expansion: 'rsids', groupIds: _.pluck(selectedGroups, 'groupId').join(',') }).then(function (sltdGroups) {
						// Remove the All group
						sltdGroups = _.reject(sltdGroups, { groupId: ALL_GROUP_ID });
						sltdGroups = _.map(sltdGroups, function (group) {
							return _.omit(group, ['id', 'type']);
						});

						if (originalGroups.length === 0) {
							sltdGroups.forEach(function (group) {
								group.rsids.push(savedId);
								newGroups.push(group);
							});

							return self._updateGroups(newGroups);
						} else {
							return userGroupRepository.query({ expansion: 'rsids', groupIds: _.pluck(originalGroups, 'groupId').join(',') }).then(function (origGroups) {
								origGroups = _.reject(origGroups, { groupId: ALL_GROUP_ID });
								origGroups = _.map(origGroups, function (group) {
									return _.omit(group, ['id', 'type']);
								});

								// If an original group was removed, remove this virtual report suite from that group's rsids
								origGroups.forEach(function (group) {
									var groupIndex = _.indexOf(_.pluck(sltdGroups, 'groupId'), group.groupId);
									if (groupIndex < 0) {
										group.rsids.splice(_.indexOf(group.rsids, savedId), 1);
										deletedGroups.push(group);
									}
								});
								// If a new group was added, add this virtual report suite to the group's rsids
								sltdGroups.forEach(function (group) {
									var groupIndex = _.indexOf(_.pluck(originalGroups, 'groupId'), group.groupId);
									if (groupIndex < 0) {
										group.rsids.push(savedId);
										newGroups.push(group);
									}
								});
							}).then(function () {
								return self._updateGroups(newGroups.concat(deletedGroups));
							});
						}
					});
				}
			});
		},

		_updateGroups: function _updateGroups(groupsToSave) {
			if (groupsToSave.length) {
				return userGroupRepository.update(groupsToSave);
			} else {
				return $q.when();
			}
		}
	});

	return new VirtualReportSuiteRepository();
});
'use strict';

/* jshint camelcase: false */

angular.module('common').factory('anomalyService', function ($http, appModel, $q, cancelableQ, $timeout, viewState, metricService) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var anomalyData;
	var loadDataCancelable;

	var loadData = function loadData(trainPeriod, viewPeriod, segmentIds, metricIds) {

		if (angular.isArray(segmentIds)) {
			segmentIds = segmentIds.join(',') || '0';
		}

		var deferred = $q.defer();

		if (loadDataCancelable) {
			loadDataCancelable.cancel();
		}

		loadDataCancelable = cancelableQ.wrap(deferred.promise);

		var params = {
			a: 'Predictive.GetData',
			ssSession: appModel.omnitureUrl.ssSession,
			view_period_start: viewPeriod.start.format('YYYY-MM-DD'),
			view_period_end: viewPeriod.end.format('YYYY-MM-DD'),
			tracked_only: true,
			// The backend service currently only support a number of periods (in our case days) that
			// should be used for training prior to the view period. So although our train period start and
			// end are arbitrary dates, we're converting it here to just be number of periods.
			training_days: trainPeriod.end.diff(trainPeriod.start, 'days') + 1, // (+1 to include both start and end)
			segment_ids: segmentIds,
			rsid: appModel.reportSuite.rsid,
			locale: l10nConfig.currentLocale
		};

		if (metricIds) {
			params.metrics = metricIds.join(',');
		} else {
			//Pass back any metrics if there are any.  NOTE: the first time that this service is called it
			//will not pass back any metrics but will rely on the backend to grab them.
			var trackedMetrics = metricService.getTrackedMetrics();
			if (trackedMetrics && trackedMetrics.metric_ids instanceof Array) {
				params.metrics = trackedMetrics.metric_ids.join(',');
			}
		}

		$http({
			method: 'GET',
			url: appModel.omnitureUrl.endpoints.scUrl,
			cache: true,
			params: params,
			timeout: -1,
			transformResponse: function transformResponse(response) {
				try {
					//Utilize a reviver function to convert date strings to date objects. For reference see:
					//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse.
					var isoDateRegex = /^(\d{4})-0?(\d+)-0?(\d+)[T ]0?(\d+):0?(\d+):0?(\d+)/i;
					return JSON.parse(response, function (key, value) {
						if ((typeof value == 'string' || value instanceof String) && isoDateRegex.test(value)) {
							return new Date(value);
						}
						return value;
					});
				} catch (err) {
					return JSON.parse(response);
				}
			}
		}).then(function (response) {
			loadDataCancelable = null;

			//If the response was unable to be parsed it will be returned as a string so reject it.
			if ($.type(response.data) === 'string') {
				deferred.reject(response.data);
			} else {
				deferred.resolve(response.data);
			}
		}, function (error) {
			deferred.reject(error);
		});

		return loadDataCancelable;
	};

	var loadAndParseData = function loadAndParseData(trainPeriod, viewPeriod, segmentIds, metricIds) {
		var deferred = $q.defer();

		viewState.loadingAnomalyData = true;

		// Pull both the anomaly data and the metrics. If no metrics are currently tracked then forward the user
		// to the metrics list
		$q.all([loadData(trainPeriod, viewPeriod, segmentIds, metricIds), metricService.loadMetrics()]).then(function (results) {
			viewState.loadingAnomalyData = false;
			deferred.resolve(results[0]);
		}.bind(this), function (error) {
			//Don't stop displaying the loadingAnimation if the request was canceled. A request will
			//only be canceled when we attempt to load different data.
			if (error !== 'canceled') {
				viewState.loadingAnomalyData = false;
			}
			deferred.reject(error);
		});

		return deferred.promise;
	};

	//The predictive API documentation is located at https://zerowing.corp.adobe.com/display/scservices/Predictive+Segment+APIs
	var api = {
		anomalies: anomalyData,

		/**
   * Load all anomaly data, replacing anomaly data we already have.
   *
   * @param trainPeriod
   * @param viewPeriod
   * @returns promise
   */
		load: function load(trainPeriod, viewPeriod, segmentIds, metricIds) {
			return loadAndParseData(trainPeriod, viewPeriod, segmentIds, metricIds);
		}
	};

	return api;
});
'use strict';

/* jshint camelcase: false */

angular.module('common').factory('metricService', function ($http, $q, appModel, eventBus, viewState, $location) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var loadPromise;

	// Added to the metric array instances for convenience. Keep an eye on this...if it gets dangerous
	// let's not hesitate to remove it.
	var getById = function getById(id) {
		for (var i = 0, ii = this.length; i < ii; i++) {
			var item = this[i];
			if (item.id == id) {
				return item;
			}
		}
	};

	//The predictive API documentation is located at https://zerowing.corp.adobe.com/display/scservices/Predictive+Segment+APIs
	return {
		metrics: null,
		trackedMetrics: null,

		loadMetrics: function loadMetrics(trackedMetrics) {
			// Only load metrics once.
			if (loadPromise) {
				return loadPromise;
			}

			var deferred = $q.defer();

			// Previously we had cache set to true on the Angular http request and we didn't have this
			// condition in here. However, that caused problems. When metrics were loaded via loadMetrics(),
			// then a metric was later created and added to the metrics array, then loadMetrics() was called
			// later again, Angular would return the cached metrics it loaded originally. This would wipe out
			// the newly created metric and cause problems. That is why we now make sure to return the current
			// this.metrics.
			if (this.metrics) {
				deferred.resolve(this.metrics);
				return deferred.promise;
			}

			loadPromise = deferred.promise;
			viewState.loadingMetrics = true;

			$http({
				method: 'GET',
				url: appModel.omnitureUrl.endpoints.scUrl,
				params: {
					a: 'Predictive.GetMetrics',
					ssSession: appModel.omnitureUrl.ssSession,
					include_category_names: true,
					rsid: appModel.reportSuite.rsid,
					locale: l10nConfig.currentLocale
				}
			}).then(function (response) {
				var metrics = response.data;
				if (metrics) {
					this.metrics = {
						all: metrics,
						standard: metrics,
						segmented: []
					};

					this.metrics.all.getById = this.metrics.standard.getById = this.metrics.segmented.getById = getById;

					this.metrics.standard.forEach(function (metric) {
						metric.type = 'standard';
					});

					this.metrics.segmented.forEach(function (metric) {
						metric.type = 'segmented';
					});

					//If an array of tracked metrics is passed in externally update the metric array to match those
					//tracked metrics if any.
					if (trackedMetrics) {
						this.metrics.all.forEach(function (metric) {
							metric.tracked = trackedMetrics.indexOf(metric.id) !== -1;
						});
					}

					deferred.resolve(this.metrics);
					viewState.loadingMetrics = false;

					//If there are no tracked metrics then display a first time message to the users.
					this.trackedMetrics = trackedMetrics || this.getTrackedMetrics();
				} else {
					//If the data doesn't come back appropriately then the response should be rejected
					deferred.reject('Bad Data');
					viewState.loadingMetrics = false;
				}
			}.bind(this), function (error) {
				deferred.reject(error);
				viewState.loadingMetrics = false;
			});

			return loadPromise;
		},

		saveTrackedMetrics: function saveTrackedMetrics() {
			var deferred = $q.defer();

			this.trackedMetrics = this.getTrackedMetrics();

			viewState.savingTrackedMetrics = true;

			// By default angular will post using the request payload instead of doing a form post like
			// jQuery does by default. Mojavi won't read any variables are are not set through a form post.
			// In order to mimic this behavior I am specifying that this is a form post and then using
			// jQuery to serialize the data. You can find more information about this by referring to:
			// http://stackoverflow.com/questions/11442632/how-can-i-make-angular-js-post-data-as-form-data-instead-of-a-request-payload
			$http({
				method: 'POST',
				url: appModel.omnitureUrl.endpoints.scUrl,
				params: {
					a: 'Predictive.SaveTrackedMetrics',
					ssSession: appModel.omnitureUrl.ssSession,
					rsid: appModel.reportSuite.rsid
				},
				data: {
					'metric_ids': this.trackedMetrics
				}
			}).then(function () {
				viewState.savingTrackedMetrics = false;
				eventBus.publish('savedTrackedMetrics');
				deferred.resolve();
			}, function (error) {
				viewState.savingTrackedMetrics = false;
				deferred.reject(error);
			});

			return deferred.promise;
		},

		applyTrackedMetrics: function applyTrackedMetrics() {
			var deferred = $q.defer();

			this.trackedMetrics = this.getTrackedMetrics();
			deferred.resolve(this.trackedMetrics);

			return deferred.promise;
		},

		getTrackedMetrics: function getTrackedMetrics() {
			if (this.metrics) {
				return this.metrics.all.filter(function (metric) {
					return metric.tracked;
				}).map(function (metric) {
					return metric.id;
				});
			}
			return null;
		}
	};
});
'use strict';

angular.module('common').factory('viewState', function () {
	return {
		viewPeriod: {
			start: null, // moment.js object
			end: null // moment.js object
		},
		trainPeriod: {
			start: null, // moment.js object
			end: null // moment.js object
		},
		loadingAnomalyData: false,
		savingTrackedMetrics: false,
		loadingDimensions: false,
		loadingElements: false,
		loadingMetrics: false,
		displayFirstTimeMessage: false
	};
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.BooleanValue', function (_, model, cls) {

	var ExpressionItem = cls.import('calculated-metric.ExpressionItem');

	var BooleanValue = function (_ExpressionItem) {
		_inherits(BooleanValue, _ExpressionItem);

		function BooleanValue() {
			_classCallCheck(this, BooleanValue);

			return _possibleConstructorReturn(this, (BooleanValue.__proto__ || Object.getPrototypeOf(BooleanValue)).apply(this, arguments));
		}

		_createClass(BooleanValue, [{
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return _get(BooleanValue.prototype.__proto__ || Object.getPrototypeOf(BooleanValue.prototype), '_parseJSON', this).call(this, { value: json });
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				return this.value;
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					value: Boolean,
					itemType: { const: 'cmBooleanValue', transient: true }
				};
			}
		}]);

		return BooleanValue;
	}(ExpressionItem);

	return BooleanValue;
});
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.DimensionRef', function (_, model, cls, $filter) {
	var Dimension = analyticsui['model'].Dimension;


	var NamedRef = cls.import('calculated-metric.NamedRef'),
	    ExpressionItem = cls.import('calculated-metric.ExpressionItem');

	return function (_ExpressionItem) {
		_inherits(DimensionRef, _ExpressionItem);

		_createClass(DimensionRef, null, [{
			key: 'mixins',
			value: function mixins() {
				return [NamedRef];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					itemType: { const: 'cmDimensionRef', transient: true }
				};
			}
		}]);

		function DimensionRef(data, config) {
			_classCallCheck(this, DimensionRef);

			var _this = _possibleConstructorReturn(this, (DimensionRef.__proto__ || Object.getPrototypeOf(DimensionRef)).call(this, data, config));

			if (data) {
				_this._loadName(Dimension, data.description);
			}
			return _this;
		}

		_createClass(DimensionRef, [{
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return _get(DimensionRef.prototype.__proto__ || Object.getPrototypeOf(DimensionRef.prototype), '_parseJSON', this).call(this, { id: json.id });
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				return {
					func: 'attr',
					name: this.id
				};
			}
		}]);

		return DimensionRef;
	}(ExpressionItem);
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.ExpressionItem', function (_, model, guid) {
	var Model = analyticsui['core'].Model;

	var ExpressionItem = function (_Model) {
		_inherits(ExpressionItem, _Model);

		function ExpressionItem() {
			_classCallCheck(this, ExpressionItem);

			return _possibleConstructorReturn(this, (ExpressionItem.__proto__ || Object.getPrototypeOf(ExpressionItem)).apply(this, arguments));
		}

		_createClass(ExpressionItem, [{
			key: 'toggleSelection',
			value: function toggleSelection(exclusive) {

				var isSelected = this.selected;

				if (exclusive) {
					// Deselect everything in the tree
					this.expression.rootExpression.deselectAll();
				} else {
					// Deselect other expressions, but leave my expression alone
					this.expression.rootExpression.deselectAll(this.expression);
				}

				this.selected = !isSelected;

				if (this.expression) {
					this.expression.emit('selectionChange', this);
				}
			}
		}, {
			key: 'hasParent',
			value: function hasParent(item) {
				var parent = this.parent;
				while (parent) {
					if (parent === item) {
						return true;
					}
					parent = parent.parent;
				}
				return false;
			}
		}, {
			key: 'visit',
			value: function visit(fn) {
				fn(this);
			}
		}, {
			key: 'populateReferences',
			value: function populateReferences(provider) {
				// Do nothing
			}
		}, {
			key: 'parent',
			get: function get() {
				if (this._parent) {
					return this._parent;
				} else {
					return this.expression;
				}
			},
			set: function set(value) {
				this._parent = value;
			}
		}], [{
			key: 'fields',
			value: function fields() {
				return [
				// usually an expression is owned by an expression in a tree feature
				// but in the case of functions, each parameter contains an expression
				'_parent',
				// The expression this item belongs to
				'expression'];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					selected: { type: Boolean, transient: true, default: false, silent: true },
					uniqueId: { type: String, transient: true, copyable: false, default: guid.create },

					// Used by the UI when an item is in 'choosing mode' - meaning the
					// user is selecting the item from an auto-complete list
					choosing: { type: Boolean, transient: true }
				};
			}
		}]);

		return ExpressionItem;
	}(Model);

	return ExpressionItem;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.Expression', function (_, guid, cls, model) {

	var ExpressionItem = cls.import('calculated-metric.ExpressionItem'),
	    Operator = cls.import('calculated-metric.Operator'),
	    MetricRef = cls.import('calculated-metric.MetricRef'),
	    FunctionRef = cls.import('calculated-metric.FunctionRef'),
	    SegmentRef = cls.import('calculated-metric.SegmentRef'),
	    BooleanValue = cls.import('calculated-metric.BooleanValue'),
	    NumericValue = cls.import('calculated-metric.NumericValue');

	var Expression = function (_ExpressionItem) {
		_inherits(Expression, _ExpressionItem);

		function Expression(data, config) {
			_classCallCheck(this, Expression);

			var _this = _possibleConstructorReturn(this, (Expression.__proto__ || Object.getPrototypeOf(Expression)).call(this, data, config));

			_this.items.on('change', function (e) {
				if (e.added) {
					this._setExpression(e.added);
				}
				this._ensureOperators();
			}.bind(_this));

			// Make sure all current items have expression set
			_this._setExpression(_this.items);
			_this._ensureOperators();
			return _this;
		}

		_createClass(Expression, [{
			key: 'visit',


			// Visit gets called for each item in the tree
			// For expressions, functions, and parameters it gets called twice
			// once with 'start' before the children have been visited and
			// once with 'end' after the children have been visited
			value: function visit(fn, visitSegments) {
				fn(this, 'start');
				if (visitSegments) {
					this.segments.forEach(function (segment) {
						fn(segment);
					});
				}
				this.items.forEach(function (item) {
					item.visit(fn, visitSegments);
				});
				fn(this, 'end');
			}
		}, {
			key: 'deselectAll',
			value: function deselectAll(sender) {

				this.items.forEach(function (item) {
					// Don't deselect items in this container if this container triggered the deselectAll
					if (sender != this) {
						item.selected = false;
					}
					// Tell all child expressions to deselectAll
					if (item.deselectAll) {
						item.deselectAll(sender);
					}
				}.bind(this));
			}
		}, {
			key: 'hasSelected',
			value: function hasSelected() {
				return this.selectedItems.length > 0;
			}
		}, {
			key: 'deepHasSelected',
			value: function deepHasSelected() {
				return this.hasSelected() || this.items.some(function (item) {
					return item.hasSelected && item.hasSelected();
				});
			}
		}, {
			key: '_parseJSON',
			value: function _parseJSON(json) {

				var segments = [],
				    item;

				if (json.func === 'calc-metric') {
					item = json.formula;
					segments = parseSegments(json);
				} else if (json.func === 'visualization-group') {
					item = json.col;
				} else {
					item = json;
				}

				return {
					segments: segments,
					items: parseItem(item)
				};
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {

				var contentJSON = serializeItems(this.items);
				var json;

				// If this is a root expression or it has segments, we want to serialize it as
				// a calc-metric, otherwise we will serialize it as a visualization-group
				if (!this.expression || this.segments.length > 0) {
					json = {
						func: 'calc-metric',
						formula: angular.isDefined(contentJSON) ? contentJSON : {},
						version: [1, 0, 0]
					};
					if (this.segments.length > 0) {
						json.filters = this.segments.map(function (segment) {
							return segment.toJSON();
						});
					}
				} else {
					json = {
						func: 'visualization-group',
						col: contentJSON
					};
				}

				return json;
			}

			// populateReferences(provider) {
			// 	this.segments.forEach(function(segment) {
			// 		segment.populateReferences(provider);
			// 	});
			//
			// 	this.items.forEach(function(item) {
			// 		item.populateReferences(provider);
			// 	});
			// }

		}, {
			key: '_setExpression',
			value: function _setExpression(items) {
				items.forEach(function (item) {
					if (item.expression && item.expression != this) {
						item.expression.items.remove(item);
					}
					item.expression = this;
				}, this);
			}
		}, {
			key: '_ensureOperators',
			value: function _ensureOperators() {

				var self = this;

				this.items.supressEvent('change', function () {

					var i = 0;

					while (i < self.items.length - 1) {
						if (consecutiveOperators(i)) {
							self.items.removeAt(i + 1);
						} else if (consecutiveItems(i)) {
							var operator = new Operator();
							self.items.insert(operator, i + 1);
							// since the change event isn't firing, we need to manually take care of this
							self._setExpression([operator]);
						}
						i++;
					}

					function consecutiveOperators(i) {
						return self.items[i] instanceof Operator && self.items[i + 1] instanceof Operator;
					}

					function consecutiveItems(i) {
						return !(self.items[i] instanceof Operator) && !(self.items[i + 1] instanceof Operator);
					}

					if (self.items.first() instanceof Operator) {
						self.items.remove(self.items.first());
					}

					if (self.items.last() instanceof Operator) {
						self.items.remove(self.items.last());
					}
				});
			}
		}, {
			key: 'rootExpression',
			get: function get() {
				if (this.parent && this.parent.expression) {
					return this.parent.expression.rootExpression;
				} else if (this.expression) {
					return this.expression.rootExpression;
				} else {
					return this;
				}
			}
		}, {
			key: 'selectedItems',
			get: function get() {
				return this.items.filter(function (item) {
					return item.selected;
				});
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					itemType: { const: 'cmExpression', transient: true },

					segments: { Array: SegmentRef, observe: true, observeItems: true, duplicates: 'prevent', key: 'id' },

					items: {
						Array: [Operator, MetricRef, Expression, FunctionRef],
						observe: true,
						observeItems: true,
						duplicates: 'move'
					}
				};
			}
		}]);

		return Expression;
	}(ExpressionItem);

	function parseItem(json, parent) {
		var result;
		if (angular.isNumber(json)) {
			result = [NumericValue.fromJSON(json)];
		} else if (typeof json === 'boolean') {
			result = [BooleanValue.fromJSON(json)];
		} else if (isOperatorFunction(json.func)) {
			if (isSubExpression(json, parent)) {
				result = [Expression.fromJSON(json)];
			} else {
				result = parseOperatorExpression(json);
			}
		} else if (Object.keys(json).length === 0) {
			result = [];
		} else {
			var ItemType = getItemType(json);
			var item = ItemType.fromJSON(json);
			// The UI doesn't support a metric with segments,
			// so if this is a metric with segments, we need to convert it to
			// an expression with the segments on it that contains the metric
			if (item instanceof MetricRef && item.segments.length > 0) {
				item = metricToExpression(item);
			}
			result = [item];
		}

		return result;
	}

	function parseSegments(json) {
		if (json.filters) {
			return json.filters.map(function (segment) {
				return SegmentRef.fromJSON(segment);
			});
		} else {
			return [];
		}
	}

	function getItemType(json) {
		switch (json.func) {
			case 'calc-metric':
			case 'visualization-group':
				return Expression;
			case 'metric':
			case 'dedup-sum':
				return MetricRef;
			default:
				return FunctionRef;
		}
	}

	function parseOperatorExpression(json) {
		var items = [];
		items = items.concat(parseItem(json.col1, json));
		items.push(new Operator({ operation: json.func }));
		items = items.concat(parseItem(json.col2, json));
		return items;
	}

	function isSubExpression(json, parent) {
		// If we have a function that is out of the order-of operations, we need to represent that as a sub-expression
		// for example: "(a - b) / c" needs to be represented in the UI with a sub-expression for "a - b"
		if (!parent) {
			return false;
		}

		var onRightHandside = parent.col2 === json;
		return onRightHandside && (parent.func === 'subtract' || parent.func === 'divide') || isHighPrecedence(parent.func) && isLowPrecedence(json.func);
	}

	var OperatorFunctions = ['add', 'subtract', 'divide', 'multiply'],
	    HighPrecedenceOperators = ['multiply', 'divide'];

	function isHighPrecedence(operation) {
		operation = operation.operation || operation;
		return HighPrecedenceOperators.indexOf(operation) > -1;
	}

	function isLowPrecedence(operation) {
		return !isHighPrecedence(operation);
	}

	function isOperatorFunction(operation) {
		return OperatorFunctions.indexOf(operation) > -1;
	}

	function isOperator(item) {
		return cls.instanceOf(item, Operator);
	}

	function serializeItems(items) {
		items = items.concat();

		function itemJSON(index) {
			var item = items[index];
			if (item && item.toJSON) {
				return item.toJSON();
			} else {
				return item;
			}
		}

		function consumeOperator(operator) {
			var index = items.indexOf(operator);
			var item = {
				func: operator.operation,
				col1: itemJSON(index - 1),
				col2: itemJSON(index + 1)
			};
			items.splice(index - 1, 3, item);
		}

		// consume operators, starting with high precedence operators
		items.filter(isHighPrecedence).forEach(consumeOperator);

		items.filter(isOperator).forEach(consumeOperator);

		return itemJSON(0);
	}

	function metricToExpression(metric) {
		var segments = metric.segments.concat();
		metric.segments.empty();
		return new Expression({ segments: segments, items: [metric] });
	}

	return Expression;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.FunctionRef', function (_, $filter, cls, model, ObservableList, appModel) {
	var FunctionRef = analyticsui['model'].FunctionRef;
	var Model = analyticsui['core'].Model;


	var ExpressionItem = cls.import('calculated-metric.ExpressionItem'),
	    NamedRef = cls.import('calculated-metric.NamedRef'),
	    DimensionRef = cls.import('calculated-metric.DimensionRef'),
	    BooleanValue = cls.import('calculated-metric.BooleanValue'),
	    NumericValue = cls.import('calculated-metric.NumericValue');

	var Parameter = function (_Model) {
		_inherits(Parameter, _Model);

		_createClass(Parameter, null, [{
			key: 'fields',
			value: function fields() {
				return ['_function'];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					id: String,
					name: String,
					type: String,
					defaultValue: Object,
					itemType: { const: 'cmParameter' },

					// Should be Expression, but since Expression uses FunctionRef, we have to use Model so we don't get circular dependency
					value: { type: Model, observe: true }
				};
			}
		}]);

		function Parameter(data, config) {
			_classCallCheck(this, Parameter);

			var _this = _possibleConstructorReturn(this, (Parameter.__proto__ || Object.getPrototypeOf(Parameter)).call(this, data, config));

			_this._initializeValue();
			_this.on('change', function () {
				this._configValue();
			}.bind(_this));
			return _this;
		}

		_createClass(Parameter, [{
			key: 'visit',
			value: function visit(fn, visitSegments) {
				fn(this, 'start');
				this.visitValue(fn, visitSegments);
				fn(this, 'end');
			}
		}, {
			key: 'visitValue',
			value: function visitValue(fn, visitSegments) {
				this.value.visit(fn, visitSegments);
			}
		}, {
			key: 'deselectAll',
			value: function deselectAll(sender) {
				this.value.deselectAll(sender);
			}
		}, {
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return {
					id: json.name,
					name: json.friendlyName || json.name,
					type: json.type,
					defaultValue: json['default-value']
				};
			}
		}, {
			key: '_initializeValue',
			value: function _initializeValue() {
				var Expression = cls.import('calculated-metric.Expression');
				this.value = new Expression();
				// this.value = new Expression();

				if (this.type === 'boolean') {
					// If there is a default value, then use it - othewise use false
					var val = this.defaultValue || false;
					this.value.items.push(new BooleanValue({ value: val }));
				} else if (this.type === 'integer') {
					this.value.items.push(new NumericValue());
				}
			}
		}, {
			key: '_configValue',
			value: function _configValue() {
				this.value.parent = this._function;
			}
		}, {
			key: 'function',
			get: function get() {
				return this._function;
			},
			set: function set(fn) {
				this._function = fn;
				this._configValue();
			}
		}]);

		return Parameter;
	}(Model);

	var ArrayParameter = function (_Parameter) {
		_inherits(ArrayParameter, _Parameter);

		function ArrayParameter() {
			_classCallCheck(this, ArrayParameter);

			return _possibleConstructorReturn(this, (ArrayParameter.__proto__ || Object.getPrototypeOf(ArrayParameter)).apply(this, arguments));
		}

		_createClass(ArrayParameter, [{
			key: 'visitValue',
			value: function visitValue(fn, visitSegments) {
				this.value.forEach(function (param) {
					param.visit(fn, visitSegments);
				});
			}
		}, {
			key: 'deselectAll',
			value: function deselectAll(sender) {
				this.value.forEach(function (exp) {
					exp.deselectAll(sender);
				});
			}
		}, {
			key: '_initializeValue',
			value: function _initializeValue() {
				var Expression = cls.import('calculated-metric.Expression');
				this.value = [new Expression()];
			}
		}, {
			key: '_configValue',
			value: function _configValue() {
				this.value.forEach(function (item) {
					item.parent = this.function;
				}, this);
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					isArray: { const: true },

					// Should be Expression, but since Expression uses FunctionRef, we have to use Model so we don't get ciruclar dependency
					value: { Array: Model, observe: true, observeItems: true },

					itemType: { const: 'cmArrayParameter' }
				};
			}
		}]);

		return ArrayParameter;
	}(Parameter);

	var FunctionRefAngular = function (_ExpressionItem) {
		_inherits(FunctionRefAngular, _ExpressionItem);

		_createClass(FunctionRefAngular, null, [{
			key: 'mixins',
			value: function mixins() {
				return [NamedRef];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					id: String,
					name: { type: String, transient: true },
					functionInfo: { type: Object, transient: true },
					itemType: { const: 'cmFunctionRef', transient: true },
					parameters: { Array: [Parameter, ArrayParameter], observe: true, observeItems: true }
				};
			}
		}]);

		function FunctionRefAngular(data, config) {
			_classCallCheck(this, FunctionRefAngular);

			var _this3 = _possibleConstructorReturn(this, (FunctionRefAngular.__proto__ || Object.getPrototypeOf(FunctionRefAngular)).call(this, data, config));

			if (_this3.choosing) {
				_this3._createPlaceholderParameter();
			}

			if (data) {
				_this3._loadName(FunctionRef, data.description);
			}

			var hasFn = appModel.cache.has(FunctionRef, _this3.id);
			if (hasFn) {
				var fn = appModel.cache.get(FunctionRef, _this3.id);
				_this3.functionInfo = fn;
				_this3._populateParameters(fn, data);
			}

			_this3._setFunction(_this3.parameters);

			_this3.parameters.on('change', function (e) {
				_this3._setFunction(e.added || []);
			});
			return _this3;
		}

		_createClass(FunctionRefAngular, [{
			key: 'visit',
			value: function visit(fn, visitSegments) {
				fn(this, 'start');
				this.parameters.forEach(function (param) {
					param.visit(fn, visitSegments);
				});
				fn(this, 'end');
			}
		}, {
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return {
					id: json.func,
					deprecated: json.deprecated
				};
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				var json = {
					func: this.id,
					description: this.name
				};

				if (this.deprecated) {
					json.deprecated = true;
				}

				addParameters(json, this.parameters);

				return json;
			}
		}, {
			key: 'deselectAll',
			value: function deselectAll(sender) {
				this.parameters.forEach(function (param) {
					param.deselectAll(sender);
				});
			}
		}, {
			key: '_populateParameters',
			value: function _populateParameters(fn, json) {
				// Create parameters from definitions
				this.parameters = fn.definition.parameters.map(function (paramDef) {
					if (paramDef.type.indexOf('array') > -1) {
						return ArrayParameter.fromJSON(paramDef);
					} else {
						return Parameter.fromJSON(paramDef);
					}
				});
				// Parse the parameter values from the json
				parseParameterValues(this.parameters, json);
			}
		}, {
			key: '_createPlaceholderParameter',
			value: function _createPlaceholderParameter() {
				var param = new Parameter({ id: 'col', name: 'col', type: 'column' });
				this.parameters.push(param);
			}
		}, {
			key: '_setFunction',
			value: function _setFunction(items) {
				items.forEach(function (param) {
					param.function = this;
				}, this);
			}
		}]);

		return FunctionRefAngular;
	}(ExpressionItem);

	function parseParameterValues(parameters, json) {
		var Expression = cls.import('calculated-metric.Expression');

		parameters.forEach(function (param) {
			var value = json[param.id];
			if (angular.isUndefined(value)) {
				return;
			}

			if (param.isArray && angular.isArray(value)) {
				param.value = value.map(function (json) {
					// Don't call value.map(Expression.fromJSON) - map on some platforms includes an index as a second parameter and fromJSON expects a cnofig as the second parameter
					return Expression.fromJSON(json);
				});
			} else if (!param.isArray) {
				if (param.id === 'field') {
					param.value = new Expression();
					var dimensionRef = new DimensionRef({ id: value.name });
					param.value.items.push(dimensionRef);
					param.name = 'dimension';
					return;
				}
				var expression = Expression.fromJSON(value);
				if (expression.segments.length > 0) {
					// We need to create the placeholder expression
					param.value = new Expression();
					param.value.items.push(expression);
				} else {
					param.value = expression;
				}
			}
		});
	}

	function addParameters(json, parameters) {
		parameters.forEach(function (param) {
			if (param.isArray) {
				json[param.id] = param.value.map(paramJSON);
			} else {
				var paramValueJson = paramJSON(param.value);
				if (_.isObject(paramValueJson) && _.isEmpty(paramValueJson) && param.defaultValue) {
					return;
				}
				json[param.id] = paramValueJson;
			}
		});
	}

	function paramJSON(param) {
		// Since each param is really an Expression, we need to discard the calc-metric wrapper
		var json = param.toJSON();
		return json.formula;
	}

	FunctionRefAngular.Parameter = Parameter;
	FunctionRefAngular.ArrayParameter = ArrayParameter;
	return FunctionRefAngular;
});
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.MetricRef', function (_, model, cls, $filter) {
	var Metric = analyticsui['model'].Metric;


	var DEFAULT = 'default',
	    VISITORS = 'visitors';

	var ExpressionItem = cls.import('calculated-metric.ExpressionItem'),
	    SegmentRef = cls.import('calculated-metric.SegmentRef'),
	    NamedRef = cls.import('calculated-metric.NamedRef');

	var MetricRef = function (_ExpressionItem) {
		_inherits(MetricRef, _ExpressionItem);

		_createClass(MetricRef, null, [{
			key: 'mixins',
			value: function mixins() {
				return [NamedRef];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					// UI properties
					itemType: { const: 'cmMetricRef', transient: true },

					// Model Properties
					totalled: { type: Boolean, default: false },

					allocation: {
						type: 'enum (default, linear-allocation, participation-allocation, visitor-participation-allocation, last-touch-allocation, marketing-channel-last-touch-allocation, marketing-channel-first-touch-allocation)',
						default: 'default'
					},

					segments: { Array: SegmentRef, duplicates: 'prevent', key: 'id' }
				};
			}
		}]);

		function MetricRef(data, config) {
			_classCallCheck(this, MetricRef);

			var _this = _possibleConstructorReturn(this, (MetricRef.__proto__ || Object.getPrototypeOf(MetricRef)).call(this, data, config));

			if (!data) {
				return _possibleConstructorReturn(_this);
			}

			var name = data.metric ? data.metric.description : data.description;

			_this._loadName(Metric, name);

			return _this;
		}

		_createClass(MetricRef, [{
			key: '_parseJSON',
			value: function _parseJSON(json) {

				var totalled = false;

				if (json.func === 'dedup-sum') {
					json = json.metric;
					totalled = true;
				}

				var parsedJSON = {
					id: json.name,
					allocation: parseAllocation(json),
					segments: json.filters,
					totalled: totalled,
					deprecated: json.deprecated
				};

				return _get(MetricRef.prototype.__proto__ || Object.getPrototypeOf(MetricRef.prototype), '_parseJSON', this).call(this, parsedJSON);
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				var json = _get(MetricRef.prototype.__proto__ || Object.getPrototypeOf(MetricRef.prototype), 'toJSON', this).call(this);
				var metricJSON = {
					func: 'metric',
					name: json.id,
					// Store the current friendly name so we can
					// load it up if the calc-metric is loaded in a report suite
					// where this metric isn't defined
					description: this.name
				};

				if (json.deprecated) {
					metricJSON.deprecated = json.deprecated;
				}

				if (json.segments.length > 0) {
					metricJSON.filters = json.segments;
				}

				if (json.allocation && json.allocation !== DEFAULT) {
					metricJSON['dimension-view'] = createDimensionView(json.allocation);
				}

				if (this.totalled) {
					return {
						func: 'dedup-sum',
						metric: metricJSON
					};
				} else {
					return metricJSON;
				}
			}
		}, {
			key: 'totalledName',
			get: function get() {
				if (this.totalled) {
					return $filter('l10n')(['cmbTotal', 'Total %1$s'], [this.name]);
				} else {
					return this.name;
				}
			}
		}], [{
			key: 'canParse',
			value: function canParse(json) {
				return json && json.func === 'metric' || json.func === 'dedup-sum';
			}
		}]);

		return MetricRef;
	}(ExpressionItem);

	function parseAllocation(json) {
		var allocation;

		var dimensionView = json['dimension-view'];

		if (dimensionView) {
			allocation = dimensionView.func;
			if (allocation === 'participation-allocation' && dimensionView.container === VISITORS) {
				allocation = 'visitor-participation-allocation';
			}
		}
		return allocation;
	}

	function createDimensionView(allocation) {
		var dimensionView = {
			func: allocation
		};
		if (allocation === 'visitor-participation-allocation') {
			dimensionView.func = 'participation-allocation';
			dimensionView.container = 'visitors';
		}
		return dimensionView;
	}

	return MetricRef;
});
'use strict';

angular.module('common').factory('calculated-metric.NamedRef', function (_, model, $filter, appModel) {

	var NamedRef = {

		id: String,
		name: { type: String, transient: true },
		deprecated: Boolean,
		unknown: Boolean,

		_loadName: function _loadName(entityClass, defaultName) {
			var _this = this;

			// Load the item from the appModel.cache

			var hasItem = appModel.cache.has(entityClass, this.id);

			// Use the name from the appModel.cache item
			// If it isn't there, use the default name or if that isn't provide, go with Uknown
			if (hasItem) {
				var item = appModel.cache.get(entityClass, this.id);
				this.name = item.name;
				item.on('change:name', function (_ref) {
					var newValue = _ref.newValue;
					return _this.name = newValue;
				});
			} else {
				if (defaultName) {
					this.name = defaultName;
				} else {
					this.name = $filter('l10n')(['unknownName', 'Unknown']);
				}
				this.unknown = true;
			}
		}

	};

	return NamedRef;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.NumericValue', function (_, model, cls) {

	var ExpressionItem = cls.import('calculated-metric.ExpressionItem');

	var NumericValue = function (_ExpressionItem) {
		_inherits(NumericValue, _ExpressionItem);

		function NumericValue() {
			_classCallCheck(this, NumericValue);

			return _possibleConstructorReturn(this, (NumericValue.__proto__ || Object.getPrototypeOf(NumericValue)).apply(this, arguments));
		}

		_createClass(NumericValue, [{
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return _get(NumericValue.prototype.__proto__ || Object.getPrototypeOf(NumericValue.prototype), '_parseJSON', this).call(this, { value: json });
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				return this.value;
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					value: Number,
					itemType: { const: 'cmNumericValue', transient: true }
				};
			}
		}]);

		return NumericValue;
	}(ExpressionItem);

	return NumericValue;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.Operator', function (_, model, cls) {

	var ExpressionItem = cls.import('calculated-metric.ExpressionItem');

	var Operator = function (_ExpressionItem) {
		_inherits(Operator, _ExpressionItem);

		function Operator() {
			_classCallCheck(this, Operator);

			return _possibleConstructorReturn(this, (Operator.__proto__ || Object.getPrototypeOf(Operator)).apply(this, arguments));
		}

		_createClass(Operator, [{
			key: 'operator',
			get: function get() {
				switch (this.operation) {
					case 'add':
						return '+';
					case 'subtract':
						return '-';
					case 'divide':
						return '/';
					case 'multiply':
						return 'x';
					default:
						throw new Error('Unknown operation: ' + this.operation);
				}
			}
		}, {
			key: 'operatorIcon',
			get: function get() {
				switch (this.operation) {
					case 'add':
						return 'add';
					case 'subtract':
						return 'minus';
					case 'divide':
						return 'divide';
					case 'multiply':
						return 'close';
					default:
						throw new Error('Unknown operation: ' + this.operation);
				}
			}
		}], [{
			key: 'properties',
			value: function properties() {
				return {
					itemType: { const: 'cmOperator', transient: true },
					operation: { type: 'enum (add, subtract, divide, multiply)', default: 'divide' }
				};
			}
		}]);

		return Operator;
	}(ExpressionItem);

	return Operator;
});
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('calculated-metric.SegmentRef', function (_, model, cls, $filter) {
	var Segment = analyticsui['model'].Segment;
	var Model = analyticsui['core'].Model;


	var NamedRef = cls.import('calculated-metric.NamedRef');

	var SegmentRef = function (_Model) {
		_inherits(SegmentRef, _Model);

		_createClass(SegmentRef, null, [{
			key: 'mixins',
			value: function mixins() {
				return [NamedRef];
			}
		}, {
			key: 'properties',
			value: function properties() {
				return {
					itemType: { const: 'cmSegmentRef', transient: true }
				};
			}
		}]);

		function SegmentRef(data, config) {
			_classCallCheck(this, SegmentRef);

			var _this = _possibleConstructorReturn(this, (SegmentRef.__proto__ || Object.getPrototypeOf(SegmentRef)).call(this, data, config));

			if (data) {
				_this._loadName(Segment, data.description);
			}
			return _this;
		}

		_createClass(SegmentRef, [{
			key: '_parseJSON',
			value: function _parseJSON(json) {
				return _get(SegmentRef.prototype.__proto__ || Object.getPrototypeOf(SegmentRef.prototype), '_parseJSON', this).call(this, { id: json.id, deprecated: json.deprecated });
			}
		}, {
			key: 'toJSON',
			value: function toJSON() {
				var json = {
					func: 'segment-ref',
					description: this.name,
					id: this.id
				};
				if (this.deprecated) {
					json.deprecated = this.deprecated;
				}
				return json;
			}
		}]);

		return SegmentRef;
	}(Model);

	return SegmentRef;
});
'use strict';

angular.module('common').filter('fuzzyScoreFilter', function () {
	return function (items, searchText, keys) {

		if (!keys) {
			keys = ['name'];
		} else if (!Array.isArray(keys)) {
			keys = [keys]; // Cast string to an array for simplicity.
		}

		if (!items || !Array.isArray(items)) {
			return [];
		} else if (!searchText) {
			// Return the entire list with a score of 0 if there is no search text.
			return items.map(function (item) {
				return {
					matchFound: true,
					isExactMatch: false,
					fuzzyScore: 0,
					originalItem: item
				};
			});
		}

		return items.map(function (item) {
			//Determine key
			var value = item;
			var maxScore = 0;
			var matchFoundForAnyKey = false;
			var exactMatchFoundForAnyKey = false;

			keys.forEach(function (key) {
				var matchFound = true,
				    exactMatchFound = false,
				    i;

				if (key.indexOf('.') != -1) {
					var keys = key.split('.');
					for (i = 0; i < keys.length; i++) {
						value = value[keys[i]];
					}
				} else {
					value = item[key];
				}

				//Get the lowercase version of the item name.
				var itemName = jQuery.type(value) == 'string' ? value.toLowerCase() : '',
				    score = 0,
				    char,
				    j = 0,
				    // remembers position of last found character
				nextj;

				// make the search text lower case so you can comare with itemName for exact matches
				searchText = typeof searchText === 'string' ? searchText.toLowerCase() : '';
				exactMatchFound = itemName === searchText;

				// consider each search character one at a time providing a fuzzy match.
				for (i = 0; i < searchText.length; i++) {
					char = searchText[i];
					if (char == ' ') {
						// ignore spaces
						continue;
					}

					nextj = itemName.indexOf(char, i === 0 ? j : j + 1); // search for character & update position
					score += (nextj - j) * (i === 0 ? 1 : 3); //Figure out the gap between characters and multiply the result by three if it is not the first char.
					j = nextj;
					if (j == -1) {
						// if it's not found, exclude this item
						matchFound = false;
						break;
					}
				}

				//increase the score based on the overall item length
				score = score + (itemName.length - j);

				//Increase the score by 100 if the text doesn't have an exact match.
				if (itemName.indexOf(searchText) === -1) {
					score += 100;
				}

				maxScore = Math.max(score, maxScore);
				if (exactMatchFound) {
					exactMatchFoundForAnyKey = true;
				}
				if (matchFound) {
					matchFoundForAnyKey = true;
				}
			});

			return {
				matchFound: matchFoundForAnyKey,
				isExactMatch: exactMatchFoundForAnyKey,
				fuzzyScore: maxScore,
				originalItem: item
			};
		}).filter(function (item) {
			return item.matchFound;
		});
	};
});
'use strict';

angular.module('common').filter('fuzzySearchFilter', function ($filter, _) {
	/*
 	applySort can be a boolean indicating whether to sort the results using the default sort OR it can be a custom sort function.
 */
	return function (items, searchText, keys, applySort, scoreFilter) {

		if (!keys) {
			keys = ['name'];
		} else if (!Array.isArray(keys)) {
			keys = [keys]; // Cast string to an array for simplicity.
		}

		scoreFilter = scoreFilter || 'fuzzyScoreFilter';

		if (applySort === undefined) {
			applySort = true;
		}

		if (!items || !Array.isArray(items)) {
			return items;
		} else if (!searchText && applySort === true && typeof applySort !== 'function') {
			return $filter('orderBy')(items, keys);
		} else if (!searchText && typeof applySort !== 'function') {
			return items;
		}

		// Returns items in an array of wrapped objects that look like {matchFound:true|false, score:int, item:<OriginalItem>}.
		var scoredItems = $filter(scoreFilter).apply(null, arguments);

		var defaultSort = function defaultSort(a, b) {
			if (a.fuzzyScore > b.fuzzyScore) {
				return 1;
			} else if (a.fuzzyScore < b.fuzzyScore) {
				return -1;
			} else {
				return 0;
			}
		};

		if (applySort) {
			//Now sort all of the filtered items according to their score.
			if (typeof applySort === 'function') {
				scoredItems.sort(applySort);
			} else {
				scoredItems.sort(defaultSort);
			}
		}

		// Now just return an array with the items that we passed in after accounting for scoring.
		return scoredItems.map(function (scoredItem) {
			return scoredItem.originalItem;
		});
	};
});
'use strict';

angular.module('common').filter('fuzzyWeightedScoreFilter', function ($filter, _, POLARITY, d3) {
	/*
  items       = collection to filter
  searchText  = string with which to filter items
  key         = property on each item that will be compared to searchText
  applySort   = if false, items will return with matches, but unsorted
  weightProps = an array of props to weight fuzzy search. If provided, a weighted score will be calculated by combining fuzzy search score with weights.  These props can be a path (eg 'usageSummary.recencyScore')
  uniqueKey   = provide this if treating components with the same name matters (ie if using weightProps). Normal fuzzy search doesn't care if things have the same name, they get the same score.  But weight props can give different scores to two components with the same name. A typical combination when using weightProps would be provide a key of 'name' and a uniqueKey of 'id'.
 	 More info on how weighting works:
  If you pass in an array of two properties like 'usageSummary.relevancyScore' and 'usageSummary.count', this filter will normalize these scores to be values between 0 and 1.  These extra properties must have a positive polarity to be normalized properly.  The filter will also normalize the fuzzy search score for each item to be a decimal between 0 and 1.  Once all scores have been normalized, they are combined and averaged.  That average becomes the score that the list will be sorted on.  The one exception that will always trump this combined average is if there is an exact string match.  Exact matches are given the highest possible score so they always appear at the top of the list.  If no extra props are passed in, the list is sorted based on the fuzzy score like normal.
  */

	/*
  Notes on performance of this algorithm:
 	 There is a test case for testing the performance of fuzzy search: fuzzy-search-filter.spec.js
 	 The overall runtime of this algorithm is, with one caveat, k * m * n * log n where
 	 n = number of components to be sorted
  m = length of a given component's name
  k = length of the search query
 	 The caveat is that javascript's native sort function depends on which browser you are using.  In most cases a good sort function would be O(n log n), but it could pick one that is n^2, or at least one where n^2 is the worst case, like quicksort.  But most likely it's going to be n log n, and performance tests show that we are ok using the built in sort function.  Here are some links on javascript's sort function and performance in general:
 	 http://stackoverflow.com/questions/234683/javascript-array-sort-implementation
  http://bigocheatsheet.com/
 	 And here are some performance tests. These are for normal searches (full words).  Searching a single letter is quite a bit slower becasue many items are likely to contain the letter 'e', as compated to the search term 'brows'.  For 100,000 components, I've seen the runtime slow down by 3 - 6 times for a single letter search.
 	 1,000 components     :  9.3 ms
  10,000 components    : 30.8 ms
  100,000 components   : 98.1 ms
  1,000,000 components : app crashes :)
 	 */

	return function (items, searchText, key, applySort, scoreFilter, weightProps) {

		weightProps = weightProps || [];

		if (applySort !== true && applySort !== false) {
			applySort = true;
		}

		if (!items || !jQuery.isArray(items)) {
			return items;
		} else if (!searchText && applySort && !weightProps.length) {
			return $filter('orderBy')(items, key);
		} else if (!searchText && !weightProps.length) {
			return items;
		}

		var fuzzyScores = $filter('fuzzyScoreFilter')(items, searchText, key).map(function (item) {
			_.forEach(weightProps, function (prop) {
				item.prop = _.get(item, prop);
			});
			return item;
		}),
		    positive = POLARITY.POSITIVE,
		    negative = POLARITY.NEGATIVE,

		//these scores are only relevant if weightProps are passed in.  Otherwise fuzzy search uses it's own scoring system, where low scores are better, and bad scores can be in the 100s
		bestWeightedScore = 1,
		    worstWeightedScore = 0;

		//This whole block is O((weightProps.length + 2) * n), so O(n)
		if (weightProps.length) {

			//O(n)
			//normalize the fuzzy search scores
			normalizeScores(fuzzyScores, 'fuzzyScore', negative);

			//O(weightProps.length * n), so O(n)
			//normalize any extra weight props
			_.forEach(weightProps, function (prop) {
				normalizeScores(fuzzyScores, prop, positive);
			});

			//O(n)
			//calculated the combined score based on the fuzzy search and the extra properties
			_.forEach(fuzzyScores, function (scoreItem) {

				//O(number of exact matches in result set). Since that will be at most a few, basically O(1)
				//if there was an exact match, give it the best possible combined score so it shows up at the top.
				if (scoreItem.isExactMatch) {
					scoreItem.combinedScore = bestWeightedScore;
				} else {
					scoreItem.combinedScore = averageAllScores(scoreItem);
				}
			});
		}

		function averageAllScores(scoreItem) {
			var sum = 0;

			weightProps.forEach(function (weightProp) {
				sum += scoreItem[weightProp];
			});

			//always add the fuzzyScore in as well
			sum += scoreItem['fuzzyScore'];

			//numOfScores is the number of extra properties to weight + 1 for the fuzzy search score itself.
			var numOfScores = weightProps.length + 1;
			return sum / numOfScores;
		}

		// O(n)
		function normalizeScores(scores, prop, polarity) {

			var rawScores;
			var max, bestValue;
			var min, worstValue;

			//if we are dealing with the fuzzy score, pluck it right off the score object.  Else we need to look at the original item for the weighted value.
			if (prop === 'fuzzyScore') {
				rawScores = _.pluck(scores, prop);
			} else {
				//pluck the prop we want to normalize from the original items
				var originalItems = _.pluck(scores, 'originalItem');
				rawScores = _.pluck(originalItems, prop);
			}

			//d3 filteres out bad values like NaN, undefined, etc...
			max = d3.max(rawScores);
			min = d3.min(rawScores);

			//depending on the polarity, swap these, and d3 will handle giving the right score back
			if (polarity === positive) {
				bestValue = max;
				worstValue = min;
			} else if (polarity === negative) {
				bestValue = min;
				worstValue = max;
			}

			var normalizedScale = d3.scale.linear().domain([worstValue, bestValue]).range([0, 1]).clamp(true);

			//for every score item, normalize the prop and store it on the score item
			_.forEach(scores, function (score) {

				//if this is the fuzzyScore we are normalizing, it is on the score item. Else it is on the original item.
				var valueToNormalize = prop === 'fuzzyScore' ? _.get(score, prop) : _.get(score.originalItem, prop);

				score[prop] = normalize(valueToNormalize, normalizedScale);
			});
		}

		function normalize(score, scale) {
			var normalizedScore;

			//d3 passes back NaN when you give it undefined or NaN
			if (!_.isFinite(score)) {
				normalizedScore = worstWeightedScore;
			} else {
				//if the max and min passed into this scale are the same, you will always get back 0 for the score
				normalizedScore = scale(score);
			}

			return normalizedScore;
		}

		return fuzzyScores;
	};
});
'use strict';

angular.module('common').filter('groupBy', function () {
	var groupBy = analyticsui['ui-core'].groupBy;

	return groupBy;
});
'use strict';

angular.module('common').filter('moment', function (moment) {
	return function (date, format) {
		return moment(date).format(format);
	};
});
'use strict';

angular.module('common').filter('sprintf', function (util) {
	return function (input, replace) {
		return util.sprintf(input, replace);
	};
});
'use strict';

angular.module('common').directive('adContentResize', function ($parse, _) {
	var $body = $('body');
	var elementList = [];

	$body.on('content:resize', function () {
		_.each(elementList, function (fn) {
			fn();
		});
	});

	return function (scope, element, attrs) {
		var fn = $parse(attrs.adContentResize);
		var callBack = function callBack() {
			scope.$evalAsync(fn);
		};

		elementList.push(callBack);

		scope.$on('$destroy', function () {
			_.remove(elementList, callBack);
		});
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('adLoading', function ($parse, _) {

		function addLoadingContainer(element, largeStyle) {
			$(element).find('> .ad-Loading-Container').remove(); // Remove and re-add to get at the top of the stacking order.
			element.append('<div class="ad-Loading-Container"><div class="ad-Loading-Icon coral-Wait ' + largeStyle + ' coral-Wait--center"></div></div>');
		}

		return {
			restrict: 'A',
			link: function link(scope, element, attrs) {
				var model = $parse(attrs.adLoading);
				var paramsModel = $parse(attrs.adLoadingParams);
				var params = paramsModel();

				var defaults = _.extend({
					size: 'large' // pass in small for the small wait logo.
				}, params);

				var largeStyle = defaults.size === 'large' ? 'coral-Wait--large' : '';

				scope.$watch(model, function (val) {
					element.toggleClass('ad-Loading', val);
					if (val) {
						addLoadingContainer(element, largeStyle);
					}
				});
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adMultiTransclude', function () {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs, $transclude) {

			if (!$transclude) {
				throw new Error('In order to use ad-multi-transclude, your directive must be transcluding (e.g. set \'transclude: true\').');
			}

			function findContentTemplate(elements, name) {
				var content = null;

				elements.each(function (index, item) {
					var el = angular.element(item);

					// if this element has a content name and it matches the name passed into ad-multi-transclude, return this content
					if (el.attr('content') && el.attr('content') === name) {
						content = el;
					}
				});

				return content;
			}

			var transcludedScope, transcludedContent;

			$transclude(function (clone, scope) {
				transcludedContent = clone;
				transcludedScope = scope;

				$element.find('div[transclude]').each(function (index, el) {
					var $el = jQuery(el);
					var name = $el.attr('transclude');
					var content = findContentTemplate(clone, name);
					if (content) {
						$el.append(content);
						// $el.replace(content);
					}
				});
			});

			$scope.$on('$destroy', function () {
				if (transcludedScope) {
					transcludedScope.$destroy();
				}
				if (transcludedContent) {
					transcludedContent.remove();
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('adStats', function ($timeout, $rootScope, $window, $log) {

	var digestLength = 0;
	var hijacked = false;
	var lastElementClicked;
	var showDigestTimes = false;

	var timerNow = $window.performance && $window.performance.now ? function () {
		return $window.performance.now();
	} : function () {
		return Date.now();
	};

	// Hijack $digest to time it and update data on every digest.
	function hijackDigest() {
		if (hijacked) {
			return;
		}
		hijacked = true;
		var scopePrototype = Object.getPrototypeOf($rootScope);
		var oldDigest = scopePrototype.$digest;
		scopePrototype.$digest = function $digest() {
			var start = timerNow();
			oldDigest.apply(this, arguments);
			digestLength = timerNow() - start;
			if (showDigestTimes) {
				$log.log('digestLength', digestLength); // Very useful for debugging performance.
			}
		};
	}

	function getWatcherCount(root) {
		root = angular.element(root || document.documentElement);
		function getElemWatchers(element) {
			var isolateWatchers = getWatchersFromScope(element.data().$isolateScope);
			var scopeWatchers = getWatchersFromScope(element.data().$scope);
			var watchers = scopeWatchers.concat(isolateWatchers);
			angular.forEach(element.children(), function (childElement) {
				watchers = watchers.concat(getElemWatchers(angular.element(childElement)));
			});
			return watchers;
		}

		function getWatchersFromScope(scope) {
			if (scope) {
				return scope.$$watchers || [];
			} else {
				return [];
			}
		}

		return getElemWatchers(root);
	}

	function logDigestTimes(enable) {
		showDigestTimes = enable;
	}

	// Expose a window getWatcherCount that can be used with the last inspected item via getWatcherCount($0);
	$window.adobe = $window.adobe || {};
	$window.adobe.tools = $window.adobe.tools || {};
	$window.adobe.tools.getWatcherCount = function (el) {
		return getWatcherCount(el).length;
	};
	$window.adobe.tools.logDigestTimes = logDigestTimes;

	return {
		restrict: 'E',
		templateUrl: 'adobe/base/directives/ad-stats.tpl.html',
		link: function link(scope, element, attrs) {
			angular.element('.endor-BlackBar-title').append(element);
			hijackDigest();

			setInterval(function () {
				// We don't want to add to the digest cycle, so use setInterval
				element.find('.watch-count').html(getWatcherCount().length);
				element.find('.last-element-watch-count').html(getWatcherCount(lastElementClicked).length);
				element.find('.digest-length').html(Math.round(digestLength) + ' ms');
			}, 1000);

			// Set the last element so we can find out how many watchers is has.
			angular.element('body').on('click', function (e) {
				lastElementClicked = e.target;
			});
		}
	};
});
'use strict';

(function ($, _) {
	$.fn.adStickyHeader = function (params) {

		params = $.extend({
			viewport: '.shell-scroll-content',
			headerContainer: '.js-sticky-header-container',
			header: '.js-sticky-header',
			autoSize: false,
			disabled: false, // plugin is dead
			disableSticky: false, // disable fixed positioning (sticky behavior)
			disableAbsolute: false, // disable absolute positioning
			triggers: ['updateStickyHeaders'],
			initialize: function initialize() {},
			destroy: function destroy() {},
			$parentEl: this
		}, params || {});

		var $element = this,
		    $viewport = $element.closest(params.viewport),
		    $headerContainer = $element.find(params.headerContainer),
		    $header = $element.find(params.header),
		    $stickyHeaderContainer = $(window.document.createElement('div')),
		    resizeHandler = _.debounce(function () {
			$header.css({
				left: $element.offset().left + 'px',
				'width': $headerContainer.outerWidth() + 'px' });
		}, 50),
		    updateIfChanged = function updateIfChanged(e) {
			if (e && _.has(e, 'disabled')) {
				params.disabled = e.disabled;
			}
			if (e && _.has(e, 'disableSticky')) {
				if (!params.disabled) {
					if (params.disableSticky && !e.disableSticky) {
						// If disableSticky is being set to false then add the scroll listener
						$viewport.off('scroll', updateIfChanged).on('scroll', updateIfChanged);
					} else if (e.disableSticky) {
						// If disableSticky is true then remove the scroll listener
						$viewport.off('scroll', updateIfChanged);
					}
				}
				params.disableSticky = e.disableSticky;
			}
			if (e && _.has(e, 'disableAbsolute')) {
				params.disableAbsolute = e.disableAbsolute;
			}

			if (!params.disabled && !params.disableSticky) {
				var totalScrollPos = $viewport.offset(),
				    headerScrollPos = $headerContainer.offset();

				if (!totalScrollPos || !headerScrollPos) {
					return;
				}

				var bounds = {
					top: headerScrollPos.top - totalScrollPos.top,
					left: headerScrollPos.left - totalScrollPos.left,
					bottom: headerScrollPos.top - totalScrollPos.top + $element.outerHeight() - $headerContainer.outerHeight()
				};

				if (bounds.top < 0 && bounds.bottom > 0) {
					setFixedColumnHeaders();
				} else {
					setRelativeColumnHeaders();
				}
			} else if (!params.disabled && !params.disableAbsolute) {
				setAbsoluteColumnHeaders();
			} else {
				setRelativeColumnHeaders();
			}
		};

		function onChangeStart() {
			if ($header.css('position') === 'fixed') {
				setRelativeColumnHeaders();
			}
		}

		function setFixedColumnHeaders() {

			if ($header.css('position') !== 'fixed') {
				var headerContainerWidth = $headerContainer.outerWidth(),
				    headerContainerHeight = $headerContainer.outerHeight(),
				    topOffset = $viewport.offset().top,
				    leftOffset = $element.offset().left;

				$stickyHeaderContainer.css({
					width: '100%',
					height: headerContainerHeight + 'px'
				}).appendTo($headerContainer);

				$header.css({
					position: 'fixed',
					top: topOffset - 1 + 'px',
					left: leftOffset + 'px',
					width: headerContainerWidth + 'px',
					height: headerContainerHeight + 'px'
				}).appendTo($element);

				$(window).on('resize', resizeHandler);
			}
		}

		function setRelativeColumnHeaders() {
			if ($header.css('position') === 'fixed' || $header.css('position') === 'absolute') {
				$stickyHeaderContainer.remove();
				$header.attr('style', '').appendTo($headerContainer);

				$(window).off('resize', resizeHandler);
			}
		}

		function setAbsoluteColumnHeaders() {
			var headerContainerHeight = $headerContainer.outerHeight();
			if ($header.css('position') !== 'absolute' && headerContainerHeight > 0) {
				$stickyHeaderContainer.css({
					width: '100%',
					height: headerContainerHeight + 'px'
				}).appendTo($headerContainer);

				$header.css({
					position: 'absolute',
					top: 0,
					left: 0,
					right: 0
				}).insertAfter($element);
			}
			updateAbsoluteHeaderForScrollBar();
		}

		function updateAbsoluteHeaderForScrollBar() {
			if ($header.css('position') === 'absolute') {
				//Delay to allow scrollbars to form and header height to update. We may need
				//to update this if it becomes a problem.
				setTimeout(function () {
					$header.css('right', '0px');
					var headerWidth = $header.outerWidth(),
					    headerHeight = $header.outerHeight(),
					    contentWidth = $headerContainer.outerWidth(),
					    paddingOffset = headerWidth - contentWidth;

					$header.css('right', paddingOffset + 'px');
					$stickyHeaderContainer.css('height', headerHeight + 'px');
				}, 0);
			}
		}

		//Re-act to grid-stack
		$element.on('updateStickyHeaderStart', onChangeStart).on('updateStickyHeader updateStickyHeaderEnd', updateIfChanged);

		//Initialize the freeformTable with absolute column headers if autoSize is set to false.
		if (!params.disabled && !params.disableSticky) {
			$viewport.on('scroll', updateIfChanged);
			updateIfChanged();
		} else if (!params.disabled && !params.disableAbsolute) {
			setAbsoluteColumnHeaders();
		} else {
			setRelativeColumnHeaders();
		}

		function onDestroy() {
			$element.off('updateStickyHeaderStart', onChangeStart).off('updateStickyHeader updateStickyHeaderEnd', updateIfChanged);

			$headerContainer.off('destroy', onDestroy);

			$viewport.off('scroll', updateIfChanged);
			$stickyHeaderContainer.remove();

			$header.remove();

			params.destroy.call(params);
		}

		// Cleanup
		$headerContainer.on('destroy', onDestroy);

		params.initialize.call(params);
	};
})(jQuery, window._);
'use strict';

angular.module('common').directive('adTrackWatch', function (_, $parse, trackService, eventBus) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {

			var initialAction = true;

			scope.$watch(attrs['adTrackWatch'], function (newTrackArgs, oldTrackArgs) {

				if (startTracking(newTrackArgs)) {

					if (initialAction || hasChanges(newTrackArgs, oldTrackArgs)) {

						trackService.trackAction(element, action(newTrackArgs), params(newTrackArgs, oldTrackArgs));

						initialAction = false;
					}
				}
			}, true);

			function startTracking(args) {
				return angular.isUndefined(args.startTrackingWhen) || args.startTrackingWhen === true;
			}

			function hasChanges(newTrackArgs, oldTrackArgs) {
				var changed = changedParams(newTrackArgs, oldTrackArgs);
				return Object.keys(changed).length > 0;
			}

			function action(args) {
				if (angular.isDefined(args.initialAction) && initialAction) {
					return args.initialAction;
				} else {
					return args.changeAction || args.action;
				}
			}

			function params(newTrackArgs, oldTrackArgs) {
				var changed;

				if (initialAction) {
					// The first time, we send in all the params
					changed = newTrackArgs.changeParams;
				} else {
					// After the first time, we only send params that have changed
					changed = changedParams(newTrackArgs, oldTrackArgs);
				}

				// Return base set of params every time + the list of params that have changed
				return angular.extend({}, newTrackArgs.params, changed);
			}

			function changedParams(newTrackArgs, oldTrackArgs) {
				var newParams = newTrackArgs.changeParams || {};
				var oldParams = oldTrackArgs.changeParams || {};
				var changed = {};

				_.forOwn(oldParams, function (oldValue, param) {
					var newValue = newParams[param];

					if (!angular.equals(newValue, oldValue)) {
						changed[param] = newValue;
					}
				});

				return changed;
			}
		}
	};
});
'use strict';

angular.module('common').directive('adTrack', function ($parse, trackService, eventBus) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var trackActions = null,
			    adTrack = jQuery.trim(attrs['adTrack']),
			    paramsExpression,
			    params;

			if (angular.isString(adTrack) && adTrack.charAt(0) !== '{') {
				var event = attrs['adTrackEventBusEvent'] || attrs['adTrackDomEvent'],
				    eventType = attrs['adTrackEventBusEvent'] ? 'eventBus' : 'DOM';

				trackEvent(adTrack, event, eventType);
			} else {
				scope.$watch(attrs['adTrack'], function (newTrackActions, oldTrackActions) {
					if (!trackActions) {
						setupEventListeners(newTrackActions);
					} else if (!angular.equals(newTrackActions, oldTrackActions)) {
						Object.keys(newTrackActions).forEach(function (key) {
							if (newTrackActions[key] !== oldTrackActions[key]) {
								if (newTrackActions[key] === true) {
									params = getDefaultParams() || {};
									params.triggerType = 'modelChange';
									trackService.trackAction(element, key, params);
								} else if (newTrackActions[key].when === true) {
									params = getParamsFromAction(key) || getDefaultParams() || {};
									params.triggerType = 'modelChange';
									trackService.trackAction(element, key, params);
								}
							}
						});
					}
					trackActions = newTrackActions;
				}, true);
			}

			function setupEventListeners(newTrackActions) {
				Object.keys(newTrackActions).forEach(function (key) {
					// Multiple events could be passed in as follows:
					// {
					//     'Custom Action One': 'click',
					//     'Custom Action Two': 'mouseover'
					// }
					// So if the value is a string then we can be sure that it is an event. On the other hand,
					// if the key value pair is a boolean then it will be the result of evaluating an expression
					// and we will ignore it. Alternatively, a list of events could come in as follows:
					// {
					//     'Custom Action One': {
					//         params: {'Foo': 'Bar'}
					//     },
					//     'Custom Action Two': {
					//         params: {'Foo': 'Bar'},
					//         when: 'mouseover'
					//     }
					// }
					// If the when is left out then this is a click event. If when is a string then this is a custom
					// DOM event and we will set up an associated event listener.
					if (angular.isString(newTrackActions[key])) {
						trackEvent(key, newTrackActions[key]);
					} else if (angular.isObject(newTrackActions[key])) {
						trackEvent(key, newTrackActions[key].when, newTrackActions[key].eventType, newTrackActions[key].selector);
					}
				});
			}

			function trackEvent(action, event, eventType, selector) {
				var eventBusUnsubscribe = null;

				event = event || 'click';
				eventType = eventType || 'DOM';

				function onEvent() {
					var params = getParamsFromAction(action) || getDefaultParams() || {};
					params.triggerType = event;
					trackService.trackAction(element, action, params);
				}

				if (eventType == 'eventBus') {
					eventBusUnsubscribe = eventBus.subscribe(event, onEvent);
				} else if (selector) {
					element.on(event, selector, onEvent);
				} else {
					element.on(event, onEvent);
				}

				//Cleanup event listeners on the element.
				scope.$on('$destroy', function () {
					if (eventType == 'eventBus') {
						eventBusUnsubscribe();
					} else if (selector) {
						element.off(event, selector, onEvent);
					} else {
						element.off(event, onEvent);
					}
				});
			}

			function getParamsFromAction(action) {
				if (trackActions) {
					var trackAction = trackActions[action];
					if (trackAction && !angular.isString(trackAction)) {
						return trackAction.params;
					}
				}

				return null;
			}

			function getDefaultParams() {
				//Whether or not the user has defined adTrackParams or not $parse will return a function that can
				//be called to evaluate an expression passed in by a user. This could be an inline hash defined in
				//markup, a scope parameter, or a function that is used to get a defined set of parameters. If you
				//are passing in a function you can optionally inject $element into the function so that you can
				//return the appropriate set of params.
				paramsExpression = paramsExpression || $parse(attrs['adTrackParams']);
				return paramsExpression.call(null, scope, { $element: element });
			}
		}
	};
});
'use strict';

(function ($) {
  angular.module('common').directive('adVisible', function () {
    return function (scope, element, attr) {
      scope.$watch(attr.adVisible, function (visible) {
        element.css('visibility', visible ? 'visible' : 'hidden');
      });
    };
  });
})(jQuery);
'use strict';

angular.module('common').factory('eventBus', function ($timeout, util, $rootScope) {
	var cache = {};

	return {
		publish: function publish(topic) {
			var args = Array.prototype.slice.call(arguments, 1);

			topic.split(' ').forEach(function (topic) {
				if (!cache[topic]) {
					return;
				}

				// Each subscriber can decide if it needs to be inside an eval or not.
				cache[topic].forEach(function (item) {
					if (item.skipEval) {
						item.callback.apply(null, args || []);
					} else {
						$rootScope.$evalAsync(function () {
							item.callback.apply(null, args || []);
						});
					}
				});
			});
		},

		/**
   * Subscribes a callback to a topic.
   * This function returns a method than can be called to unsubscribe the provided callback.
   * @param topic {string} The topic to subscribe to.
   * @param scope (optional) If provided, subscribe will automatically remove this callback when the given scope is destroyed (e.g. scope.$on('$destroy').
   * @param callback {function} The callback to be fired when someone publishes to the topic.
   */
		subscribe: function subscribe(topic, scope, callback, skipEval) {
			// Allow for optional scope parameter - e.g. 2nd parameter can be callback w/no scope
			if (!callback) {
				callback = scope;
				scope = null;
			}

			// Add callback to callback list for this topic
			if (!cache[topic]) {
				cache[topic] = [];
			}

			var item = { callback: callback, skipEval: skipEval };

			cache[topic].push(item);

			// Create the unsubscribe function we can return to the caller
			var unsubscribe = function unsubscribe() {
				util.remove(cache[topic], item);
			};

			// If scope is provided, we call unsubscribe when the scope is destroyed
			if (scope) {
				scope.$on('$destroy', function () {
					unsubscribe();
				});
			}

			return unsubscribe;
		}
	};
});
'use strict';

angular.module('common').factory('guid', function () {
	var guid = analyticsui['core'].guid;

	return guid;
});
'use strict';

(function ($) {
	angular.module('common').factory('hotkeyService', function (_, $window, trackService) {
		return {
			addHotkey: function addHotkey(params, scope) {

				params.modifiers = params.modifiers || [];

				var ctrlOrMeta = params.modifiers.indexOf('ctrlKey') != -1 || params.modifiers.indexOf('metaKey') != -1,
				    alt = params.modifiers.indexOf('altKey') != -1,
				    shift = params.modifiers.indexOf('shiftKey') != -1,
				    element = params.element || $($window.document),
				    keyCodeMatch = false,
				    onKeyDown = function (evt) {
					if (params.isDisabled) {
						return;
					}

					// check that each modifier matches
					if (evt.ctrlKey != ctrlOrMeta && evt.metaKey != ctrlOrMeta || evt.altKey != alt || evt.shiftKey != shift) {
						return;
					}

					// check that the keycode or letter in the hotkey matches
					if (params.keyCode) {
						keyCodeMatch = params.keyCode === (evt.which || evt.keyCode);
					} else if (params.letter) {
						keyCodeMatch = params.letter === String.fromCharCode(evt.which).toLowerCase();
					}

					if (keyCodeMatch) {
						evt.preventDefault();
						trackService.trackAction(element, 'Hotkey Pressed', {
							hotkey: this.hotkeyToString(params)
						});
						params.action(evt);
					}
				}.bind(this);

				element.on('keydown', onKeyDown);

				if (scope) {
					scope.$on('$destroy', function () {
						element.off('keydown', onKeyDown);
					});
				}
			},

			addHotkeys: function addHotkeys(hotkeys, scope) {
				var self = this;
				hotkeys.forEach(function (hotkey) {
					self.addHotkey(hotkey, scope);
				});
			},

			hotkeyToString: function hotkeyToString(hotkey) {
				return _.compact(hotkey.modifiers.concat([hotkey.letter, hotkey.keyCode])).join(' + ');
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').factory('ieUtil', function () {
	var ieUtil = analyticsui['ui-core'].ieUtil;

	return ieUtil;
});
'use strict';

(function ($) {
	var ieRegExp = new RegExp('Trident\\/([0-9]{1,}[\\.0-9]{0,})'),
	    isIE = ieRegExp.test(navigator.userAgent);

	$.fn.isTruncated = function () {
		// IE and Firefox allow elements to be decimal sizes (e.g. 320.62) while chrome ensures
		// that everything is an integer value (e.g. 321). The problem is that IE does not use decimal
		// values for the scrollWidth which causes potential rounding issues. Therefore, we will always
		// add 1px to the offsetWidth for IE. There is an extremely small chance that IE will
		// not display the title when it should but it's better than displaying the title on everything.
		var $el = this,
		    el = this[0],
		    elWidth = el.offsetWidth + (isIE ? 1 : 0),
		    elScrollWidth = el.scrollWidth;

		//For inline elements there is no scroll widths so let's fake it and measure the scrollWidth width ourselves.
		if (!elScrollWidth) {
			var originalDisplay = $el.css('display');
			$el.css('display', 'inline-block');
			elScrollWidth = $el.get(0).scrollWidth;
			$el.css('display', originalDisplay);
		}

		return elWidth < elScrollWidth;
	};

	// Dispatch a 'destroy' event whenever a jQuery element is removed
	$.event.special.destroy = $.event.special.destroy || {
		remove: function remove(o) {
			if (o.handler) {
				o.handler();
			}
		}
	};

	$.fn.registeredEventListeners = $.fn.registeredEventListeners || function () {
		return $._data(this.get(0), 'events');
	};
})(jQuery);
'use strict';

angular.module('common').factory('prefix', function ($window, $log) {

	var cssPrefixes = ['-webkit-', '-moz-', '-ms-', '-o-', ''];
	var stylePrefixes = ['Webkit', 'Moz', 'ms', 'O', ''];
	var domPrefixes = ['webkit', 'moz', 'ms', 'o', ''];

	function getPrefixIndex(div) {
		var prefixIndex = cssPrefixes.length - 1;

		try {
			stylePrefixes.forEach(function (prefix, index) {
				// Use Transform to test as it works with IE > 9
				if (div.style[prefix + 'Transform'] !== undefined) {
					prefixIndex = index;
				}
			});
		} catch (error) {
			$log.error(error);
		}

		return prefixIndex;
	}

	var div = $window.document.createElement('div');
	var prefixIndex = getPrefixIndex(div);
	jQuery(div).remove();

	return {
		css: cssPrefixes[prefixIndex],
		style: stylePrefixes[prefixIndex],
		dom: domPrefixes[prefixIndex]
	};
});
'use strict';

angular.module('common').factory('RecursionHelper', function ($compile) {
    return {
        /**
         * Manually compiles the element, fixing the recursion loop.
         * @param element
         * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.
         * @returns An object containing the linking functions.
         */
        compile: function compile(element, link) {
            // Normalize the link parameter
            if (angular.isFunction(link)) {
                link = { post: link };
            }

            // Break the recursion loop by removing the contents
            var contents = element.contents().remove();
            var compiledContents;
            return {
                pre: link && link.pre ? link.pre : null,
                /**
                 * Compiles and re-adds the contents
                 */
                post: function post(scope, element) {
                    // Compile the contents
                    if (!compiledContents) {
                        compiledContents = $compile(contents);
                    }
                    // Re-add the compiled contents to the element
                    compiledContents(scope, function (clone) {
                        element.append(clone);
                    });

                    // Call the post-linking function, if any
                    if (link && link.post) {
                        link.post.apply(null, arguments);
                    }
                }
            };
        }
    };
});
'use strict';

angular.module('common').service('trackService', function ($window, appModel) {
	return {
		actionPrefix: '',
		customNamespace: '',
		suites: null,
		angularApp: null,
		defaultSuites: [{
			name: 's',
			linkTrackVars: '',
			linkTrackEvents: ''
		}],

		trackAction: function trackAction(element, action, params) {
			params = params || {};

			//Set the actual action as one of the tracking params because in Processing Rules you can't grab
			//the custom link name (you can only get it from contextData).
			params.actionName = action;

			//If a jQuery element is passed in then get the native DOM element.
			if (element instanceof jQuery) {
				element = element.get(0);
			}

			//Account for a null or undefined element.
			if (!element) {
				element = true;
			}

			var suites = this.suites || this.defaultSuites,
			    customNamespace = this.customNamespace,
			    actionPrefix = this.actionPrefix,
			    angularApp = this.angularApp;

			suites.forEach(function (suite) {
				if ($window[suite.name] && $window[suite.name].tl) {
					var s = $window[suite.name],
					    originalParams = s.contextData || {},
					    trackingParams = angular.copy(originalParams);

					//Namespace each custom tracking param with spa e.g.: change customKey to spa.customKey.
					Object.keys(params).forEach(function (key) {
						trackingParams[customNamespace + key] = params[key];
					});

					if (angularApp) {
						trackingParams[customNamespace + 'spaName'] = angularApp;
					}

					//The spa.rsid tracking param is defined once on page load. This doesn't work for workspace
					//since the currentRSID can change without a page load. To keep each track action accurate,
					//we need to set the spa.rsid value to whatever appModel.reportSuite.rsid is set to.
					trackingParams['spa.rsid'] = appModel.reportSuite.rsid;

					//Set the global context data to the params that we want to track.
					s.contextData = trackingParams;
					s.linkTrackVars = suite.linkTrackVars;
					s.linkTrackEvents = suite.linkTrackEvents;
					s.tl(element, 'o', actionPrefix + action);

					//Reset the default contextData after calling s.tl so that we don't end up resetting
					//the contextData for all tracked actions.
					s.contextData = originalParams;
				}
			});
		}
	};
});
'use strict';

angular.module('common').factory('util', function (_, $window, $controller, $q, $filter, ieUtil) {
	var RankedReportTool = analyticsui['ui'].RankedReportTool;

	var util = {
		pluck: function pluck(arr, prop) {
			var newArr = [];
			var length = arr.length;
			for (var i = 0; i < length; i++) {
				newArr.push(arr[i][prop]);
			}
			return newArr;
		},

		pluckMultiConcat: function pluckMultiConcat(arr, propArr, delim) {
			var newArr = [];
			var length = arr.length;
			for (var i = 0; i < length; i++) {
				var valArr = [];
				for (var j = 0; j < propArr.length; j++) {
					valArr.push(arr[i][propArr[j]]);
				}
				newArr.push(valArr.join(delim));
			}
			return newArr;
		},

		pluckMap: function pluckMap(arr, propMap) {
			var newArr = [];
			var length = arr.length;
			for (var i = 0; i < length; i++) {
				var aVal = arr[i];
				var newObj = {};
				for (var prop in propMap) {
					if (propMap.hasOwnProperty(prop)) {
						newObj[prop] = aVal[propMap[prop]];
					}
				}
				newArr.push(newObj);
			}
			return newArr;
		},

		debounce: function debounce(fn, timeout) {
			if (timeout === undefined) {
				// if timeout is not defined, then do 500 ms.
				timeout = 500;
			}
			var timeoutID = -1;
			return function () {
				if (timeoutID > -1) {
					$window.clearTimeout(timeoutID);
				}
				timeoutID = $window.setTimeout(fn, timeout);
			};
		},

		sprintf: function sprintf(format, args) {
			if (angular.isArray(args)) {
				if (format.indexOf('%1$s') != -1) {
					for (var i = 0; i < args.length; i++) {
						format = format.replace('%' + (i + 1) + '$s', args[i]);
					}
					return format;
				} else {
					return format.replace(/%s/g, args[1]);
				}
			} else {
				return format.replace('%s', args); //Account for replacing a single string instead of an array.
			}
		},

		padStr: function padStr(input, padLength, padChar, padType) {
			input = input.toString(); //Convert the input to a string value.
			padChar = padChar || ' ';
			padType = padType || 'left';

			while (input.length < padLength) {
				if (padType == 'left') {
					input = padChar + input;
				} else {
					input = input + padChar;
				}
			}

			return input;
		},

		safeApply: function safeApply(scope, fn, injectables) {
			injectables = injectables || {};
			if (scope.$$phase || scope.$root && scope.$root.$$phase) {
				//if a digest cycle is already in progress then just call the function directly.
				if (fn) {
					fn(scope, injectables);
				}
			} else {
				//if a $digest is not already in progress then call the associated method.
				if (fn) {
					scope.$apply(function () {
						fn(scope, injectables);
					});
				} else {
					scope.$apply();
				}
			}
		},
		/**
   * If an object exist in array with a property whose key is equal to propertyName and whose value is equal to selValue, that object
   * will be returned. Otherwise, this function will return null;
   * @param array {array}
   * @param propertyName {string}
   * @param selValue
   */
		getObjectByValue: function getObjectByValue(array, propertyName, selValue) {
			var result = null;
			if (array && array.length > 0) {
				for (var index = 0; index < array.length; index++) {
					var checkObject = array[index];
					if (checkObject[propertyName] === selValue) {
						result = checkObject;
						break;
					}
				}
			}
			return result;
		},

		getHashFromUrl: function getHashFromUrl(url) {
			url = url || $window.location.href;
			if (url && url.indexOf('#') !== -1) {
				return url.substring(url.indexOf('#'));
			} else {
				return '';
			}
		},

		getQueryParams: function getQueryParams(url) {
			url = url || $window.location.href;
			if (url && url.indexOf('?') !== -1) {
				url = url.substring(url.indexOf('?') + 1);
			}

			if (url && url.indexOf('#') !== -1) {
				url = url.substring(0, url.indexOf('#'));
			}

			var queryParams = {},
			    queryString = url || $window.location.search,
			    queries = queryString.split('&'),
			    i,
			    temp;

			for (i = 0; i < queries.length; i++) {
				temp = queries[i].split('=');
				queryParams[temp[0]] = temp[1];
			}

			return queryParams;
		},

		getQueryParam: function getQueryParam(param, url) {
			var params = this.getQueryParams(url);
			return params[param];
		},

		getHashParams: function getHashParams(url) {
			url = url || $window.location.href;
			var hash = this.getHashFromUrl(url);
			if (hash.indexOf('?') !== -1 && hash.substring(hash.indexOf('?') + 1)) {
				return this.getQueryParams(hash);
			} else {
				return {};
			}
		},

		/** Removes the given item from the array.
  *   Only the first item found, is removed.
  **/
		remove: function remove(array, item) {
			var index = array.indexOf(item);
			if (index > -1) {
				array.splice(index, 1);
			}
		},

		/** 
  	Removes every item where calling when(item) returns true
  **/
		removeWhen: function removeWhen(array, when) {
			var items = array.filter(when);
			items.forEach(function (item) {
				util.remove(array, item);
			});
		},

		/**
   * Extend n number of controllers in a single statement. You can extend a single controller as follows:
   * util.extendController($scope, 'myCtrl');
   *
   * To extend multiple controllers just separate the controllers by comma (no array necessary).
   * util.extendController($scope, 'myCtrl', 'mySecondCtrl', 'myThirdCtrl', 'etc...');
   *
   * @param controllerScope
   */
		extendController: function extendController(controllerScope) {

			function addControllerToScope(controllerName) {
				// Make a list of controllers, so we can keep track what has already been mixed in
				// We check hasOwnProperty to make sure we aren't pulling in the a prototype version of the property
				if (!controllerScope.hasOwnProperty('__controllers')) {
					controllerScope.__controllers = [];
				}

				var controllers = controllerScope.__controllers;

				if (~controllers.indexOf(controllerName)) {
					throw new Error('This controller has already been mixed in: ' + controllerName);
				} else {
					controllers.push(controllerName);
				}

				$controller(controllerName, { $scope: controllerScope });
			}

			for (var i = 1; i < arguments.length; i++) {
				addControllerToScope(arguments[i]);
			}
		},

		/**
   * Executes an array of items (function/promise) one after the other. 
   * Each item in the array can be either a function, promise or a value.
   * If the item is a function it is invoked and if it returns a promise
   * then the next function won't be called until it is resolved.
   * If the item is a promise, the next item won't be called until it is resolved.
   * If it is a value, the next item will be called immediately.
   * If any promise rejects, executeSerially will reject as well.
  */
		executeSerially: function executeSerially(items, originalInput) {
			var deferred = $q.defer(),
			    stack = items.concat();

			function runNext(input) {
				if (stack.length === 0) {
					deferred.resolve();
					return;
				}

				var item = stack.shift(),
				    result = typeof item == 'function' ? item(input) : item;

				$q.when(result).then(function (res) {
					runNext(res);
				}).catch(function (err) {
					deferred.reject(err);
				});
			}

			runNext(originalInput);

			return deferred.promise;
		},

		/* borrowed from angular toKeyValue which is private */
		encodeQueryParams: function encodeQueryParams(obj) {
			var parts = [];
			angular.forEach(obj, function (value, key) {
				if (angular.isArray(value)) {
					angular.forEach(value, function (arrayValue) {
						parts.push(util.encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + util.encodeUriQuery(arrayValue, true)));
					});
				} else {
					parts.push(util.encodeUriQuery(key, true) + (value === true ? '' : '=' + util.encodeUriQuery(value, true)));
				}
			});
			return parts.length ? parts.join('&') : '';
		},

		/* borrowed from angular encodeUriQuery which is private */
		/**
   * This method is intended for encoding *key* or *value* parts of query component. We need a custom
   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
   * encoded per http://tools.ietf.org/html/rfc3986:
   *    query       = *( pchar / "/" / "?" )
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
		encodeUriQuery: function encodeUriQuery(val, pctEncodeSpaces) {
			return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
		},

		includeKeys: function includeKeys(keysToInclude, hash) {
			var result = {};

			_.forIn(hash, function (value, key) {
				if (~keysToInclude.indexOf(key)) {
					result[key] = value;
				}
			});

			return result;
		},

		excludeKeys: function excludeKeys(keysToExclude, hash) {
			var result = {};

			_.forOwn(hash, function (value, key) {
				if (!~keysToExclude.indexOf(key)) {
					result[key] = value;
				}
			});

			return result;
		},

		// http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery
		hashCode: function hashCode(str) {
			str = _.isObject(str) ? JSON.stringify(str) : str; // Allow for objects to be passed in.
			var hash = 0,
			    i,
			    chr,
			    len;
			if (str.length === 0) {
				return hash;
			}
			for (i = 0, len = str.length; i < len; i++) {
				chr = str.charCodeAt(i);
				hash = (hash << 5) - hash + chr;
				hash |= 0; // Convert to 32bit integer
			}
			return hash;
		},

		/**
   * The appservice currently passes back dates that are ISO shorthand and look like 2015-01-09
   * instead of 2015-01-09T20:22:32.020Z. The problem with this is that when we attempt to create a
   * new date given the ISO shorthand JavaScript automatically creates a date in UTC timezone instead
   * of the user's timezone. This means that the date will be adjusted to local timezone relative to
   * the shorthand date which can cause the date to shift to the next or previous day.
   * For example, in Mountain Standard Time, new Date('2015-01-01') will be interpereted as Dec 31 at 5:00pm,
   * which is 7 hours (420 minutes) behind the date indicated.
   */
		dateFromDateString: function dateFromDateString(dateString) {
			var dateObj = new Date(dateString);

			// If dateStrings are the truncated ISO strings,
			// we need to convert them to that same date, but in local time.
			if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
				var year = dateObj.getUTCFullYear(),
				    month = dateObj.getUTCMonth(),
				    date = dateObj.getUTCDate();

				dateObj = new Date(year, month, date);
			}

			return dateObj;
		},

		/**
   * Date equality must be checked by comparing the millisecond representation of each date.
   * Using the double equals (==) tests whether the objects are the same, not whether the value
   * of the ojects are the same.
   *
   * Examples:
   * var d1 = new Date(2015,0,1), d2 = new Date(2015,0,1);
   * var d3 = d1;
   * d1 == d2; // false
   * d1 == d3; // true
   */
		datesAreEqual: function datesAreEqual(source, target) {
			var sourceMS = source.getTime(),
			    targetMS = target.getTime();

			return sourceMS === targetMS;
		},

		/**
   * Utility method to add the beta button/title tag to a page.
   * If a beta button is already on the page from the server, then we don't add an extra button.
   */
		showBetaElements: function showBetaElements(params) {
			params = _.extend({
				showPageTitleBetaFlag: true,
				showBetaFeedbackButton: false,
				onFeedbackButtonClick: function onFeedbackButtonClick() {}
			}, params);

			if (params.showPageTitleBetaFlag) {
				angular.element('.endor-BlackBar-title').addClass('ad-append-beta-flag'); // Add the beta flag to the top title.
			}

			if (params.showBetaFeedbackButton) {
				var button = angular.element('.endor-BlackBar-right .js-beta-feedback-btn');
				if (button.length) {
					return;
				} // If a button already exists, then we don't need to do anything.

				var buttonNode = angular.element(this.sprintf('<button type="button" class="coral-Button coral-Button--primary coral-Button--blackbarRight">%1$s</button>', // To enable the form, add this as a class: js-beta-feedback-btn
				[$filter('l10n')(['beta-feedback-label', 'Beta Feedback'])]));

				buttonNode.on('click', params.onFeedbackButtonClick);
				angular.element('.endor-BlackBar-right').prepend(buttonNode);
			}
		},

		/**
   * Returns localized text for either "cmd" if the user has a Mac, or "ctrl" otherwise.
   */
		cmdOrCtrl: function cmdOrCtrl() {
			if (/Mac|iPod|iPhone|iPad/.test($window.navigator.platform)) {
				return $filter('l10n')(['cmdKey', 'cmd']);
			} else {
				return $filter('l10n')(['ctrlKey', 'ctrl']);
			}
		},

		showStats: function showStats(doShow) {

			var autoloadKey = 'adShowStatsKey';
			var params = {};
			var autoloadOptions = localStorage[autoloadKey];
			if (autoloadOptions) {
				params = JSON.parse(autoloadOptions);
			}
			if (params.show === true) {
				angular.element('body').append('<ad-stats></ad-stats>');
			}

			if (doShow === true) {
				localStorage.setItem(autoloadKey, JSON.stringify({ show: doShow }));
			}
			if (doShow === false) {
				localStorage.removeItem(autoloadKey);
				angular.element('.ad-Stats').remove();
			}
		},

		processLocaleFromConfig: function processLocaleFromConfig(locale) {
			return locale.replace(/_/, '-').replace(/jp-jp/i, "ja-jp");
		},

		// A rate limiting function for running q promises in parallel, up to a max amount
		// Adpated from here (MIT) https://github.com/suprememoocow/qlimit
		/*** Example usage:
  		var limit = util.qlimit(2); // 2 being the maximum concurrency
  	// Using the same example as above
  	return $q.all(items.map(limit(function(item) { 
  	  return performOperationOnItem(item);
  	}));
  	****/
		qlimit: function qlimit(maxConcurrency) {

			var outstandingCount = 0;
			var queue = [];

			/**
   * Returns a promise which will resolve when
   * the concurrency is not saturated
   */
			function initialPromise() {
				if (outstandingCount < maxConcurrency) {
					outstandingCount++;
					return $q.when();
				}

				var defer = $q.defer();
				queue.push(defer);
				return defer.promise;
			}

			/**
   * Called after the factory promise is fulfilled.
   */
			function complete() {
				var next = queue.shift();

				if (next) {
					next.resolve();
				} else {
					outstandingCount--;
				}
			}

			/**
   * Returns a concurrency-limited promise
   */
			return function (factory) {
				return function () {
					var args = Array.prototype.slice.apply(arguments);

					return initialPromise().then(function () {
						return factory.apply(null, args);
					}).finally(complete);
				};
			};
		},

		/**
   * Angular adds $promise and $resolved to their Resource response objects.
   * Strips $promise and $resolved and returns a new object.
   */
		stripAngularObjects: function stripAngularObjects(item) {
			var data = _.extend({}, item);
			delete data.$promise;
			delete data.$resolved;
			return data;
		},

		browser: function browser() {
			if (this._browsers) {
				return this._browsers;
			}

			var browsers = {
				isChrome: navigator.userAgent.indexOf('Chrome') > -1,
				isExplorer: navigator.userAgent.indexOf('MSIE') > -1 || navigator.appVersion.indexOf('Trident/') > 0,
				isFirefox: navigator.userAgent.indexOf('Firefox') > -1,
				isSafari: navigator.userAgent.indexOf('Safari') > -1,
				isOpera: navigator.userAgent.toLowerCase().indexOf('op') > -1
			};

			if (browsers.isChrome && browsers.isSafari) {
				browsers.isSafari = false;
			}
			if (browsers.isChrome && browsers.isOpera) {
				browsers.isChrome = false;
			}
			this._browsers = browsers;
			return this._browsers;
		},

		/*
  *	This function is just for improving code readability when checking if a value is a real number, such as 1, 0, -1, 1.23, pi, etc, but not NaN or Infinity.  
  * The problem with just using _.isNumber is that Nan and Infinity will pass, because in javascript, typeof NaN is 'number'. 
  */
		isRealNumber: function isRealNumber(value) {
			return _.isFinite(value);
		},

		/*
  * Just a helper function, based on _.get, for avoiding long ternary operations with number types. So instead of:	
  *		util.isRealNumber(_.get(object, 'something.nestedObj.value')) ? _.get(object, 'something.nestedObj.value') : defaultValue;
  * You can do:
  *		util.getNumber(object, 'something.nestedObj.value', defaultValue);
  * It would be nice if javascript had an operator for doing what we usually do:
  *		_.get(object, 'something.nestedObj.value') || defaultValue;
  * But if object.something.nestedObj.value is ever 0, this will fail since 0 is falsey.
  */
		getNumber: function getNumber(object, path, defaultValue) {
			var valueToTest = _.get(object, path);
			return this.isRealNumber(valueToTest) ? valueToTest : defaultValue;
		},

		/**
   * This is a comparator function for an alphanumeric sort
   */
		alphanumSort: function alphanumSort(a, b) {
			function chunkify(t) {
				var tz = [],
				    x = 0,
				    y = -1,
				    n = 0,
				    i,
				    j;

				while (i = (j = t.charAt(x++)).charCodeAt(0)) {
					var m = i == 46 || i >= 48 && i <= 57;
					if (m !== n) {
						tz[++y] = "";
						n = m;
					}
					tz[y] += j;
				}
				return tz;
			}

			var aa = chunkify(a);
			var bb = chunkify(b);

			for (var x = 0; aa[x] && bb[x]; x++) {
				if (aa[x] !== bb[x]) {
					var c = Number(aa[x]),
					    d = Number(bb[x]);
					if (c == aa[x] && d == bb[x]) {
						return c - d;
					} else {
						return aa[x] > bb[x] ? 1 : -1;
					}
				}
			}
			return aa.length - bb.length;
		},


		// Similar to _.clamp available in lodash 4.x
		clamp: function clamp(val) {
			var lower = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.NEGATIVE_INFINITY;
			var upper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

			if (isNaN(val)) {
				console.log("Value is not a number");
			}

			if (isNaN(lower)) {
				console.log("Missing lower bound");
			}

			if (val < lower) {
				return lower;
			} else if (val > upper) {
				return upper;
			}
			return val;
		},

		// fn - the function that you want to poll
		// interval - the time between polls, in ms
		startPolling: function startPolling(fn, interval) {
			if (!_.isFunction(fn)) {
				throw 'You must provide a function to start polling.';
			}
			interval = this.isRealNumber(interval) ? interval : 5000;
			var _stopPolling = false;
			getData();

			// Recursive function that calls fn() in intervals
			function getData() {
				if (_stopPolling) {
					return;
				}
				var currentTime = Date.now();
				$q.when(fn()).then(function () {
					var deltaTime = Date.now() - currentTime;
					var nextInterval = interval - deltaTime;
					nextInterval = Math.max(nextInterval, 0);
					setTimeout(function () {
						getData();
					}, nextInterval);
				});
			}

			function stopPolling() {
				_stopPolling = true;
			}
			return stopPolling;
		},

		showL10n: function showL10n() {
			util.updateURLForDebugTools('showL10nTokens=true&oml10n_debug=show_tokens');
		},

		showDebugger: function showDebugger() {
			util.updateURLForDebugTools('featureEnabled[debugPanel]=1');
		},

		updateURLForDebugTools: function updateURLForDebugTools(str) {
			if (_.contains(window.location.href, '?')) {
				window.location = window.location.href.replace('?', '?' + str + '&');
			} else if (_.contains(window.location.href, '#')) {
				window.location = window.location.href.replace('#', '?' + str + '&#');
			} else {
				window.location = window.location.href + '?' + str + '&';
			}
		},

		// Escapes special regex characters in a string. This is really useful if you want to
		// create a regex using new RegExp(string)
		escapeRegExp: function escapeRegExp(str) {
			return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
		}
	};

	_.extend(util, ieUtil);

	$window.adobe = $window.adobe || {};
	$window.adobe.tools = $window.adobe.tools || {};
	$window.adobe.tools.showStats = util.showStats;
	$window.adobe.tools.showL10n = util.showL10n;
	$window.adobe.tools.help = $window.adobe.tools.help || {};
	$window.adobe.tools.showRankedReportTool = RankedReportTool.show;
	$window.adobe.tools.showDebugger = util.showDebugger;
	$window.adobe.tools.updateURLForDebugTools = util.updateURLForDebugTools;

	util.showStats();

	return util;
});
'use strict';

angular.module('common').factory('windowResize', function ($document, $window, util) {
	var listeners = [];

	return {
		watch: function watch() {
			$($window).resize(util.debounce(function () {
				listeners.forEach(function (listener) {
					listener();
				});
			}, 50));
		},

		addListener: function addListener(fn) {
			if (listeners.indexOf(fn) === -1) {
				listeners.push(fn);
			}
		},

		removeListener: function removeListener(fn) {
			var index = listeners.indexOf(fn);
			if (index > -1) {
				listeners.splice(index, 1);
			}
		}
	};
});
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* Shims to surface vendor specific functions as the standard named function */
document.documentElement.requestFullScreen = document.documentElement.requestFullScreen || document.documentElement.webkitRequestFullScreen || document.documentElement.mozRequestFullScreen || document.documentElement.msRequestFullScreen || document.documentElement.oRequestFullScreen;

/* jshint ignore: start */

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.0.2
 */

(function () {
  "use strict";
  function lib$es6$promise$utils$$objectOrFunction(x) {
    return typeof x === "function" || (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && x !== null;
  }function lib$es6$promise$utils$$isFunction(x) {
    return typeof x === "function";
  }function lib$es6$promise$utils$$isMaybeThenable(x) {
    return (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && x !== null;
  }var lib$es6$promise$utils$$_isArray;if (!Array.isArray) {
    lib$es6$promise$utils$$_isArray = function lib$es6$promise$utils$$_isArray(x) {
      return Object.prototype.toString.call(x) === "[object Array]";
    };
  } else {
    lib$es6$promise$utils$$_isArray = Array.isArray;
  }var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;var lib$es6$promise$asap$$len = 0;var lib$es6$promise$asap$$toString = {}.toString;var lib$es6$promise$asap$$vertxNext;var lib$es6$promise$asap$$customSchedulerFn;var lib$es6$promise$asap$$asap = function asap(callback, arg) {
    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;lib$es6$promise$asap$$len += 2;if (lib$es6$promise$asap$$len === 2) {
      if (lib$es6$promise$asap$$customSchedulerFn) {
        lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
      } else {
        lib$es6$promise$asap$$scheduleFlush();
      }
    }
  };function lib$es6$promise$asap$$setScheduler(scheduleFn) {
    lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
  }function lib$es6$promise$asap$$setAsap(asapFn) {
    lib$es6$promise$asap$$asap = asapFn;
  }var lib$es6$promise$asap$$browserWindow = typeof window !== "undefined" ? window : undefined;var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;var lib$es6$promise$asap$$isNode = typeof process !== "undefined" && {}.toString.call(process) === "[object process]";var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";function lib$es6$promise$asap$$useNextTick() {
    return function () {
      process.nextTick(lib$es6$promise$asap$$flush);
    };
  }function lib$es6$promise$asap$$useVertxTimer() {
    return function () {
      lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
    };
  }function lib$es6$promise$asap$$useMutationObserver() {
    var iterations = 0;var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);var node = document.createTextNode("");observer.observe(node, { characterData: true });return function () {
      node.data = iterations = ++iterations % 2;
    };
  }function lib$es6$promise$asap$$useMessageChannel() {
    var channel = new MessageChannel();channel.port1.onmessage = lib$es6$promise$asap$$flush;return function () {
      channel.port2.postMessage(0);
    };
  }function lib$es6$promise$asap$$useSetTimeout() {
    return function () {
      setTimeout(lib$es6$promise$asap$$flush, 1);
    };
  }var lib$es6$promise$asap$$queue = new Array(1e3);function lib$es6$promise$asap$$flush() {
    for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {
      var callback = lib$es6$promise$asap$$queue[i];var arg = lib$es6$promise$asap$$queue[i + 1];callback(arg);lib$es6$promise$asap$$queue[i] = undefined;lib$es6$promise$asap$$queue[i + 1] = undefined;
    }lib$es6$promise$asap$$len = 0;
  }function lib$es6$promise$asap$$attemptVertx() {
    try {
      var r = require;var vertx = r("vertx");lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;return lib$es6$promise$asap$$useVertxTimer();
    } catch (e) {
      return lib$es6$promise$asap$$useSetTimeout();
    }
  }var lib$es6$promise$asap$$scheduleFlush;if (lib$es6$promise$asap$$isNode) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
  } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
  } else if (lib$es6$promise$asap$$isWorker) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
  } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === "function") {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
  } else {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
  }function lib$es6$promise$$internal$$noop() {}var lib$es6$promise$$internal$$PENDING = void 0;var lib$es6$promise$$internal$$FULFILLED = 1;var lib$es6$promise$$internal$$REJECTED = 2;var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();function lib$es6$promise$$internal$$selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }function lib$es6$promise$$internal$$cannotReturnOwn() {
    return new TypeError("A promises callback cannot return that same promise.");
  }function lib$es6$promise$$internal$$getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;return lib$es6$promise$$internal$$GET_THEN_ERROR;
    }
  }function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
    try {
      then.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
    lib$es6$promise$asap$$asap(function (promise) {
      var sealed = false;var error = lib$es6$promise$$internal$$tryThen(then, thenable, function (value) {
        if (sealed) {
          return;
        }sealed = true;if (thenable !== value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }sealed = true;lib$es6$promise$$internal$$reject(promise, reason);
      }, "Settle: " + (promise._label || " unknown promise"));if (!sealed && error) {
        sealed = true;lib$es6$promise$$internal$$reject(promise, error);
      }
    }, promise);
  }function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
    if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
      lib$es6$promise$$internal$$fulfill(promise, thenable._result);
    } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
      lib$es6$promise$$internal$$reject(promise, thenable._result);
    } else {
      lib$es6$promise$$internal$$subscribe(thenable, undefined, function (value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }, function (reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      });
    }
  }function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
    if (maybeThenable.constructor === promise.constructor) {
      lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
    } else {
      var then = lib$es6$promise$$internal$$getThen(maybeThenable);if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
      } else if (then === undefined) {
        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
      } else if (lib$es6$promise$utils$$isFunction(then)) {
        lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
      }
    }
  }function lib$es6$promise$$internal$$resolve(promise, value) {
    if (promise === value) {
      lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
    } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
      lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
    } else {
      lib$es6$promise$$internal$$fulfill(promise, value);
    }
  }function lib$es6$promise$$internal$$publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }lib$es6$promise$$internal$$publish(promise);
  }function lib$es6$promise$$internal$$fulfill(promise, value) {
    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
      return;
    }promise._result = value;promise._state = lib$es6$promise$$internal$$FULFILLED;if (promise._subscribers.length !== 0) {
      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
    }
  }function lib$es6$promise$$internal$$reject(promise, reason) {
    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
      return;
    }promise._state = lib$es6$promise$$internal$$REJECTED;promise._result = reason;lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
  }function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;var length = subscribers.length;parent._onerror = null;subscribers[length] = child;subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;if (length === 0 && parent._state) {
      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
    }
  }function lib$es6$promise$$internal$$publish(promise) {
    var subscribers = promise._subscribers;var settled = promise._state;if (subscribers.length === 0) {
      return;
    }var child,
        callback,
        detail = promise._result;for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];callback = subscribers[i + settled];if (child) {
        lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }promise._subscribers.length = 0;
  }function lib$es6$promise$$internal$$ErrorObject() {
    this.error = null;
  }var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();function lib$es6$promise$$internal$$tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
    }
  }function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
    var hasCallback = lib$es6$promise$utils$$isFunction(callback),
        value,
        error,
        succeeded,
        failed;if (hasCallback) {
      value = lib$es6$promise$$internal$$tryCatch(callback, detail);if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
        failed = true;error = value.error;value = null;
      } else {
        succeeded = true;
      }if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());return;
      }
    } else {
      value = detail;succeeded = true;
    }if (promise._state !== lib$es6$promise$$internal$$PENDING) {} else if (hasCallback && succeeded) {
      lib$es6$promise$$internal$$resolve(promise, value);
    } else if (failed) {
      lib$es6$promise$$internal$$reject(promise, error);
    } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
      lib$es6$promise$$internal$$fulfill(promise, value);
    } else if (settled === lib$es6$promise$$internal$$REJECTED) {
      lib$es6$promise$$internal$$reject(promise, value);
    }
  }function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }, function rejectPromise(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      });
    } catch (e) {
      lib$es6$promise$$internal$$reject(promise, e);
    }
  }function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
    var enumerator = this;enumerator._instanceConstructor = Constructor;enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);if (enumerator._validateInput(input)) {
      enumerator._input = input;enumerator.length = input.length;enumerator._remaining = input.length;enumerator._init();if (enumerator.length === 0) {
        lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
      } else {
        enumerator.length = enumerator.length || 0;enumerator._enumerate();if (enumerator._remaining === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        }
      }
    } else {
      lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
    }
  }lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function (input) {
    return lib$es6$promise$utils$$isArray(input);
  };lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function () {
    return new Error("Array Methods must be provided an Array");
  };lib$es6$promise$enumerator$$Enumerator.prototype._init = function () {
    this._result = new Array(this.length);
  };var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function () {
    var enumerator = this;var length = enumerator.length;var promise = enumerator.promise;var input = enumerator._input;for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
      enumerator._eachEntry(input[i], i);
    }
  };lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function (entry, i) {
    var enumerator = this;var c = enumerator._instanceConstructor;if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
      if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
        entry._onerror = null;enumerator._settledAt(entry._state, i, entry._result);
      } else {
        enumerator._willSettleAt(c.resolve(entry), i);
      }
    } else {
      enumerator._remaining--;enumerator._result[i] = entry;
    }
  };lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function (state, i, value) {
    var enumerator = this;var promise = enumerator.promise;if (promise._state === lib$es6$promise$$internal$$PENDING) {
      enumerator._remaining--;if (state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      } else {
        enumerator._result[i] = value;
      }
    }if (enumerator._remaining === 0) {
      lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
    }
  };lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function (promise, i) {
    var enumerator = this;lib$es6$promise$$internal$$subscribe(promise, undefined, function (value) {
      enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
    }, function (reason) {
      enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
    });
  };function lib$es6$promise$promise$all$$all(entries) {
    return new lib$es6$promise$enumerator$$default(this, entries).promise;
  }var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;function lib$es6$promise$promise$race$$race(entries) {
    var Constructor = this;var promise = new Constructor(lib$es6$promise$$internal$$noop);if (!lib$es6$promise$utils$$isArray(entries)) {
      lib$es6$promise$$internal$$reject(promise, new TypeError("You must pass an array to race."));return promise;
    }var length = entries.length;function onFulfillment(value) {
      lib$es6$promise$$internal$$resolve(promise, value);
    }function onRejection(reason) {
      lib$es6$promise$$internal$$reject(promise, reason);
    }for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
      lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
    }return promise;
  }var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;function lib$es6$promise$promise$resolve$$resolve(object) {
    var Constructor = this;if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === "object" && object.constructor === Constructor) {
      return object;
    }var promise = new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$resolve(promise, object);return promise;
  }var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;function lib$es6$promise$promise$reject$$reject(reason) {
    var Constructor = this;var promise = new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$reject(promise, reason);return promise;
  }var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;var lib$es6$promise$promise$$counter = 0;function lib$es6$promise$promise$$needsResolver() {
    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
  }function lib$es6$promise$promise$$needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;function lib$es6$promise$promise$$Promise(resolver) {
    this._id = lib$es6$promise$promise$$counter++;this._state = undefined;this._result = undefined;this._subscribers = [];if (lib$es6$promise$$internal$$noop !== resolver) {
      if (!lib$es6$promise$utils$$isFunction(resolver)) {
        lib$es6$promise$promise$$needsResolver();
      }if (!(this instanceof lib$es6$promise$promise$$Promise)) {
        lib$es6$promise$promise$$needsNew();
      }lib$es6$promise$$internal$$initializePromise(this, resolver);
    }
  }lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;lib$es6$promise$promise$$Promise.prototype = { constructor: lib$es6$promise$promise$$Promise, then: function then(onFulfillment, onRejection) {
      var parent = this;var state = parent._state;if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
        return this;
      }var child = new this.constructor(lib$es6$promise$$internal$$noop);var result = parent._result;if (state) {
        var callback = arguments[state - 1];lib$es6$promise$asap$$asap(function () {
          lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
        });
      } else {
        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
      }return child;
    }, "catch": function _catch(onRejection) {
      return this.then(null, onRejection);
    } };function lib$es6$promise$polyfill$$polyfill() {
    var local;if (typeof global !== "undefined") {
      local = global;
    } else if (typeof self !== "undefined") {
      local = self;
    } else {
      try {
        local = Function("return this")();
      } catch (e) {
        throw new Error("polyfill failed because global object is unavailable in this environment");
      }
    }var P = local.Promise;if (P && Object.prototype.toString.call(P.resolve()) === "[object Promise]" && !P.cast) {
      return;
    }local.Promise = lib$es6$promise$promise$$default;
  }var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;var lib$es6$promise$umd$$ES6Promise = { Promise: lib$es6$promise$promise$$default, polyfill: lib$es6$promise$polyfill$$default };if (typeof define === "function" && define["amd"]) {
    define(function () {
      return lib$es6$promise$umd$$ES6Promise;
    });
  } else if (typeof module !== "undefined" && module["exports"]) {
    module["exports"] = lib$es6$promise$umd$$ES6Promise;
  } else if (typeof this !== "undefined") {
    this["ES6Promise"] = lib$es6$promise$umd$$ES6Promise;
  }lib$es6$promise$polyfill$$default();
}).call(window);

/* jshint ignore: end */
'use strict';

angular.module('common').factory('FeatureSupportMixin', function (_, util, model, cls) {
	return {
		dualAxisCheck: function dualAxisCheck(featureName, numSeries) {
			var extendedConditions = true;
			if (featureName === 'dualYAxis') {
				extendedConditions = numSeries === 2;
			} else if (featureName === 'normalization') {
				extendedConditions = numSeries > 2;
			}

			return extendedConditions;
		}
	};
});
'use strict';

angular.module('common').directive('adChart', function () {
	return {
		scope: {
			errorMessage: '=?',
			vizFactory: '='
		},
		restrict: 'EA',
		templateUrl: 'adobe/charts/directives/ad-chart.tpl.html',
		replace: true,
		link: function link(scope, element, attrs) {
			scope.vizFactory.element = element[0];

			if (attrs.errorMessage) {
				scope.vizFactory.errorMessage = scope.errorMessage;
			}

			/**
    * Clean up event listeners on destroy
    */
			scope.$on('$destroy', function () {
				scope.vizFactory.destroy();
				$('body').off('content:resize', resizeHandler);
			});

			$('body').on('content:resize', resizeHandler);

			function resizeHandler() {
				scope.$apply(function () {
					scope.vizFactory.render();
				});
			}
			// Call inital render
			if (!scope.vizFactory.skipInitialRender) {
				scope.vizFactory.render();
			}
		}
	};
});
'use strict';

angular.module('common').directive('adSparkBar', function () {
	return {
		restrict: 'EA',
		scope: {
			value: '=',
			domain: '=',
			animate: '='
		},
		replace: true,
		transclude: true,
		templateUrl: 'adobe/charts/directives/ad-spark-bar.tpl.html',
		controller: function controller($scope, $timeout, $window) {
			var DOMAIN_UPPER_LIMIT = 100,
			    DELAY_BEFORE_ANIMATION = 500,
			    value = $scope.value || 0,
			    domain = $scope.domain || [0, DOMAIN_UPPER_LIMIT],
			    minValue = domain[0],
			    maxValue = domain[1],
			    init = false;
			if ($scope.animate) {
				// The animation seems to work better if we wait half a second first
				$timeout(function () {
					init = true;
				}, DELAY_BEFORE_ANIMATION);
			} else {
				init = true;
			}

			$scope.getWidth = function () {
				if (!init) {
					return 0;
				}

				// Prevent divide by zero
				if (maxValue == minValue) {
					return 0;
				}

				return $window.Math.abs((value - minValue) / (maxValue - minValue) * 100) + '%';
			};
		}
	};
});
'use strict';

angular.module('common').directive('adSparkLine', function () {
	return {
		restrict: 'EA',
		scope: {
			adModel: '=',
			animate: '=',
			color: '@',
			opacity: '@',
			leftLabel: '@?',
			rightLabel: '@?'
		},
		link: function link(scope, element) {
			scope.$watch('adModel', function (adModel) {
				element.adSparkLine({ opts: scope, yValues: scope.adModel });
			});
		}
	};
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// THIS FILE IS DEPRECATED. IT IS ONLY USED FOR LEGACY CONTRIBUTION ANALYSIS
angular.module('common').factory('ADVizLine', function (_, d3, dv, util, model, cls) {

	var FeatureSupportMixin = cls.import('FeatureSupportMixin'),
	    ADViz = cls.import('ADViz'),
	    LINE = 'line';

	/**
  * Class for rendering line charts
  * @param opts data to render chart
  */

	var LineChart = function (_ADViz) {
		_inherits(LineChart, _ADViz);

		function LineChart(data, config) {
			_classCallCheck(this, LineChart);

			data = data || {};

			data.vizType = data.vizType || LINE; // allow subclasses to override vizType

			var _this = _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, data, config));

			_this.supportedFeatures = _.extend(_this.supportedFeatures, {
				anchorToZero: true,
				anchorToLeft: true,
				showAnomalies: true
			}, data.supportedFeatures || {});

			_this.selectedSeriesIndex = -1;
			return _this;
		}

		_createClass(LineChart, [{
			key: '_processData',
			value: function _processData() {
				this._removeNonTimeRows();
				_get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), '_processData', this).call(this);
				this.resetEnabledFields();
			}
		}, {
			key: 'resetEnabledFields',
			value: function resetEnabledFields() {
				if (!this.containsAnomalyData) {
					return;
				}

				this.enabledAnomalyYValue = this.opts.data.y.slice();
				this.enabledUpperBound = this.opts.data.upperConfidenceBound.slice();
				this.enabledLowerBound = this.opts.data.lowerConfidenceBound.slice();
				this.enabledExpectedValue = this.opts.data.expectedValue.slice();
			}
		}, {
			key: 'transformIntoAreaStacked',


			// Computes stacked values for data.
			// Stacked Area Charts only automatically stack point & line geom data, so we have to manually do it for other types of geoms.
			// data: data you want to transform
			// yData: y-values on which the stacking is based
			value: function transformIntoAreaStacked(data, yData) {
				var dataLength = data.length;
				var numSeries = _.uniq(this.opts.data.series).length;
				var transformedValues = data;

				for (var j = 0; j < dataLength; j++) {
					var seriesIndex = j % numSeries;
					if (seriesIndex > 0) {
						for (var lowerSeries = seriesIndex; lowerSeries >= 1; lowerSeries--) {
							transformedValues[j] = transformedValues[j] + yData[j - lowerSeries];
						}
					}
				}
				return transformedValues;
			}

			// Undoes the stacked values for data by subtracting the stacked values then adds yData to use as the stacking base

		}, {
			key: 'changeAreaStackedBaselineAndUnstack',
			value: function changeAreaStackedBaselineAndUnstack(oldBaseline, newBaseline) {
				var dataLength = oldBaseline.length;
				var numSeries = _.uniq(this.opts.data.series).length;
				var transformedValues = new Array(dataLength);
				_.fill(transformedValues, 0);

				for (var j = 0; j < dataLength; j++) {
					var seriesIndex = j % numSeries;
					if (seriesIndex === 0) {
						transformedValues[j] = oldBaseline[j];
					} else {
						transformedValues[j] = oldBaseline[j] - oldBaseline[j - 1] + newBaseline[j - 1];
					}
				}
				return transformedValues;
			}
		}, {
			key: '_preRender',
			value: function _preRender() {
				var _this2 = this;

				// Anomaly Detection rendering logic
				var self = this;
				var containsAnomalyData = this.containsAnomalyData;

				if (this.opts.showAnomalies && containsAnomalyData) {
					var layers = this.baseChart.getChart().layers(),
					    numSeries = _.uniq(this.opts.data.series).length,
					    visibleSeries = _.remove(_.map(this.baseChart._seriesState.getVisibleStateObjects(), function (o) {
						if (o.enabled === true) {
							return o.id;
						}
					}), function (s) {
						return s !== undefined;
					});

					// Listener for enabling/disabling series from legend - hide anomalies/bands/expected values for disabled series
					this.baseChart._seriesState.on('enableChange.anomaly', function (eventType, state) {
						_this2.resetEnabledFields();

						for (var i = 0; i < _this2.enabledAnomalyYValue.length; i++) {
							if (visibleSeries.indexOf(_this2.opts.data.series[i]) < 0) {
								_this2.enabledAnomalyYValue[i] = null;
								_this2.enabledUpperBound[i] = 0;
								_this2.enabledLowerBound[i] = 0;
								_this2.enabledExpectedValue[i] = null;
							}
						}
						_this2.baseChart.render();
					});

					// Set the confidence band and anomaly values on opts.data
					if (visibleSeries.length < numSeries) {
						this.opts.data.enabledAnomalyYValue = this.enabledAnomalyYValue;
						this.opts.data.enabledUpperBound = this.enabledUpperBound;
						this.opts.data.enabledLowerBound = this.enabledLowerBound;
						this.opts.data.enabledExpectedValue = this.enabledExpectedValue;
					} else {
						this.opts.data.enabledAnomalyYValue = this.opts.data.y.slice();
						this.opts.data.enabledUpperBound = this.opts.data.upperConfidenceBound.slice();
						this.opts.data.enabledLowerBound = this.opts.data.lowerConfidenceBound.slice();
						this.opts.data.enabledExpectedValue = this.opts.data.expectedValue.slice();
					}

					/*************************************************************************
     * Add confidence bands and expected value lines to the chart -
     * When there are multiple visible series, hide the confidence bands and
     * expected values, and add mouseover/out functionality in order to
     * show them when hovering over the ftrend lines/anomaly points
     **************************************************************************/
					var yScales = this.baseChart._chart.getExplicitScalesMap().y,
					    yMinScale = this.baseChart._constructScale('yMin'),
					    yMaxScale = this.baseChart._constructScale('yMax');

					dv.util.each(yScales, function (scl, i) {
						var _this3 = this;

						var yScale = scl.copy(),
						    ym = this.dataMappings.y[i];

						yMinScale = i === 0 ? yMinScale : yMinScale.copy();
						yMaxScale = i === 0 ? yMaxScale : yMaxScale.copy();

						yMinScale.includeInDomain(function (d) {
							return d.fill === ym;
						});
						yMaxScale.includeInDomain(function (d) {
							return d.fill === ym;
						});

						layers.push(dv.geom.ribbon().map('yMin', 'enabledLowerBound', yMinScale, i).map('yMax', 'enabledUpperBound', yMaxScale, i).set('alpha', 0.15).map('fill', 'series').each('start', function () {
							d3.select(this).classed('ad-VizLine-confidenceBand', true);
							if (numSeries > 1 && self.selectedSeriesIndex < 0) {
								self.d3Element.selectAll('.area-geom.ad-VizLine-confidenceBand').style('display', 'none');
							}
						}), dv.geom.line().map('y', 'enabledExpectedValue', yScale, i).set('alpha', 0.3).set('linetype', 'dashed').map('stroke', 'series').each('start', function () {
							d3.select(this).classed('ad-VizLine-expectedValue', true);
							if (numSeries > 1 && self.selectedSeriesIndex < 0) {
								self.d3Element.selectAll('.line-geom.ad-VizLine-expectedValue').style('display', 'none');
							}
						}));

						if (visibleSeries.length > 1) {
							//Invisible line that expands trend line hover area (makes it easier to select the line)
							layers.push(dv.geom.line().map('y', 'enabledAnomalyYValue', yScale, i).set('size', '15px').set('alpha', 0.01).on('mouseover', function (d, i, j) {
								_this3.selectedSeriesIndex = j;
								_this3.baseChart.render();
								_this3._postRender();
							}).on('mouseout', function () {
								_this3.selectedSeriesIndex = -1;
								_this3.baseChart.render();
								_this3._postRender();
							}));
						}

						if (this.opts.data.enabledAnomalyYValue.length) {
							var anomalyPoints = dv.geom.point().map('y', 'enabledAnomalyYValue', yScale, i).set('fill', '#FFF').set('stroke', function (d, i, j) {
								return _this3.baseChart.getOption('colors')[j];
							}).set('alpha', function (d) {
								return d.data['isAnomaly'] ? 1 : 0;
							}).set('size', 10) // size in px of the point
							.on('mouseover', function (d, i, j, e) {
								if (d.data['isAnomaly']) {
									var target = _this3.createTargetElementFromMousePosition(e);
									_this3.parent.emit('showAnomalyTooltip', {
										data: d,
										index: i,
										subIndex: j,
										originalEvent: e,
										target: target
									});
								}

								_this3.selectedSeriesIndex = j;
								_this3.baseChart.render();
								_this3._postRender();
							}).on('mouseout', function () {
								_this3.selectedSeriesIndex = -1;
								_this3.baseChart.render();
								_this3._postRender();
							});

							layers.push(anomalyPoints);
						}
					}, this);

					if (visibleSeries.length > 1) {
						// Reset selectedSeriesIndex to -1 when hovering over a non-geom part of the chart
						this.baseChart.on('mouseover', function (d, i, j, k, e) {
							if (!d3.select(e.target).classed('point-geom') && !d3.select(e.target).classed('line-geom') && _this2.selectedSeriesIndex !== -1) {
								_this2.selectedSeriesIndex = -1;
								_this2.baseChart.render();
							}
						});
					}

					/*************************************************************************
     * Add the anomaly points to the chart. These must be added as the topmost layer 
     * so that the tooltip hovers will work.
     **************************************************************************/

					if (this.opts.data.enabledAnomalyYValue.length) {
						// Broadcast vizContextMenu event from vizFactory to VizSubPanel
						this.baseChart.on('contextmenu', function (d, i, j, e) {
							_this2.parent.emit('vizContextMenu', {
								data: d,
								index: i,
								subIndex: j,
								originalEvent: e,
								chartType: 'line',
								// CA reports can only be run on Day granularity
								generateContributionAnalysisPanel: _this2.dataMappings.x === 'variables/daterangeday'
							});
						});
					}
				}

				_get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), '_preRender', this).call(this);

				//layers.push(
				//dv.geom.point().behaviors([
				//dv.behavior.voronoiRollover()
				//.pointDetectionRadius(15)
				//.content(function(d,i,j) {
				//var md = d.data.metaData;
				//if (!md.cell) {
				//return null; // There are 'blank cells' in cohort table (i.e. cells that are visualy blank in the cohort table) have blank metaData objects.
				//}

				//var metric = md.cell.closestMetric,
				//val;

				//if (metric) { val = $filter('metric')(d.data.y, metric.type, metric.precision); }
				//else        { val = $filter('number')(d.data.y); }

				//return '<span class="series-name">' + md.cell.getColumnLabel() + '</span><span class="metric-value">' + val + '</span>';
				//})
				//])
				//);
			}
		}, {
			key: '_postRender',
			value: function _postRender(chart) {
				var self = this;
				if (this.opts.showAnomalies) {
					// Add context menu listener to all of the tooltip areas
					this.d3Element.selectAll('.point-geom').each(function () {
						d3.select(this).on('contextmenu', self.baseChart.makeContextMenuHandler(self.baseChart));
					});
				}

				// Show confidence band of hovered series
				if (this.selectedSeriesIndex > -1) {
					var seriesClass = '.series-' + this.selectedSeriesIndex;
					this.d3Element.selectAll('.line-geom.ad-VizLine-expectedValue').style('display', 'none');
					this.d3Element.selectAll('.area-geom.ad-VizLine-confidenceBand').style('display', 'none');
					this.d3Element.selectAll(seriesClass.concat('.ad-VizLine-expectedValue')).style('display', 'inline');
					this.d3Element.selectAll(seriesClass.concat('.ad-VizLine-confidenceBand')).style('display', 'inline');
				}

				// CloudViz adds the 'line-point' class in DV's 'each' function
				// so we use $timeout to wait till after the 'each' functions fire.
				//
				// We use the 'line-point' class to distinguish
				// wich points are part of the voronoi behavior (points added by
				// voronoi rollover *don't* have the 'line-point' class).
				//
				// ************
				// Commented out when the rollover layer was commented out,
				// but this timout function was also hiding the anomaly date
				// on the item detail trend chart on Contribution Analysis.
				// ***********
				//
				//$timeout(function() {
				//var rolloverPoints = d3.selectAll('.point-geom').filter(skipLinePoints);

				//rolloverPoints.style({opacity: 0}); // voronoiRollover comes free with visible points, but we don't want visible points so we make them invisible.

				//function skipLinePoints(d) {
				//return !d3.select(this).classed('line-point');
				//}
				//}, 100);
			}
		}, {
			key: 'supportsFeature',
			value: function supportsFeature(featureName) {
				var baseSupport = _get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), 'supportsFeature', this).call(this, featureName),
				    extendedConditions = FeatureSupportMixin.dualAxisCheck(featureName, _.get(this, 'dataMappings.y.length', 0));

				return baseSupport && extendedConditions;
			}
		}, {
			key: 'highlightChart',
			value: function highlightChart(ids) {
				var inspector = this.baseChart.getChart().behaviors()[0],
				    xIndex,
				    self = this;

				this.d3Element.selectAll('.line-point').classed('point-hidden', function (d, i) {
					var foundId = ~ids.indexOf(d.data.id);
					//
					// Remember the first x index so we know where to move the Inspector
					if (!xIndex && foundId) {
						xIndex = self.xIndexOf(d.x);
					}

					return !foundId;
				});

				if (inspector && !isNaN(xIndex) && ~xIndex) {
					this.$element.find('.axis-x').hide();
					inspector.show();

					// Had to add this little gem because cohort was breaking with the custom x axis labels
					if (inspector._domain.length <= xIndex) {
						inspector._domain = self.opts.data.x;
					}
					inspector.moveToIndex(xIndex);
				}
			}
		}, {
			key: 'unhighlightData',
			value: function unhighlightData() {
				var inspector = this.baseChart.getChart().behaviors()[0];

				this.d3Element.selectAll('.line-point').classed('point-hidden', true);

				if (inspector) {
					this.$element.find('.axis-x').show();
					inspector.hide();
				}
			}
		}, {
			key: '_applyCVOptions',
			value: function _applyCVOptions() {
				// Called apply, since we are not passing anything in to it. Usually called only in the render method.
				_get(LineChart.prototype.__proto__ || Object.getPrototypeOf(LineChart.prototype), '_applyCVOptions', this).call(this);
			}
		}, {
			key: 'containsAnomalyData',
			get: function get() {
				var data = this.opts.data;

				return data.isAnomaly && data.isAnomaly[0] !== undefined && _.sum(data.upperConfidenceBound) !== 0 || _.sum(data.lowerConfidenceBound) !== 0 || _.sum(data.expectedValue) !== 0;
			}
		}, {
			key: 'highlightByKeys',
			get: function get() {
				return true;
			}
		}], [{
			key: 'fields',
			value: function fields() {
				return ['selectedSeriesIndex', 'enabledAnomalyYValue', 'enabledUpperBound', 'enabledLowerBound', 'enabledExpectedValue'];
			}
		}]);

		return LineChart;
	}(ADViz);

	return LineChart;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// THIS FILE IS DEPRECATED. IT IS ONLY USED FOR LEGACY CONTRIBUTION ANALYSIS
angular.module('common').factory('ADVizScatter', function (_, d3, dv, util, model, cls) {

	var ADViz = cls.import('ADViz'),
	    SCATTER = 'scatter';

	/**
  * Class for rendering scatter plot charts
  * @param opts data to render chart
  */

	var ScatterPlotChart = function (_ADViz) {
		_inherits(ScatterPlotChart, _ADViz);

		function ScatterPlotChart(data, config) {
			_classCallCheck(this, ScatterPlotChart);

			data = data || {};

			data.vizType = data.vizType || SCATTER;

			var _this = _possibleConstructorReturn(this, (ScatterPlotChart.__proto__ || Object.getPrototypeOf(ScatterPlotChart)).call(this, data, config));

			_this.supportedFeatures = _.extend(_this.supportedFeatures, {
				dualYAxis: false,
				normalization: false
			}, data.supportedFeatures || {});
			return _this;
		}

		_createClass(ScatterPlotChart, [{
			key: 'highlightChart',
			value: function highlightChart(ids) {
				this.d3Element.selectAll('.point-geom').classed('cv-unselected', function (d) {
					return !~ids.indexOf(d.data.id);
				});
			}
		}, {
			key: 'unhighlightData',
			value: function unhighlightData() {
				this.d3Element.selectAll('.point-geom').classed('cv-unselected', false);
			}
		}, {
			key: '_preRender',
			value: function _preRender() {
				var _this2 = this;

				_get(ScatterPlotChart.prototype.__proto__ || Object.getPrototypeOf(ScatterPlotChart.prototype), '_preRender', this).call(this);

				// baseChart only supports one selectionEnd instance,
				// so you don't have to worry about duplicates.
				this.baseChart.on('selectionEnd', function (d) {
					_this2.parent._onSelection({
						selected: _this2.baseChart.getSelected()
					});
				});
			}
		}, {
			key: '_processData',
			value: function _processData() {
				var options = this.opts;
				//
				// Re-configure mappings to put a metric on each axis
				if (!this.dataMappings.altered) {
					this.dataMappings.series = this.dataMappings.x;
					this.dataMappings.x = this.dataMappings.y[1];
					this.dataMappings.size = this.dataMappings.y[2] || null;
					this.dataMappings.y = [this.dataMappings.y[0]];
					this.dataMappings.altered = true;
				}

				_get(ScatterPlotChart.prototype.__proto__ || Object.getPrototypeOf(ScatterPlotChart.prototype), '_processData', this).call(this);

				if (this.noData()) {
					return;
				} // Make sure there are some y values.

				if (!this.dataMappings.size) {
					options.data.size = [];
					options.data.size.length = options.data.x.length;
					_.fill(options.data.size, 1);
				}

				this.dataProvider.formatDates(options.data.series, this.dataMappings.series);

				this.baseChart.setOption('xAxisTitle', this.dataMappings.x);
				this.baseChart.setOption('yAxisTitle', this.dataMappings.y[0]);
				this.baseChart.setOption('tooltipContent', function (d, i, j) {
					// note that, below, we're binding this 'tooltipContent' callback function to `this` to avoid creating a '_self' variable
					var row = this.dataProvider.rows[j],
					    content = '<span class="series-name">' + _.escape(d.fill) + '</span>',
					    yValue = _.escape(this.dataProvider.formatValue(d.data.y, this.dataMappings.y[0])),
					    yName = _.escape(row[this.dataMappings.y[0]].columnLabel),
					    xValue = _.escape(this.dataProvider.formatValue(d.data.x, this.dataMappings.x)),
					    xName = _.escape(row[this.dataMappings.x].columnLabel);

					content += '<span class="metric-value">' + yValue + '</span><span class="metric-name">' + yName + '</span>';
					content += '<span class="metric-value">' + xValue + '</span><span class="metric-name">' + xName + '</span>';

					if (this.dataMappings.size) {
						var sizeValue = _.escape(this.dataProvider.formatValue(d.data.size, this.dataMappings.size)),
						    sizeName = _.escape(row[this.dataMappings.size].columnLabel);

						content += '<span class="metric-value">' + sizeValue + '</span><span class="metric-name">' + sizeName + '</span>';
					}

					return content;
				}.bind(this));
			}
		}, {
			key: '_applyCVOptions',
			value: function _applyCVOptions() {
				// Called apply, since we are not passing anything in to it. Usually called only in the render method.
				this.baseChart.setOptions(_.extend({}, this.opts, { legendOriengation: 'top' }));
			}
		}, {
			key: 'noData',
			value: function noData() {
				return !(Boolean(_.get(this, 'opts.data.y.length')) && Boolean(_.get(this, 'opts.data.x.length')));
			}
		}, {
			key: 'highlightKeys',
			get: function get() {
				var keys = [this.dataMappings.x, this.dataMappings.y[0]];

				if (this.dataMappings.size) {
					keys.push(this.dataMappings.size);
				}

				return keys;
			}
		}, {
			key: 'highlightByKeys',
			get: function get() {
				return true;
			}
		}]);

		return ScatterPlotChart;
	}(ADViz);

	return ScatterPlotChart;
});
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// THIS FILE IS DEPRECATED. IT IS ONLY USED FOR LEGACY CONTRIBUTION ANALYSIS
angular.module('common').factory('ADVizTreemap', function (_, d3, dv, util, model, cls) {

	var ADViz = cls.import('ADViz'),
	    TREE_MAP = 'treemap';

	/**
  * Class for rendering treemap charts
  * @param opts data to render chart
  */

	var TreeMapChart = function (_ADViz) {
		_inherits(TreeMapChart, _ADViz);

		_createClass(TreeMapChart, null, [{
			key: 'properties',
			value: function properties() {
				return {
					_treeData: { Array: Object }
				};
			}
		}]);

		function TreeMapChart(data, config) {
			_classCallCheck(this, TreeMapChart);

			data = data || {};

			data.vizType = data.vizType || TREE_MAP;

			var _this = _possibleConstructorReturn(this, (TreeMapChart.__proto__ || Object.getPrototypeOf(TreeMapChart)).call(this, data, config));

			_this.supportedFeatures = _.extend(_this.supportedFeatures, {
				normalization: false,
				dualYAxis: false,
				legendVisible: false
			}, data.supportedFeatures || {});
			return _this;
		}

		_createClass(TreeMapChart, [{
			key: '_processData',
			value: function _processData() {
				var mappings = this.dataMappings;

				mappings.parentNodes = mappings.parentNodes || mappings.y;
				mappings.nodes = mappings.nodes || [mappings.x];

				_get(TreeMapChart.prototype.__proto__ || Object.getPrototypeOf(TreeMapChart.prototype), '_processData', this).call(this);

				if (this.noData()) {
					return;
				} // Make sure there are some y values.


				var treeData = [],
				    limit = this.limit,
				    limitedRows = this.dataProvider.rows.slice(0, limit);

				//
				// Option to pass in pre-processed treeData
				treeData = mappings.treeData || mappings.parentNodes.map(function (parentNodeName) {
					var childRows = _.filter(limitedRows, parentNodeName),
					    parentNode = {};

					parentNode.name = parentNodeName;
					if (mappings.seriesLabel) {
						parentNode.label = childRows[0][parentNodeName][mappings.seriesLabel];
					}
					parentNode.children = _.map(childRows, function (row) {
						var dataItem = row[parentNodeName];

						if (!dataItem) {
							return {};
						}

						var child = {
							id: dataItem.id,
							name: dataItem.rowLabel,
							value: dataItem.value,
							metric: dataItem.metric
						};

						child.data = row[parentNodeName].data;

						return child;
					});

					return parentNode;
				});

				this._treeData = treeData; // store tree data in temp property because setting `this.baseChart.setOption('data', treeData)` here caused infinite loop
			}
		}, {
			key: 'highlightChart',
			value: function highlightChart(ids) {
				if (!this.opts.data) {
					return;
				} // When highlightChart is called immediately after selection ends, `this.opts.data` is `undefined`

				// The below `.classed` function returns false when we have found our element because
				// `classed` decides which geoms to 'unselect'. So when we find a geom connected to our
				// 'ids', we don't want it not selected. Make sense? No? Here's an Advil.
				this.d3Element.selectAll('.cv-node.second-level').classed('hovered', function (d, i) {
					var found = ~ids.indexOf(d.id);
					return found;
				});
			}
		}, {
			key: 'formatValueForDisplay',
			value: function formatValueForDisplay(data) {
				var formatKey = this.opts.showPercent ? 'percent' : data.metric,
				    displayValue = this.dataProvider.formatValue(data.value, formatKey);

				return displayValue;
			}
		}, {
			key: '_applyCVOptions',
			value: function _applyCVOptions() {
				// Called apply, since we are not passing anything in to it. Usually called only in the render method.
				var _self = this;

				this.baseChart.setOptions(_.extend({}, this.opts, { height: _self.element.clientHeight, width: _self.element.clientWidth }));
				this.baseChart.setOption('data', this._treeData); // suspect infinite loop (a.k.a. 'maximum call stack size exceeded') is somehow related to this _.extend, so setting tree data after

				if (!this.opts.tooltipContent) {
					this.opts.tooltipContent = function (d, i) {
						var displayValue = _self.formatValueForDisplay(d);

						var content = '<span class="series-name">' + _.escape(d.parent.name) + '</span>';
						content += '<span class="metric-value">' + _.escape(displayValue) + '</span>';
						content += '<span class="metric-name">' + _.escape(d.name) + '</span>';

						return content;
					};
				}

				if (!this.opts.cellContent) {
					this.opts.cellContent = function (d, i) {
						var displayValue = _self.formatValueForDisplay(d);

						return '<div class="ad-viz-treemap-node-label"><span class="ad-viz-treemap-nodel-label-value">' + displayValue + '</span><span class="ws-viz-treemap-nodel-label-name">' + d.name + '</span></div>';
					};
				}

				this.baseChart.setOption('tooltipContent', this.opts.tooltipContent);
				this.baseChart.setOption('cellContent', this.opts.cellContent);

				// The click event on a treemap is like a selection.
				this.baseChart.on('click', function (d) {
					_self.parent._onSelection({
						selected: _self.baseChart.getSelected()
					});
				});
			}
		}, {
			key: 'isDvChartType',
			value: function isDvChartType() {
				return false;
			}
		}, {
			key: 'noData',
			value: function noData() {
				return !Boolean(_.get(this, 'dataProvider.rows.length'));
			}
		}, {
			key: '_formatAxes',
			value: function _formatAxes() {
				// noop
			}
		}]);

		return TreeMapChart;
	}(ADViz);

	return TreeMapChart;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// THIS FILE IS DEPRECATED. IT IS ONLY USED FOR LEGACY CONTRIBUTION ANALYSIS

angular.module('common').factory('ADViz', function (_, d3, dv, cloudViz, util, model, $filter, DateService, $log, cls, analyticsConfig, appModel) {
	var _analyticsui$core = analyticsui['core'],
	    Model = _analyticsui$core.Model,
	    l10nConfig = _analyticsui$core.l10nConfig,
	    csvService = _analyticsui$core.csvService;
	var VizDataProvider = analyticsui['model'].VizDataProvider;


	var CONFIDENCE_BAND_KEYS = ['upperConfidenceBound', 'lowerConfidenceBound', 'expectedValue'];

	var ADViz = function (_Model) {
		_inherits(ADViz, _Model);

		_createClass(ADViz, null, [{
			key: 'properties',
			value: function properties() {
				return {
					itemType: { type: String },
					icon: { type: String },
					supportedFeatures: { type: Object },
					dataProvider: { type: VizDataProvider, ensureExists: true },
					parent: { type: Object },
					_metricsFromProcessData: Object,
					vizType: { type: String, enum: ['line', 'treemap', 'scatter'], default: 'line' },
					description: { type: String },
					name: { type: String },
					skipInitialRender: Boolean
				};
			}
		}, {
			key: 'fields',
			value: function fields() {
				return ['baseChart', '_cloudVizYLabelFormat', '_cloudVizYTickFormat', '_onMouseOver', '_onMouseOut', '_onSelection'];
			}
		}, {
			key: 'options',
			value: function options() {
				return {
					setParent: false
				};
			}
		}]);

		function ADViz(data, config) {
			_classCallCheck(this, ADViz);

			/**
    * Note that these aren't the values of the options,
    * they are boolean values which indicate whether or not a chart supports that option being set.
    */
			var _this = _possibleConstructorReturn(this, (ADViz.__proto__ || Object.getPrototypeOf(ADViz)).call(this, data, config));

			_this.supportedFeatures = _.extend({}, {
				dualYAxis: true,
				normalization: true,
				abbreviateValue: false,
				showGoal: false,
				anchorToLeft: false,
				anchorToZero: false,
				legendVisible: true,
				maxLength: true,
				showAnomalies: false
			}, data.supportedFeatures ? data.supportedFeatures.toJSON() : {});

			_this._onMouseOver = function () {};
			_this._onMouseOut = function () {};
			_this._onSelection = function () {};

			if (cloudViz[_this._baseChartType()]) {
				_this.baseChart = cloudViz[_this._baseChartType()]();
				_this.baseChart._eventMap = {}; // This hack is necessary so that all the charts don't share the same events.

				/*
     * Override CloudViz _formatNumber to take advantage of metric value filter (where applicable)
     */
				_this._cloudVizYLabelFormat = _this.baseChart._yLabelFormat; // Create a copy of _formatNumber, but retain the binding to the cloudViz chart
				_this._cloudVizYTickFormat = _this.baseChart._yTickFormat;
				_this.baseChart._yLabelFormat = _this._yLabelFormat.bind(_this); // cloudViz will re-bind the _formatNumber to the current CloudViz chart, we want to keep it scoped to the ADViz.
			}
			return _this;
		}

		_createClass(ADViz, [{
			key: '_yLabelFormat',
			value: function _yLabelFormat(seriesIndex) {
				var metricName = this.dataMappings.y[seriesIndex],
				    originalFn = this._cloudVizYLabelFormat.call(this.baseChart, seriesIndex);

				if (metricName) {
					var _self = this;
					return function (d, i) {
						if (originalFn(d, i) === '') {
							return '';
						}

						return _self.dataProvider.formatValue(d, metricName);
					};
				} else {
					return originalFn;
				}
			}
		}, {
			key: '_updateFormat',
			value: function _updateFormat(newValue, oldValue) {}
			// implement in child class any time you need to react to changes in x or y formatting


			//
			// _baseChartType() Maps our chart types to CloudViz  & SpecialtyViz chart types.
			// For example, we have separate chart types for `HORIZONTAL_BAR` and `VERTICAL_BAR`,
			// but CloudViz defines both of those just as `bar` with different options set

		}, {
			key: '_baseChartType',
			value: function _baseChartType() {
				switch (this.vizType) {
					case 'scatter':
						return 'point';
					case 'treemap':
						return 'treemap';
					case 'line':
						return 'line';
					default:
						return ''; // invalid cv chart type
				}
			}
		}, {
			key: 'getOption',
			value: function getOption(optionName) {
				return this.parent.getOption(optionName);
			}
		}, {
			key: 'setOption',
			value: function setOption(optionName, optionValue) {
				this.parent.setOption(optionName, optionValue);
			}
		}, {
			key: 'getConfigOption',
			value: function getConfigOption(optionName) {
				return this.parent.getConfigOption(optionName);
			}
		}, {
			key: 'setConfigOption',
			value: function setConfigOption(optionName, optionValue) {
				this.parent.setConfigOption(optionName, optionValue);
			}
		}, {
			key: 'supportsFeature',
			value: function supportsFeature(featureName) {
				return !!this.supportedFeatures[featureName];
			}
		}, {
			key: 'format',
			value: function format(type, options) {
				if (this.baseChart.format) {
					var resultArray = this.baseChart.format(type, options);
					if (!_.isEmpty(resultArray)) {
						return csvService.convertJSONtoCSV(resultArray);
					}
				}
				return '';
			}
		}, {
			key: 'isDvChartType',
			value: function isDvChartType() {
				return true;
			}
		}, {
			key: 'xIndexOf',
			value: function xIndexOf(val) {
				if (this.opts.data) {
					return this.opts.data.x.indexOf(val);
				}
			}
		}, {
			key: 'highlightChart',
			value: function highlightChart(ids) {
				if (!this.opts.data) {
					return;
				} // When highlightChart is called immediately after selection ends, `this.opts.data` is `undefined`

				//var rowHash = _.find(this.dataProvider.rows, function(row) {
				//var rowIds = _.pluck(row, 'id');
				//return  _.intersection(ids, rowIds).length > 0;
				//}); // find just the rows with the specifiedIDs

				//rowHash = _.indexBy(rowHash, 'id'); // defaults to {} because calling indexBy for 'undefined' returns {}
				//var rowIds = Object.keys(rowHash);

				//// If the cell ID wasn't passed in through "ids", delete it from the hash
				//rowIds.forEach(function(id) {
				//if (!~ids.indexOf(id)) {
				//delete rowHash[id];
				//}
				//});

				// The below `.classed` function returns false when we have found our element because
				// `classed` decides which geoms to 'unselect'. So when we find a geom connected to our
				// 'ids', we don't want it not selected. Make sense? No? Here's an Advil.
				this.d3Element.selectAll('.bar-geom').classed('cv-unselected', function (d, i) {
					var found = ~ids.indexOf(d.data.id);
					return !found;
				});
			}
		}, {
			key: 'unhighlightData',
			value: function unhighlightData() {
				this.d3Element.selectAll('.bar-geom').classed('cv-unselected', false);
			}
		}, {
			key: '_removeNonTimeRows',
			value: function _removeNonTimeRows() {
				// We are modifying the original.. Better be ok.
				var xmap = this.dataMappings.x;

				this.dataProvider.rows = _.filter(this.dataProvider.rows, function (row) {
					return row[xmap].value instanceof Date;
				}.bind(this));

				this.dataProvider.rows = _.sortBy(this.dataProvider.rows.slice(), function (row) {
					return row[this.dataMappings.x].value;
				}.bind(this));
			}
		}, {
			key: '_removeNonSegmentRows',
			value: function _removeNonSegmentRows() {
				var xmap = this.dataMappings.x;

				this.dataProvider.rows = _.filter(this.dataProvider.rows, function (row) {
					return row[xmap].additionalData.cell.component.itemType == 'segment';
				}.bind(this));
			}
		}, {
			key: '_processData',
			value: function _processData() {
				var mappings = this.dataMappings,
				    data = {},
				    _self = this;

				if (!mappings) {
					// only process if there is data and mappings
					return;
				}

				data.x = [];
				data.xLabel = [];
				data.y = [];
				data.id = [];
				data.size = [];
				data.series = [];
				data.metaData = [];
				data.seriesLabel = [];
				data.metaDataRow = [];
				data.columnLabel = [];
				data.rowLabel = [];
				data.label = [];
				data.upperConfidenceBound = [];
				data.lowerConfidenceBound = [];
				data.expectedValue = [];
				data.isAnomaly = [];
				data.additionalData = [];

				var rows = this.dataProvider.rows;
				if (this.limit) {
					// If the limit is greater than 0, then set it.
					rows = rows.slice(0, this.limit);
				}

				var metrics = {};

				_.each(rows, function (row) {
					_.each(mappings.y, function (yKey) {
						if (!_.has(row, yKey)) {
							return; // If there is a missing item, don't add anything.
						}

						data.y.push(row[yKey].value);

						if (mappings.x) {
							data.x.push(getRowValue(mappings.x));
						}
						if (mappings.size) {
							data.size.push(getRowValue(mappings.size));
						}
						if (mappings.series) {
							data.series.push(getRowValue(mappings.series));
						}
						if (mappings.seriesLabel) {
							data.seriesLabel.push(getRowValue(mappings.seriesLabel));
						}
						if (!mappings.series) {
							data.series.push(yKey);
						}
						if (mappings.upperConfidenceBound) {
							data.upperConfidenceBound.push(getRowValue('upperConfidenceBound', yKey));
						}
						if (mappings.lowerConfidenceBound) {
							data.lowerConfidenceBound.push(getRowValue('lowerConfidenceBound', yKey));
						}
						if (mappings.expectedValue) {
							data.expectedValue.push(getRowValue('expectedValue', yKey));
						}
						if (mappings.isAnomaly) {
							data.isAnomaly.push(getRowValue('isAnomaly', yKey));
						}
						if (row[yKey].metric) {
							metrics[yKey] = _.get(row[yKey], 'metric', {});
						}

						data.id.push(row[yKey].id);
						data.columnLabel.push(row[yKey].columnLabel);
						data.rowLabel.push(row[yKey].rowLabel);
						data.label.push(row[yKey].label);

						data.additionalData.push(row[yKey].additionalData);
					});

					if (mappings.x && row[mappings.x] && row[mappings.x].metric) {
						metrics[mappings.x] = _.get(row[mappings.x], 'metric');
					}
					if (mappings.size && row[mappings.size] && row[mappings.size].metric) {
						metrics[mappings.size] = _.get(row[mappings.size], 'metric');
					}

					function getRowValue(key, yKey) {
						if (yKey) {
							var item = row[yKey],
							    value = _.get(item[key], 'value', row[yKey][key]);

							if (_.isNumber(value)) {
								//
								// If the showPercent option is true, we need to show the confidence bands on the same scale as the percentage values (i.e. divide them by the column total)
								if (_self.opts.showPercent && _self._isConfidenceBandKey(key)) {
									var total = item.columnTotal;
									value = total === 0 ? value : value / total; // If the total is zero, the value will also be zero (so just keep value). Also avoids divide by zero error.
								}
							}
							return value;
						} else {
							return _.get(row[key], 'value', row[key]);
						}
					}
				});

				this._metricsFromProcessData = this.dataProvider.metrics = metrics;

				data.y = this._fixNonNumbers(data.y);

				//this.parent.limit = data.y.length; // Update limit to show correct number of data points in original limit
				data = _.omit(data, _.isEmpty); // Remove anything that did not get set.
				this.opts.data = data;
			}
		}, {
			key: '_isConfidenceBandKey',
			value: function _isConfidenceBandKey(key) {
				return CONFIDENCE_BAND_KEYS.some(function (k) {
					return k === key;
				});
			}
		}, {
			key: '_fixNonNumbers',
			value: function _fixNonNumbers(numbers) {
				return _.map(numbers, function (dy) {
					if (dy === null) {
						return dy;
					}
					if (isNaN(dy) || !_.isNumber(dy)) {
						return 0;
					}
					if (!isFinite(dy)) {
						return 0; // replace both positive & negative infinities with zeroes.
					}
					return dy;
				});
			}
		}, {
			key: 'valueByCoords',
			value: function valueByCoords(coords) {
				var mappings = this.dataMappings,
				    value,
				    rows = this.dataProvider.rows;

				_.each(rows, function (r) {
					_.each(mappings.y, function (key) {
						var c = r[key] && r[key].metaData.cell;
						if (c && c.coords === coords) {
							value = r[key].value;
						}
					});
				});

				return value;
			}
		}, {
			key: '_setupFormats',
			value: function _setupFormats() {
				if (!_.get(this, 'opts.formats.x')) {
					_.set(this, 'opts.formats.x', 'decimal');
				}
				// This sets up the 'formats' option.
				// The actual formatting happens in _formatAxes.
				if (!_.get(this, 'opts.formats.y')) {
					this.opts.formats.y = [];

					_.each(this.dataMappings.y, function (key) {
						if (this._metricsFromProcessData[key]) {
							this.opts.formats.y.push(this._metricsFromProcessData[key].type);
						}
					}.bind(this));
				}
			}
		}, {
			key: '_setupLocale',
			value: function _setupLocale() {
				if (this.opts) {
					this.opts.locale = util.processLocaleFromConfig(l10nConfig.currentLocale);

					var symbol = appModel.reportSuite.currency,
					    positivePattern = "{number} {symbol}",
					    negativePattern = "-{number} {symbol}";

					if (symbol == 'USD') {
						symbol = '$';
						positivePattern = "{symbol}{number}";
						negativePattern = "-{symbol}{number}";
					}

					this.opts.l10n = {
						numberFormat: {
							currency: {
								symbol: symbol,
								positivePattern: positivePattern,
								negativePattern: negativePattern
							}
						}
					};
				}
			}
		}, {
			key: '_validateDateGranularity',
			value: function _validateDateGranularity(gran) {
				var validGranularities = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];

				return validGranularities.indexOf(gran) > 0 ? gran : null;
			}
		}, {
			key: '_formatAxes',
			value: function _formatAxes() {
				var _self = this;
				var dvChart = this.baseChart.getChart();

				if (!this.isDvChartType() || !_.get(dvChart, '_axes._axes.x[0]')) {
					return;
				}

				// Custom function for x Axis labels on graph, if wanted
				if (_.get(_self, 'dataMappings.tickFormat.x')) {
					dvChart._axes._axes.x[0].tickFormat(function (d, i) {
						return _self.dataMappings.tickFormat.x(arguments, _self);
					});
				}

				// Custom tickValues for the x Axis on graph, if wanted
				if (_.get(_self, 'dataMappings.tickFormat.tickValues') && _self.vizType !== 'donut') {
					dvChart._axes._axes.x[0].tickValues(_self.opts.data.x);
				}

				//  Specify the number of tick marks on the x axis, if wanted
				//  Not guaranteed to work always,  according to DV wiki:
				//  This is because ticks is simply a hint.....
				//  ....If you wish to override this behavior, use tickValues to manually specify your values.
				if (_.get(_self, 'dataMappings.tickFormat.numTicks') && _self.vizType !== 'donut') {
					dvChart._axes._axes.x[0].ticks(_self.dataMappings.tickFormat.numTicks);
				}

				// Custom functino for x Axis inspector (onHover) labels, if wanted
				if (_.get(_self, 'dataMappings.inspectorLabel')) {
					dvChart.behaviors()[0].label(function (d, i) {
						return _self.dataMappings.inspectorLabel(arguments, _self);
					});
				}

				// When there is only 1 cell selected in a time series, cloudviz cannot properly calculate the date range to display
				// so we need to specify the granularity
				var gran = this.dataMappings.x.split('daterange')[1];

				// it shouldn't matter if gran is undefined
				this.baseChart.setOption('dateGranularity', this._validateDateGranularity(gran));

				//
				// For each axis we need to check whether we want to apply the metric value filter.
				// Most times this will be the Y axis and the X axis would not have a metric, but
				// the ScatterPlotChart may have a metric for the x axis.
				dvChart._axes._eachAxis(function (which, axisIndex, axis) {
					if (axis === 'none') {
						return;
					} // Bail out if none

					var whichMapping = _self.dataMappings[which],
					    oldFormat = axis._tickFormat;

					if (_.isArray(whichMapping)) {
						whichMapping = whichMapping[axisIndex];
					}

					//
					// Works for x and y axis.
					// X axis is really only needed occasionally for scatter plot
					axis.tickFormat(function (val, i, panel) {
						var formattedVal = oldFormat(val, i, panel),
						    // format based on existing `axis._tickFormat` function
						formatKey = whichMapping;

						//
						// Maintain CloudViz format for overtime values
						// Maintain empty string to signal CloudViz to not render a tick.
						if (which === 'x' && _.isDate(val) || formattedVal === '') {
							val = formattedVal;
						}

						//
						// If there are two or more y series (and we're neither dualYAxis or normalized)
						//  - if the formats match, we can maintain that
						//  - if the formats don't match, default to 'int
						if (which === 'y' && _self.dataMappings.y.length >= 2 & !(_self.opts.dualYAxis || _self.opts.normalized)) {
							var formats = _self.dataMappings.y.map(function (m) {
								return _self.dataProvider.getFormat(m).type;
							});
							formatKey = _.uniq(formats).length === 1 ? formatKey : 'int';
						}

						formattedVal = _self.dataProvider.formatValue(val, formatKey);

						return formattedVal;
					});
				});
			}
		}, {
			key: '_applyCVOptions',
			value: function _applyCVOptions() {
				// Called apply, since we are not passing anything in to it. Usually called only in the render method.
				this.baseChart.setOptions(this.opts);
			}
		}, {
			key: 'renderError',
			value: function renderError() {
				var errorMessage = this.parent.errorMessage || $filter('l10n')(['no-data-to-display', 'There is currently no data to display.']);
				var el = angular.element('<span class="no-data-message">' + errorMessage + '</span>');
				angular.element(this.element).append(el);
			}
		}, {
			key: '_preRender',
			value: function _preRender() {
				if (this.parent.animate) {
					this.baseChart.getChart().duration(300);
				}
				this._formatAxes();
			}
		}, {
			key: '_postRender',
			value: function _postRender() {}
		}, {
			key: 'createTargetElementFromMousePosition',
			value: function createTargetElementFromMousePosition(originalEvent) {
				var currentTarget = null,
				    mouseCoords = d3.mouse(this.element),
				    xVal = mouseCoords[0],
				    yVal = mouseCoords[1];

				//
				// Create the D3 selection representing the desired target
				currentTarget = this.d3Element.select('.cv-wrapper').selectAll('.ad-vizVennContextTarget').data(['ad-viz-venn-context-target'], function (d) {
					return d;
				});

				//
				// Create the div if it doesn't exist
				currentTarget.enter().append('div').classed('ad-vizVennContextTarget', true).style({
					position: 'absolute',
					width: '1px',
					height: '1px'
				});

				//
				// Lastly, set the position
				currentTarget.style({
					top: yVal + 'px',
					left: xVal + 'px'
				});

				return currentTarget.node();
			}
		}, {
			key: 'noData',
			value: function noData() {
				// return this.dataProvider.isDataValid;
				return !Boolean(_.get(this, 'opts.data.y.length'));
			}
		}, {
			key: 'render',
			value: function render() {
				var self = this,
				    elOffsetWidth,
				    baseErr = {
					hasDataMappings: !!this.dataMappings,
					hasRows: !!_.get(this, 'dataProvider.rows'),
					vizType: this.vizType
				},
				    noElError = _.extend({}, baseErr, {
					message: 'No element'
				}),
				    noDataErr = _.extend({}, baseErr, {
					message: 'No data'
				});

				//
				// Throw the no element error if this.element is undefined,
				// or if this.element.offsetWidth is zero
				if (!_.get(this, 'element')) {
					this.parent.emit('RenderError', noElError);
					return;
				}

				angular.element(this.element).html('');

				if (elOffsetWidth === 0) {
					return;
				}

				if (!this.dataMappings || !this.dataProvider.rows) {
					// If there aren't any rows to begin with, we are done rendering
					this.parent.emit('RenderError', noDataErr);
					this.renderError();
					return;
				}

				self.parent._processData();

				// Call after processData, in case the processData filtered everything out.
				if (this.noData()) {
					this.parent.emit('RenderError', {
						message: 'Invalid data',
						hasDataMappings: !!this.dataMappings,
						hasRows: !!this.dataProvider.rows,
						vizType: this.vizType
					});
					this.renderError();
					return;
				}

				this._setupFormats();
				this._setupLocale();
				this._applyCVOptions(); // This does a blanket set on the options.

				this.baseChart.setOption('formats', this.opts.formats);
				this.baseChart.setOption('parent', this.element); // Always set the parent to be the currently set element.

				// Not all cloudviz charts call the prerender, so we have to call it ourselves if it's not dv chart type.
				if (this.isDvChartType()) {
					this.baseChart.setOption('preRender', function (dvChart) {
						self.parent._preRender();
					});
				} else {
					self.parent._preRender();
				}

				this.baseChart.on('mouseover', function (d, dataIndex, xPosition, mouseEvent, mouseEvent2) {
					// [Object, 0, 1, MouseEvent]
					// bounds: Objectdata: Object
					// metaData: Object
					// metaDataRow: Object
					// series: "Occurrences"
					// x: "May 20, 2015 12:00:00 AM"
					// y: 6__proto__: Object
					// dodge: Object
					// groupIndex: 1
					// numGroups: 2__proto__: Object
					// fill: "Occurrences"
					// panel: Class
					// x: "May 20, 2015 12:00:00 AM"
					// y: 6

					var mouseOverObject = {
						d: d,
						dataIndex: dataIndex,
						mouseEvent: mouseEvent,
						htmlElement: this
					};

					if (arguments.length === 5) {
						d = mouseOverObject.d;
						d = { data: {} };
						_.each(this.chart().data().data, function (o, k) {
							d.data[k] = o[dataIndex];
						});

						//["Saturday 30", 29, 898.6552239323357, Sat May 30 2015 00:00:00 GMT-0600 (MDT), MouseEvent]
						mouseOverObject.d = d;
						mouseOverObject.mouseEvent = mouseEvent2;
						mouseOverObject.inspector = this;
						mouseOverObject.htmlElement = null; // TODO, this should be the first element point in the selection.
					}

					self.parent._onMouseOver(mouseOverObject);
				});

				this.baseChart.on('mouseout', function () {
					self.parent._onMouseOut({});
				});

				if (_.get(window, 'adobe.tools.showVizOptions')) {
					console.log(this.name, this.baseChart._options); // Very useful for debugging.
				}

				if (analyticsConfig.serverRender) {
					this._serverRender();
				} else {
					this.baseChart.render(this.parent.animate);
				}

				self.parent._postRender();
				self.parent.setSelection(this);

				angular.element(this.element).data('chartOpts', this.opts);
			}
		}, {
			key: '_serverRender',
			value: function _serverRender() {
				var dvanimation = dv.ANIMATION;

				dv.ANIMATION = false;
				this.baseChart.render(false);
				dv.ANIMATION = dvanimation; // put things back the way we found them
			}
		}, {
			key: 'onUserAdd',
			value: function onUserAdd() {
				if (this.baseChart.onUserAdd) {
					this.baseChart.onUserAdd();
				}
			}
		}, {
			key: 'limit',
			get: function get() {
				return this.parent.limit; // pass through limit set on chart factory
			}
		}, {
			key: 'opts',
			get: function get() {
				// Never set the options on a chart instance.
				return this.parent.opts;
			}
		}, {
			key: 'configOpts',
			get: function get() {
				return this.parent.configOpts;
			}
		}, {
			key: 'dataMappings',
			get: function get() {
				// Never set the options on a chart instance.
				return this.parent.dataMappings;
			}
		}, {
			key: 'element',
			get: function get() {
				// Never set the options on a chart instance.
				return this.parent.element;
			}
		}, {
			key: '$element',
			get: function get() {
				// Never set the options on a chart instance.
				return this.parent.$element;
			}
		}, {
			key: 'd3Element',
			get: function get() {
				// Never set the options on a chart instance.
				return this.parent.d3Element;
			}
		}, {
			key: 'highlightByKeys',
			get: function get() {
				return false;
			}
		}, {
			key: 'highlightKeys',
			get: function get() {
				return this.dataMappings.y;
			}
		}, {
			key: 'ignoreLinkedSource',
			get: function get() {
				return false;
			}
		}, {
			key: 'sourceCoords',
			get: function get() {
				return this.parent.sourceCoords;
			}
		}, {
			key: 'targetCoords',
			get: function get() {
				return this.parent.targetCoords;
			}

			/*
    * sourceValue is calculated, so it's read-only
    */

		}, {
			key: 'sourceValue',
			get: function get() {
				return this.valueByCoords(this.sourceCoords);
			}

			/*
    * targetValue is calculated, so it's read-only
    */

		}, {
			key: 'targetValue',
			get: function get() {
				return this.valueByCoords(this.targetCoords);
			}
		}, {
			key: 'textContent',
			get: function get() {
				return this.parent.textContent;
			}
		}]);

		return ADViz;
	}(Model);

	return ADViz;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// THIS FILE IS DEPRECATED. IT IS ONLY USED FOR LEGACY CONTRIBUTION ANALYSIS

/*
	The charts should be more like views. They should take the data given to them, and then render properly.
	Methods can still be called on them, but all data should be stored up a level.

	Don't rely on setting critical options in constructor. The options can be wiped out completely. Better to do it when actually rendering.
	If the option is critical, and can't change, its not really an option.
	You can have a fast rerender and a slow render. Fast of screen resizes. Slow on data changes. For now you can just use the slower one.

	Since a chart instance can be wiped out whhen changing the chart type, the chart instance should look up to the factory for settings.

	If opts.formats are passed in, they will trump the metric formatter.
	If opts.formats are passed in, the precision is used from opts.precision.

	Metrics do not have to be supplied.

	Rows/metaDataRows look like this for each row. The * are required (series name and a 'value' inside of it)
	{
		Page Views*:
			value*: 676
			metaData: {
				cell: {}
				metric: {
					id: "metrics/pageviews"
					name: "Page Views"
					precision: 0
					type: "int"
				}
			}
		}
		Occurrences: {
			...
		}
		...
	}
*/

angular.module('common').factory('VizFactory', function (_, d3, dv, cloudViz, util, model, $window, $filter, $timeout, $compile, RankedResponse, DateService, dimensionService, $log, cls, moment) {
	var Model = analyticsui['core'].Model;
	var _analyticsui$model = analyticsui['model'],
	    VizDataItem = _analyticsui$model.VizDataItem,
	    VizDataProvider = _analyticsui$model.VizDataProvider;


	var ADViz = cls.import('ADViz'),
	    LineChart = cls.import('ADVizLine'),
	    ScatterPlotChart = cls.import('ADVizScatter'),
	    TreeMapChart = cls.import('ADVizTreemap'),
	    CREATION_STRATEGY_DEFAULT = '',
	    CREATION_STRATEGY_IGNORE = 'ignore',
	    CREATION_STRATEGY_NEW = 'new',
	    VISIBILITY_STRATEGY_VISIBLE = 'visible',
	    VISIBILITY_STRATEGY_HIDDEN = 'hidden',
	    DUPLICATION_STRATEGY_ATTACHED = 'attached',
	    DUPLICATION_STRATEGY_DETACHED = 'detached';

	var LinkedSourceStrategies = function (_Model) {
		_inherits(LinkedSourceStrategies, _Model);

		function LinkedSourceStrategies() {
			_classCallCheck(this, LinkedSourceStrategies);

			return _possibleConstructorReturn(this, (LinkedSourceStrategies.__proto__ || Object.getPrototypeOf(LinkedSourceStrategies)).apply(this, arguments));
		}

		_createClass(LinkedSourceStrategies, null, [{
			key: 'properties',
			value: function properties() {
				return {
					creation: { type: String, default: CREATION_STRATEGY_DEFAULT },
					visibility: { type: String, default: VISIBILITY_STRATEGY_VISIBLE },
					selfDuplication: { type: String, default: DUPLICATION_STRATEGY_DETACHED }
				};
			}
		}]);

		return LinkedSourceStrategies;
	}(Model);

	/*
  * VizFactory provides a single interface for using many different types of charts. You call
  * methods or set options on VizFactory and it will pass the message along to the underlying
  * chart instance (i.e. the `State` software pattern).
  *
  * Chart Interface Methods: Pass-through methods to the current baseChart instance
  * - render
  *
  * Chart Interface Properties: Pass-through properties to the current baseChart instance
  * - vizType
  * - animate
  * - opts
  *
  * VizFactory Properties
  * - adVizInstance: A wrapper class for CloudViz charts providing methods convinient for our
  *   				  apps, but that wouldn't make sense in CloudViz. Most of what you'll be doing
  *   				  with this class will be through the VizFactory interface, but it's
  *   				  provided nonetheless.
  *
  * - baseChartInstance: the CloudViz or SpecialtyViz chart
  */


	var VizFactory = function (_Model2) {
		_inherits(VizFactory, _Model2);

		_createClass(VizFactory, null, [{
			key: 'properties',
			value: function properties() {
				return {
					chartConfigs: { type: Object, default: Object },
					linkedSourceStrategies: { type: LinkedSourceStrategies, ensureExists: true, transient: true },
					animate: { type: Boolean, default: false },
					limit: Number,
					errorMessage: String,
					opts: { type: Object, default: Object },
					configOpts: { type: Object, default: Object },
					element: { type: Object },
					vizType: { type: String, enum: ['line', 'scatter', 'treemap'], default: 'line' },
					adVizInstance: ADViz,
					sourceCoords: String,
					targetCoords: String,
					textContent: String
				};
			}
		}, {
			key: 'fields',
			value: function fields() {
				return ['processData', 'preRender', 'postRender', 'onMouseOver', 'onMouseOut', 'onSelection', 'setSelection', 'render'];
			}
		}]);

		function VizFactory(data, config) {
			_classCallCheck(this, VizFactory);

			var _this2 = _possibleConstructorReturn(this, (VizFactory.__proto__ || Object.getPrototypeOf(VizFactory)).call(this, data, config));

			_this2.processData = function () {};
			_this2.preRender = function () {};
			_this2.postRender = function () {};
			_this2.onMouseOver = function () {};
			_this2.onMouseOut = function () {};
			_this2.onSelection = function () {};
			_this2.setSelection = function () {};

			_this2.render = function () {
				this.adVizInstance.render();
				this.emit('render');
			};
			_this2.render = _.debounce(_this2.render.bind(_this2), 50);

			_this2._createChart(_.get(data, 'vizType'));

			_this2._initLinkedSourceStrategies();

			var self = _this2;
			_this2.on('change', function (e) {
				if (e.property === 'vizType') {
					self._createChart(self.vizType);
				} else if (e.property === 'opts' || e.property === 'configOpts') {
					if (!this.adVizInstance) {
						return;
					}

					var newFormats = _.get(e, 'newValue.formats'),
					    oldFormats = _.get(e, 'oldValue.formats');

					if (newFormats !== oldFormats) {
						this.adVizInstance._updateFormat(newFormats, oldFormats);
					}
				}
			});
			return _this2;
		}

		_createClass(VizFactory, [{
			key: 'destroy',
			value: function destroy() {}
		}, {
			key: 'getOption',
			value: function getOption(optionName) {
				return this.opts[optionName];
			}
		}, {
			key: 'setOption',
			value: function setOption(optionName, optionValue) {
				this.emit('setOption', {
					property: optionName,
					oldValue: this.getOption(optionName),
					newValue: optionValue
				});

				this.opts[optionName] = optionValue;
			}
		}, {
			key: 'getConfigOption',
			value: function getConfigOption(optionName) {
				return this.configOpts[optionName];
			}
		}, {
			key: 'setConfigOption',
			value: function setConfigOption(optionName, optionValue) {
				this.emit('setConfigOption', {
					property: optionName,
					oldValue: this.getConfigOption(optionName),
					newValue: optionValue
				});

				this.configOpts[optionName] = optionValue;
			}
		}, {
			key: 'supportsFeature',
			value: function supportsFeature(featureName) {
				return this.adVizInstance.supportsFeature(featureName);
			}
		}, {
			key: 'getNumSeries',
			value: function getNumSeries() {
				return _.get(this, 'dataMappings.y.length') || 0;
			}
		}, {
			key: '_processData',
			value: function _processData() {
				this.adVizInstance._processData();
				this.processData(this.adVizInstance);
				this.emit('processData');
			}
		}, {
			key: '_preRender',
			value: function _preRender() {
				this.adVizInstance._preRender();
				this.preRender(this.adVizInstance);
				this.emit('preRender');
			}
		}, {
			key: 'format',
			value: function format(type, options) {
				return this.adVizInstance.format(type, options);
			}
		}, {
			key: 'onUserAdd',
			value: function onUserAdd() {
				this.adVizInstance.onUserAdd();
			}
		}, {
			key: 'unhighlightData',
			value: function unhighlightData() {
				this.adVizInstance.unhighlightData();
			}
		}, {
			key: 'highlightChart',
			value: function highlightChart(ids) {
				this.adVizInstance.highlightChart(ids);
			}
		}, {
			key: '_postRender',
			value: function _postRender() {
				this.adVizInstance._postRender();
				this.postRender(this.adVizInstance);
				this.emit('postRender');
			}
		}, {
			key: '_onMouseOver',
			value: function _onMouseOver(mouseOverObject) {
				this.adVizInstance._onMouseOver(mouseOverObject);
				this.onMouseOver(mouseOverObject, this.adVizInstance);
			}
		}, {
			key: '_onMouseOut',
			value: function _onMouseOut(mouseOutObject) {
				this.adVizInstance._onMouseOut(mouseOutObject);
				this.onMouseOut(mouseOutObject, this.adVizInstance);
			}
		}, {
			key: '_onSelection',
			value: function _onSelection(selectionObject) {
				this.adVizInstance._onSelection(selectionObject);
				this.onSelection(selectionObject, this.adVizInstance);
			}
		}, {
			key: '_initLinkedSourceStrategies',
			value: function _initLinkedSourceStrategies() {
				switch (this.vizType) {
					case 'textdisplay':
						this.linkedSourceStrategies.creation = VizFactory.CREATION_STRATEGY_IGNORE;
						break;
					case 'venn':
					case 'histogram':
						this.linkedSourceStrategies.creation = VizFactory.CREATION_STRATEGY_NEW;
						this.linkedSourceStrategies.visibility = VizFactory.VISIBILITY_STRATEGY_HIDDEN;
						this.linkedSourceStrategies.selfDuplication = VizFactory.DUPLICATION_STRATEGY_ATTACHED;
						break;
				}
			}

			/**
    * Creates a chart with the given chart type and adModel data
    *
    * @param type the chart type
    * @param options the data and other options for the chart
    */

		}, {
			key: '_createChart',
			value: function _createChart(type, options) {
				var ChartClass = null;

				if (!type) {
					type = 'line';
				}

				var chartConfig = {};

				switch (type) {
					case 'line':
						ChartClass = LineChart;
						chartConfig = {
							itemType: 'visualization',
							vizType: 'line',
							icon: 'graphTrend',
							opts: { interactive: true }
						};
						break;
					case 'scatter':
						ChartClass = ScatterPlotChart;
						chartConfig = {
							itemType: 'visualization',
							vizType: 'scatter',
							icon: 'graphScatter',
							opts: { interactive: true }
						};
						break;
					case 'treemap':
						ChartClass = TreeMapChart;
						chartConfig = {
							itemType: 'visualization',
							vizType: 'treemap',
							icon: 'graphTree',
							opts: { interactive: true }
						};
						break;
				}

				this.opts = chartConfig.opts || {};
				chartConfig = _.omit(chartConfig, ['opts']); // opts is a read-only property on ADViz (it's a passthrough to chart factory), so we must filter it out

				var chart = new ChartClass(chartConfig);

				chart.parent = this;
				this.adVizInstance = chart;
			}
		}, {
			key: 'supportsAnomalies',
			get: function get() {
				return this.adVizInstance.supportedFeatures.showAnomalies;
			}
		}, {
			key: 'skipInitialRender',
			get: function get() {
				return this.adVizInstance.skipInitialRender;
			},
			set: function set(value) {
				this.adVizInstance.skipInitialRender = value;
			}
		}, {
			key: 'supportedFeatures',
			get: function get() {
				return this.adVizInstance.supportedFeatures;
			}
		}, {
			key: '$element',
			get: function get() {
				return $(this.element);
			}
		}, {
			key: 'd3Element',
			get: function get() {
				return d3.select(this.element);
			}
		}, {
			key: 'dataMappings',
			get: function get() {
				return this.dataProvider.mappings;
			},
			set: function set(value) {
				this.dataProvider.mappings = value;
			}
		}, {
			key: 'description',
			get: function get() {
				return this.adVizInstance.description;
			},
			set: function set(value) {
				this.adVizInstance.description = value;
			}
		}, {
			key: 'name',
			get: function get() {
				return this.adVizInstance.name;
			},
			set: function set(value) {
				this.adVizInstance.name = value;
			}
		}, {
			key: 'baseChartInstance',
			get: function get() {
				return this.adVizInstance.baseChart;
			}
		}, {
			key: 'dvChartInstance',
			get: function get() {
				return this.adVizInstance.baseChart.getChart();
			}
		}, {
			key: 'sourceValue',
			get: function get() {
				return this.adVizInstance.sourceValue;
			}
		}, {
			key: 'targetValue',
			get: function get() {
				return this.adVizInstance.targetValue;
			}
		}, {
			key: 'highlightByKeys',
			get: function get() {
				return this.adVizInstance.highlightByKeys;
			}
		}, {
			key: 'highlightKeys',
			get: function get() {
				return this.adVizInstance.highlightKeys;
			}
		}, {
			key: 'ignoreLinkedSource',
			get: function get() {
				return this.adVizInstance.ignoreLinkedSource;
			}
		}, {
			key: 'dataProvider',
			get: function get() {
				return this.adVizInstance.dataProvider;
			},
			set: function set(value) {
				this.adVizInstance.dataProvider = value;
			}
		}]);

		return VizFactory;
	}(Model);

	VizFactory.formatFromRankedRequest = function (data, request, metrics, dataMappings) {
		var rankedResponse = new RankedResponse();
		rankedResponse.populate(data, request, metrics);

		var linkedResponse = new VizDataProvider();

		linkedResponse.rows = _.map(rankedResponse.rows, function (row) {
			var newRow = {};
			_.each(row.cells, function (cell, index) {
				// may need to use columnId , but dimension will always have __ROW_COMPONENT__ for the col id.
				newRow[cell.component.columnId] = new VizDataItem({ // This MUST match the mapping value. For example, if mappings: y:['Page Views'] then this should be 'Page Views'
					value: cell.format('VizFactory'),
					metric: cell.component
				});
			});
			return newRow;
		});
		linkedResponse.mappings = dataMappings;
		return linkedResponse;
	};

	VizFactory.CREATION_STRATEGY_DEFAULT = CREATION_STRATEGY_DEFAULT;
	VizFactory.CREATION_STRATEGY_NEW = CREATION_STRATEGY_NEW;
	VizFactory.CREATION_STRATEGY_IGNORE = CREATION_STRATEGY_IGNORE;
	VizFactory.VISIBILITY_STRATEGY_VISIBLE = VISIBILITY_STRATEGY_VISIBLE;
	VizFactory.VISIBILITY_STRATEGY_HIDDEN = VISIBILITY_STRATEGY_HIDDEN;
	VizFactory.DUPLICATION_STRATEGY_ATTACHED = DUPLICATION_STRATEGY_ATTACHED;
	VizFactory.DUPLICATION_STRATEGY_DETACHED = DUPLICATION_STRATEGY_DETACHED;

	return VizFactory;
});
'use strict';

angular.module('common').directive('adAnimationBegin', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var fn;

			function onAnimationStart(event) {
				fn = fn || $parse(attrs.adAnimationBegin);
				util.safeApply(scope, fn, { $event: event });
			}

			function getAnimationEvent() {
				var a,
				    el = element.get(0),
				    animations = {
					'WebkitAnimation': 'webkitAnimationStart',
					'MozAnimation': 'animationstart',
					'MSAnimation': 'MSAnimationStart',
					'OAnimation': 'oanimationstart',
					'animation': 'animationstart'
				};

				for (a in animations) {
					if (el.style[a] !== undefined) {
						return animations[a];
					}
				}

				return 'animationstart';
			}

			element.on(getAnimationEvent(), onAnimationStart);
		}
	};
});
'use strict';

angular.module('common').directive('adAnimationFinish', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var fn;

			function onAnimationEnd(event) {
				fn = fn || $parse(attrs.adAnimationFinish);
				util.safeApply(scope, fn, { $event: event });
			}

			function getAnimationEvent() {
				var a,
				    el = element.get(0),
				    animations = {
					'WebkitAnimation': 'animationend',
					'MozAnimation': 'animationend',
					'MSAnimation': 'MSAnimationEnd',
					'OAnimation': 'oanimationend',
					'animation': 'animationend'
				};

				for (a in animations) {
					if (el.style[a] !== undefined) {
						return animations[a];
					}
				}

				return 'animationend';
			}

			element.on(getAnimationEvent(), onAnimationEnd);
		}
	};
});
'use strict';

angular.module('common').directive('adAnimationUnsupported', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {

			function getAnimationEvent() {
				var a,
				    el = element.get(0),
				    animations = {
					'WebkitAnimation': 'webkitAnimationEnd',
					'MozAnimation': 'animationend',
					'MSAnimation': 'MSAnimationEnd',
					'OAnimation': 'oanimationend',
					'animation': 'animationend'
				};

				for (a in animations) {
					if (el.style[a] !== undefined) {
						return animations[a];
					}
				}

				return null;
			}

			if (!getAnimationEvent()) {
				var fn = fn || $parse(attrs.adAnimationUnsupported);
				util.safeApply(scope, fn, { $event: event });
			}
		}
	};
});
'use strict';

angular.module('common').directive('adClickOutside', function ($document, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, elem, attr) {
			var onClick = function onClick(event) {
				// If the target that was clicked on is not the element or any nested child
				// then the click happened outside the element. This is useful for checking
				// if a popup should be closed due to clicking outside.
				if (!scope.$$phase && !scope.$root.$$phase && elem.is(':visible') && !elem.is(event.target) && elem.find(event.target).length === 0) {
					var fn = $parse(attr.adClickOutside);
					scope.$apply(function () {
						fn(scope, { $event: event });
					});
				}
			};

			$document.on('click', onClick);

			scope.$on('$destroy', function () {
				$document.off('click', onClick);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adContentChanged', function ($parse, util, $window, CUI) {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs) {
			var fn, timeoutId;

			function onContentChanged(event) {
				if (timeoutId > -1) {
					$window.clearTimeout(timeoutId);
				}
				timeoutId = $window.setTimeout(applyContentChanged, 50, [event]);
			}

			function applyContentChanged(event) {
				fn = fn || $parse($attrs.adContentChanged);
				util.safeApply($scope, fn, { $event: event });
				$element.get(0).dispatchEvent(new CustomEvent('adContentChanged'));
			}

			//
			// MutationObserver or MutationEvents (when MutationObserver isn't supported)
			if (typeof MutationObserver !== 'undefined') {
				addMutationObserver(onContentChanged);
			} else {
				addMutationEvents(onContentChanged);
			}

			function addMutationObserver(fn) {
				var contentChangedObserverConfig = {
					attributes: true,
					characterData: true,
					subtree: true
				};
				var subtreeChangedObserverConfig = {
					childList: true,
					subtree: true
				};

				var contentChangedObserver = new MutationObserver(onContentChanged);

				//
				// Create two observer configurations, otherwise the observer triggers itself causing an infinite loop
				contentChangedObserver.observe($element[0], contentChangedObserverConfig);
				contentChangedObserver.observe($element[0], subtreeChangedObserverConfig);

				$scope.$on('$destroy', function () {
					contentChangedObserver.disconnect();
				});
			}

			function addMutationEvents(fn) {
				//Listen for changes to the dom within the child.
				$element.on('DOMNodeInserted DOMNodeRemoved DOMCharacterDataModified DOMSubtreeModified DOMAttrModified', fn);

				//Cleanup event listeners when the scope is destroyed.
				$scope.$on('$destroy', function () {
					$element.off('DOMNodeInserted DOMNodeRemoved DOMCharacterDataModified DOMSubtreeModified DOMAttrModified', fn);
				});
			}
		}
	};
});
'use strict';

angular.module('common').directive('adContextMenu', function ($parse, trackService) {
	return function (scope, element, attrs) {
		var fn = $parse(attrs.adContextMenu),
		    rightClickTarget = attrs.trackRightClickTarget;
		function onContextMenu(e) {
			trackService.trackAction(null, 'Right Click', {
				target: rightClickTarget
			});
			if (e.altKey) {
				return;
			} // To disable the right click, use shift right click.
			scope.$apply(function () {
				e.preventDefault();
				e.stopPropagation();
				fn(scope, { $event: e, element: element });
			});
		}

		element.on('contextmenu', onContextMenu);

		scope.$on('$destroy', function () {
			element.off('contextmenu', onContextMenu);
		});
	};
});
'use strict';

angular.module('common').directive('adEnter', function ($parse, util) {
	return {
		restrict: 'A',
		link: function link(scope, elem, attr) {
			var fn;
			var keydownPressed = false;

			function onKeyUp(event) {
				if (keydownPressed && event.keyCode == 13) {
					event.preventDefault();
					fn = fn || $parse(attr.adEnter);
					util.safeApply(scope, fn, { $event: event });
				}
				keydownPressed = false;
			}

			//IE fix to prevent enter performing the system default (which is typically performing a click on some other element).
			function onKeyDown(event) {
				keydownPressed = true;
				if (event.keyCode == 13) {
					event.preventDefault();
				}
			}

			//Add keyup event listener
			elem.on('keyup', onKeyUp);
			elem.on('keydown', onKeyDown);

			scope.$on('$destroy', function () {
				elem.off('keyup', onKeyUp);
				elem.off('keydown', onKeyDown);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adEscape', function ($parse, util) {
	return {
		restrict: 'A',
		link: function link(scope, elem, attr) {
			var fn;

			function onKeyUp(event) {
				if (event.keyCode == 27) {
					event.preventDefault();
					fn = fn || $parse(attr.adEscape);
					util.safeApply(scope, fn, { $event: event });
				}
			}

			//Add keyup event listener
			elem.on('keyup', onKeyUp);

			scope.$on('$destroy', function () {
				elem.off('keyup', onKeyUp);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adGlobalKeydown', function ($parse, $window, util) {
	return {
		restrict: 'A',
		link: function link(scope, element, attr) {
			var fn;

			$($window.document).on('keydown', function (event) {
				fn = fn || $parse(attr.adGlobalKeydown);
				util.safeApply(scope, fn, { $event: event });
			});
		}
	};
});
'use strict';

// set ad-indeterminate standalone on the dom element
// set ng-model on the dom element to the model value for the following states:
// - boolean true (checked)
// - string 'indeterminate' (indeterminate)
// - boolean false (unchecked)
// if the checkbox is clicked on from an indeterminate state, it will go to checked.  From there on, it will toggle between unchecked/checked.
// you can retrieve the model value (true|'indeterminate'|false) at any time by accessing the scope variable passed into ng-model


angular.module('common').directive('adIndeterminate', function () {
	return {
		require: 'ngModel', /* ng-model attribute must be set on the dom element */
		link: function link(scope, element, attrs, ngModel) {
			// retrieve the ng-model value and set the checkbox state appropriately
			// NOTE:  could provide an option for a one-time watch
			scope.$watch(function () {
				return ngModel.$modelValue;
			}, function (model) {
				if (model === true) {
					// checked
					element.data('checked', 2);
					element.prop('indeterminate', false);
					element.prop('checked', true);
				} else if (model === 'indeterminate') {
					// indeterminate
					element.data('checked', 1);
					element.prop('indeterminate', true);
					element.prop('checked', false);
				} else {
					/* model === false */ // unchecked
					element.data('checked', 0);
					element.prop('indeterminate', false);
					element.prop('checked', false);
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('adMousewheel', function ($parse, util) {
	//Angular will have an ng-blur event in 1.1.3 which is not yet out in
	//a stable version. Until then this is our own blur event.
	return {
		restrict: 'A',
		link: function link(scope, elem, attr) {
			var fn;

			function onMousewheel(event) {
				fn = fn || $parse(attr.adMousewheel);
				util.safeApply(scope, fn, { $event: event });
			}

			//Add blur event listener
			elem.on('mousewheel', onMousewheel);
			scope.$on('$destroy', function () {
				elem.off('mousewheel', onMousewheel);
			});
		}
	};
});
'use strict';

(function ($, _) {
	$.fn.adResize = function (params) {
		var domEl = this[0];
		if (!domEl) {
			return;
		}
		var fn = _.get(params, 'onResize', _.noop);
		var canAttachEvent, canDetachEvent;
		canAttachEvent = canDetachEvent = typeof document.attachEvent != 'undefined';
		var ieRegExp = new RegExp('Trident\\/([0-9]{1,}[\\.0-9]{0,})');
		var isIE = ieRegExp.test(window.navigator.userAgent);
		var DEBOUNCE_TIMEOUT = 50;
		var listenerFn = _.debounce(fn, DEBOUNCE_TIMEOUT);

		domEl._resizeHandler = listenerFn;
		if (canAttachEvent) {
			domEl.attachEvent('onresize', listenerFn);
		} else {
			//
			//USE INSERTED OBJECT ELEMENT TO LISTEN FOR ELEMENT RESIZE
			var resizeListener = domEl._resizeElement;
			if (resizeListener && resizeListener.contentDocument && resizeListener.contentDocument.defaultView) {
				resizeListener.contentDocument.defaultView.addEventListener('resize', listenerFn);
			} else {
				var resizeElm = document.createElement('object');
				resizeElm.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1; opacity: 0');
				resizeElm.type = 'text/html';
				resizeElm.onload = function () {
					resizeElm.contentDocument.defaultView.addEventListener('resize', listenerFn);
					domEl.resizerLoaded = true;
				};

				//Yay for different behavior when you add about:blank as a data attribute!!!!
				if (isIE) {
					domEl.appendChild(resizeElm);
				}
				resizeElm.data = 'about:blank';
				if (!isIE) {
					domEl.appendChild(resizeElm);
				}

				domEl._resizeElement = resizeElm;
			}
		}

		this.on('destroy', function () {
			//
			// Exit if there's no resizeListener to remove the event from
			if (!domEl._resizeElement || !domEl.resizerLoaded) {
				return;
			}

			if (canDetachEvent) {
				domEl.detachEvent(domEl._resizeHandler);
			} else {
				var contentDocument = domEl._resizeElement.contentDocument;

				if (contentDocument && contentDocument.defaultView) {
					contentDocument.defaultView.removeEventListener('resize', domEl._resizeHandler);
				}
			}
		});
	};
})(jQuery, window._);

angular.module('common').directive('adResize', function ($parse, util) {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs) {
			$element.adResize({
				onResize: function onResize() {
					var fn = $scope.$eval($attrs.adResize);
					$scope.$evalAsync(fn);
					// Dispatch the event for those not directly utilzing the directive. 
					$element.get(0).dispatchEvent(new CustomEvent('adResize'));
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('adScroll', function ($parse, util) {
	return {
		restrict: 'A',
		link: function link(scope, elem, attr) {
			var fn;

			function onScroll(event) {
				fn = fn || $parse(attr.adScroll);
				util.safeApply(scope, fn, { $event: event });
			}

			//Add keyup event listener
			elem.on('scroll', onScroll);
			scope.$on('$destroy', function () {
				elem.off('scroll', onScroll);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adTransitionBegin', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			console.log('inside adTransitionStart link function');
			var fn;

			function onTransitionStart(event) {
				fn = fn || $parse(attrs.adTransitionBegin);
				util.safeApply(scope, fn, { $event: event });
			}

			function getTransitionEvent() {
				var t,
				    el = element.get(0),
				    transitions = {
					'WebkitTransition': 'webkitTransitionStart',
					'MozTransition': 'transitionstart',
					'MSTransition': 'msTransitionStart',
					'OTransition': 'oTransitionStart',
					'transition': 'transitionstart'
				};

				for (t in transitions) {
					if (el.style[t] !== undefined) {
						return transitions[t];
					}
				}

				return null;
			}

			element.on(getTransitionEvent(), onTransitionStart);
		}
	};
});
'use strict';

angular.module('common').directive('adTransitionFinish', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			console.log('inside adTransitionEnd link');
			var fn;

			function onTransitionEnd(event) {
				fn = fn || $parse(attrs.adTransitionFinish);
				util.safeApply(scope, fn, { $event: event });
			}

			function getTransitionEvent() {
				var t,
				    el = element.get(0),
				    transitions = {
					'WebkitTransition': 'webkitTransitionEnd',
					'MozTransition': 'transitionend',
					'MSTransition': 'msTransitionEnd',
					'OTransition': 'oTransitionEnd',
					'transition': 'transitionend'
				};

				for (t in transitions) {
					if (el.style[t] !== undefined) {
						return transitions[t];
					}
				}

				return null;
			}

			element.on(getTransitionEvent(), onTransitionEnd);
		}
	};
});
'use strict';

angular.module('common').directive('adTransitionUnsupported', function (util, $parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {

			function getTransitionEvent() {
				var t,
				    el = element.get(0),
				    transitions = {
					'WebkitTransition': 'webkitTransitionEnd',
					'MozTransition': 'transitionend',
					'MSTransition': 'msTransitionEnd',
					'OTransition': 'oTransitionEnd',
					'transition': 'transitionend'
				};

				for (t in transitions) {
					if (el.style[t] !== undefined) {
						return transitions[t];
					}
				}

				return null;
			}

			if (!getTransitionEvent()) {
				var fn = fn || $parse(attrs.adTransitionUnsupported);
				util.safeApply(scope, fn, { $event: event });
			}
		}
	};
});
'use strict';

angular.module('common').directive('adActionBarButton', function ($timeout) {
	return {
		restrict: 'EA',
		replace: true,
		transclude: true,
		templateUrl: 'adobe/shell/directives/ad-action-bar-button.tpl.html',
		scope: {
			icon: '@',
			iconId: '@?',
			getIcon: '&' // Use this for icons that change dynamically like the Favorite star.
		},
		link: function link(scope, element, attrs) {
			//Don't overwrite a tooltip that was already added through markup.
			if (!element.attr('tooltip')) {
				$timeout(function () {
					//Set a tooltip that is the same as the transcluded text that was passed in.
					var tooltip = $.trim(element.text());
					if (tooltip && !attrs.dataTitle) {
						// only add native title attribute if data-title is not set
						element.attr('title', tooltip);
					}

					if (scope.iconId) {
						element.find('.coral-Icon').attr('id', scope.iconId);
					}
				});
			}
		}
	};
});
'use strict';

angular.module('common').directive('adActionBarObserver', function ($parse, util) {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs) {
			var iconsOnlyClass = 'icons-only';

			$scope.onActionBarChanged = function () {
				fixActionBarDisplay();
			};

			//
			// Add css class when buttons are too wide to fit in width.
			function fixActionBarDisplay() {
				if (buttonsTooWide()) {
					$element.addClass(iconsOnlyClass);
				} else {
					$element.removeClass(iconsOnlyClass);
					// Detect false negative
					if (buttonsTooWide()) {
						$element.addClass(iconsOnlyClass);
					}
				}
			}

			function buttonsTooWide() {
				var paddingPixels = 15,
				    elemWidths = sumWidths(),
				    containerWidth = $element.outerWidth() - paddingPixels;
				return elemWidths > containerWidth;
			}

			function sumWidths() {
				var combinedButtonWidth = 0,
				    children,
				    left,
				    right,
				    calendar;

				calendar = $element.find('#calendar-widget-content');
				right = $element.find('.shell-ActionBar-right').children(':visible');
				left = $element.find('.shell-ActionBar-left').children(':visible');

				children = left.add(right).add(calendar);

				children.each(function (i, buttonItem) {
					var $btn = angular.element(buttonItem);
					combinedButtonWidth += $btn.outerWidth();
				});

				//return a value so we can $scope.$watch for changes
				return combinedButtonWidth;
			}
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('adInnerRailToggled', function ($parse, util, CUI) {
		return {
			restrict: 'A',
			link: function link(scope, elem, attr) {

				$(document.body).on('leftRailPanelIndexChange rightRailPanelIndexChange', function (event) {
					var leftRailId = '',
					    rightRailId = '';
					if (event.type == 'leftRailPanelIndexChange') {
						leftRailId = event.originalEvent.detail.activePanelId;
					} else {
						rightRailId = event.originalEvent.detail.activePanelId;
					}

					var fn = fn || $parse(attr.adInnerRailToggled);
					util.safeApply(scope, fn, {
						$event: event,
						leftRailId: leftRailId,
						rightRailId: rightRailId
					});
				});
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adRailTabNavigator', function ($timeout, trackService) {
	return {
		templateUrl: 'adobe/shell/directives/ad-rail-tab-navigator.tpl.html',
		restrict: 'EA',
		replace: true,
		transclude: true,
		link: function link(scope, element, attrs) {
			scope.railTabs = [];

			$timeout(function () {
				element.find('.rail-tab-container').each(function (idx, elm) {
					var $elm = $(elm);

					var tabClass = $elm.attr('tab-class');
					if (tabClass.indexOf('coral-Icon--') === -1) {
						tabClass = 'coral-Icon--' + tabClass;
					}

					scope.railTabs.push({
						tabClass: tabClass,
						tooltip: $elm.attr('tab-description')
					});
				});

				//Set the current tab index
				scope.tabIndex = attrs.currentTabIndex ? parseInt(attrs.currentTabIndex) : 0;

				//Set the currently active tab.
				var $tabContainer = element.find('.rail-tab-container:nth-child(' + (scope.tabIndex + 1) + ')');
				$tabContainer.addClass('active');
				$tabContainer.get(0).dispatchEvent(new CustomEvent('tabActivated'));

				//Set the currently active icon
				scope.activeTab = scope.railTabs[scope.tabIndex];

				// Track initial state of tab
				trackService.trackAction(null, 'DraggableStack::Load', {
					activeTab: removeCoralPrefix(scope.activeTab.tabClass)
				});
			});

			scope.onTabClick = function (icon, index) {

				trackService.trackAction(null, 'DraggableStack::TabChange', {
					oldTab: removeCoralPrefix(scope.activeTab.tabClass),
					activeTab: removeCoralPrefix(icon.tabClass)
				});

				if (index !== scope.tabIndex) {
					//Hide the current tab DOM element
					element.find('.rail-tab-container:nth-child(' + (scope.tabIndex + 1) + ')').removeClass('active');

					//Update the current activeTab.
					scope.activeTab = icon;

					//Update
					scope.tabIndex = index;

					var $tabContainer = element.find('.rail-tab-container:nth-child(' + (scope.tabIndex + 1) + ')');
					$tabContainer.addClass('active');
					$tabContainer.get(0).dispatchEvent(new CustomEvent('tabActivated'));
				}
			};

			function removeCoralPrefix(tabClass) {
				return tabClass.replace('coral-Icon--', '');
			}
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').factory('shellService', function (_, $window) {
		return {
			getTitle: function getTitle() {
				return $window.document.title || $('.sc-report-name').text();
			},
			setTitle: function setTitle(value) {
				$window.document.title = value;
				$('.sc-report-name').text(value);
				$('.fullscreen-toolbar .toolbar-title').text(value);
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').service('cloudViz', function ($window) {
	//Return a local instance of the CUI object so that we are not using the one within the global namespace.
	return $window['cloudViz'];
});
'use strict';

angular.module('common').service('CUI', function ($window) {
	//Return a local instance of the CUI object so that we are not using the one within the global namespace.
	return $window['CUI'];
});
'use strict';

angular.module('common').service('d3', function ($window) {
	//Return a local instance of the CUI object so that we are not using the one within the global namespace.
	return $window['d3'];
});
'use strict';

angular.module('common').service('dv', function ($window) {
	//Return a local instance of the CUI object so that we are not using the one within the global namespace.
	return $window['dv'];
});
'use strict';

angular.module('common').controller('widgetBaseCtrl', function ($scope, $element, $attrs) {
	$scope.setDefaults = function (defaults) {
		// Set the scope defaults for the attributes that were not provided
		for (var attribute in defaults) {
			//Make sure the object does not exist on the prototype.
			if (defaults.hasOwnProperty(attribute)) {
				setDefaultAttribute(attribute, defaults[attribute]);
			}
		}
	};

	function setDefaultAttribute(attribute, defaultVal) {
		// We have to set the attributes this way to avoid an interpolation error
		// This error is caused when binding variables are initially undefined
		$attrs.$observe(attribute, function (val) {
			if (typeof val === 'undefined') {
				$scope[attribute] = defaultVal;
			}
		});
	}
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('ChangeIndicatorService', function (_, util, $window, $filter, POLARITY) {
	var Model = analyticsui['core'].Model;

	var UP = 'up',
	    DOWN = 'down',
	    POSITIVE = POLARITY.POSITIVE,
	    NEGATIVE = POLARITY.NEGATIVE,
	    DAY_SHORT = $filter('l10n')(['dayOverDayAbbreviation', 'DOD']),
	    DAY_LONG = $filter('l10n')(['dayOverDay', 'vs. yesterday']),
	    WEEK_SHORT = $filter('l10n')(['weekOverWeekAbbreviation', 'WOW']),
	    WEEK_LONG = $filter('l10n')(['weekOverWeek', 'vs. last week']),
	    MONTH_SHORT = $filter('l10n')(['monthOverMonthAbbreviation', 'MOM']),
	    MONTH_LONG = $filter('l10n')(['monthOverMonth', 'vs. last month']),
	    YEAR_SHORT = $filter('l10n')(['yearOverYearAbbreviation', 'YOY']),
	    YEAR_LONG = $filter('l10n')(['yearOverYear', 'vs. last year']),
	    TIME_INTERVAL_LABELS = {
		'day': { short: DAY_SHORT, long: DAY_LONG },
		'week': { short: WEEK_SHORT, long: WEEK_LONG },
		'month': { short: MONTH_SHORT, long: MONTH_LONG },
		'year': { short: YEAR_SHORT, long: YEAR_LONG }
	};

	var ChangeIndicator = function (_Model) {
		_inherits(ChangeIndicator, _Model);

		_createClass(ChangeIndicator, null, [{
			key: 'properties',
			value: function properties() {
				return {
					sourceValue: Number,
					targetValue: Number,
					displayType: String,
					percentChanged: Number,
					polarity: { type: String, enum: [POSITIVE, NEGATIVE], default: POSITIVE },
					timeInterval: String,
					direction: { type: String, enum: [UP, DOWN], default: UP },
					timeIntervalLabelAbbreviation: String,
					timeIntervalLabel: String
				};
			}
		}]);

		function ChangeIndicator(data, config) {
			_classCallCheck(this, ChangeIndicator);

			return _possibleConstructorReturn(this, (ChangeIndicator.__proto__ || Object.getPrototypeOf(ChangeIndicator)).call(this, data, config));
		}

		_createClass(ChangeIndicator, [{
			key: 'calculateChangeValues',
			value: function calculateChangeValues() {

				var delta = this.targetValue - this.sourceValue;
				var direction = delta >= 0 ? ChangeIndicator.UP : ChangeIndicator.DOWN;
				var valueChanged = void 0,
				    timeIntervalLabel = void 0,
				    percentChanged = void 0;

				if (this.timeInterval) {
					this.timeIntervalLabelAbbreviation = TIME_INTERVAL_LABELS[this.timeInterval].short;
					timeIntervalLabel = TIME_INTERVAL_LABELS[this.timeInterval].long;
				}

				if (this.displayType == 'change') {
					valueChanged = this.sourceValue === 0 ? 0 : Math.abs(delta / this.sourceValue * 100);
				} else if (this.displayType == 'difference') {
					valueChanged = delta;
				}

				if (this.sourceValue === 0) {
					percentChanged = 0;
				} else {
					percentChanged = Math.abs(delta / this.sourceValue * 100);
				}

				return { direction: direction, valueChanged: valueChanged, percentChanged: percentChanged, timeIntervalLabel: timeIntervalLabel };
			}
		}]);

		return ChangeIndicator;
	}(Model);

	ChangeIndicator.UP = UP;
	ChangeIndicator.DOWN = DOWN;
	ChangeIndicator.POSITIVE = POSITIVE;
	ChangeIndicator.NEGATIVE = NEGATIVE;

	return ChangeIndicator;
});
'use strict';

angular.module('common').factory('DateService', [function () {
	var dateService = analyticsui['core'].dateService;

	return dateService;
}]);
'use strict';

angular.module('common').factory('downloadService', function (appModel) {
	var downloadFile = analyticsui['ui'].downloadFile;

	return {
		download: function download(params) {
			return downloadFile(appModel, params);
		}
	};
});
'use strict';

angular.module('common').factory('OmniDateService', function () {
	var OmniDate = analyticsui['core'].OmniDate;

	return OmniDate;
});
'use strict';

(function ($) {
	angular.module('common').directive('adAlert', function () {
		return {
			restrict: 'EA',
			replace: true,
			templateUrl: 'adobe/widgets/directives/ad-alert.tpl.html',
			scope: {
				variant: '=',
				heading: '=',
				text: '=',
				link: '=?',
				itemIndex: '=?',
				removeItem: '&?',
				closable: '=?'
			},
			link: function link(scope, element) {

				scope.executeAction = function () {
					if (scope.link.action) {
						scope.link.action();
					} else {
						var form = angular.element('<form method="GET" action="' + scope.link.href + '" target="_blank">' + '	<input type="hidden" name="artifactType" value="pdf" />' + '</form>').appendTo('body');
						form.submit();
						form.remove();
					}
				};

				if (typeof scope.closable == 'undefined') {
					scope.closable = true;
				}

				scope.props = { variant: scope.variant, closable: scope.closable, onClose: onCloseButtonClick };

				if (scope.heading) {
					scope.props.header = scope.heading;
				}

				function onCloseButtonClick(item, event) {
					if (scope.removeItem && $.isNumeric(scope.itemIndex)) {
						//Remove item using a remove function passed in through the isolate scope.
						scope.removeItem({ itemIndex: scope.itemIndex });
					} else {
						//Just remove the element. If this is in an ng-repeat it will not remove the item
						//from the associated array.
						element.remove();
					}
					scope.$evalAsync();
				}
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adAlertsBox', function (eventBus, $timeout) {
	return {
		restrict: 'EA',
		replace: true,
		templateUrl: 'adobe/widgets/directives/ad-alerts-box.tpl.html',
		link: function link(scope, element) {
			scope.alerts = [];

			window.eventBus = eventBus;

			eventBus.subscribe('displayAlert', scope, function (alert) {
				if (alert.clearOtherAlerts) {
					scope.alerts.splice(0);
					scope.alerts.push(alert);
					autoHideAlert(alert);
				} else if (!alertIsDuplicate(alert)) {
					scope.alerts.push(alert);
					autoHideAlert(alert);
				}
			});

			eventBus.subscribe('removeAllAlerts', scope, function () {
				scope.alerts.splice(0);
			});

			function autoHideAlert(alert) {
				if (alert.autoHide) {
					var alertIndex = scope.alerts.indexOf(alert);
					if (alertIndex != -1) {
						$timeout(function () {
							element.find('ad-react-component:nth-child(' + (alertIndex + 1) + ') .coral3-Alert').fadeOut('slow', function () {
								scope.alerts.splice(alertIndex, 1);
							});
						}, getAutoHideInterval(alert));
					}
				}
			}

			function getAutoHideInterval(alert) {
				switch (alert.autoHide) {
					case 'slow':
						return 9000;
					case 'medium':
						return 6000;
					default:
						return 3000;
				}
			}

			function alertIsDuplicate(alert) {
				var isDuplicate = false;
				for (var i = 0; i < scope.alerts.length; i++) {
					var a = scope.alerts[i];
					if (a.text === alert.text) {
						isDuplicate = true;
					}
				}
				return isDuplicate;
			}

			scope.removeAlert = function (itemIndex) {
				scope.alerts.splice(itemIndex, 1);
			};
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('adAutocomplete', function ($timeout, util, CUI, _, $filter) {
		return {
			template: '<ad-react-component props="props" type="Select"/>',
			restrict: 'EA',
			replace: true,
			scope: {
				itemChangedHandler: '&',
				textChangedHandler: '&',
				dataProvider: '=provider',
				adPlaceholderText: '@',
				multi: '=',
				sort: '=',
				forceOpenMenu: '=',
				selectedItem: '=',
				allowCreate: '=',
				groupKey: '=?',
				groupLabelMappings: '=?',
				loadingData: '=?',
				clearable: '=?',
				trimValueOnCreate: '=',
				deepWatch: '=?'
			},
			link: function link(scope, element, attrs) {
				scope.iconClassName = attrs.iconClassName || 'search';
				scope.deepWatch = scope.deepWatch === undefined ? true : scope.deepWatch;
				function updateProps() {
					var props = {
						searchable: true,
						clearable: _.get(scope, 'clearable', true),
						sort: _.get(scope, 'sort', true), // added for VRS to have tags the correct order.
						placeholder: scope.adPlaceholderText,
						value: scope.selectedItem,
						options: scope.dataProvider,
						autoAdjustWidth: false,
						forceOpenMenu: _.get(scope, 'forceOpenMenu', false), // NEW,
						labelKey: 'name',
						valueKey: 'id',
						groupKey: _.get(scope, 'groupKey', ''),
						groupLabelMappings: _.get(scope, 'groupLabelMappings', {}),
						icon: scope.iconClassName,
						allowCreate: scope.allowCreate,
						isLoading: scope.loadingData,
						newOptionCreator: function newOptionCreator(value) {
							if (scope.trimValueOnCreate && typeof value === 'string') {
								value = value.trim();
							}
							var newItem = { name: value, id: value, _isNew: true };
							return newItem;
						},
						onChange: function onChange(values) {
							if (!scope.multi && _.isArray(values) && !values.length) {
								values = null;
							}

							// Temporary hack to using the enter key to select a non-existent value in the Select. 
							var clickToUseLabelText = $filter('l10n')(['clickToUseValue_1806', 'Click to use value "%s"']),
							    clickToUseRegExp = new RegExp(clickToUseLabelText.replace('%s', '([\\s\\S]*?)'));

							if (clickToUseRegExp.test(_.get(values, 'name'))) {
								values.name = RegExp.$1;
							}
							// End Temporary hack. 

							scope.props.value = values;
							scope.selectedItem = values;

							if (scope.itemChangedHandler) {
								scope.itemChangedHandler({ item: values });
							}

							if (!values) {
								// Search again for values.
								scope.textChangedHandler({ text: '' });
							}

							_.delay(function () {
								scope.$evalAsync(); // this needs to be after the changeHandler.
							}, 100);
						},
						onInputChange: function onInputChange(inputValue) {
							scope.textChangedHandler({ text: inputValue });
						},
						multi: _.get(scope, 'multi', false) // NEW
					};

					if (scope.quiet === 'true') {
						props.variant = 'quiet';
					}

					scope.props = props;
				}

				scope.$watchCollection('dataProvider', function () {
					updateProps();
				});

				scope.$watch('loadingData', function (oldValue, newValue) {
					if (oldValue !== newValue) {
						updateProps();
					}
				});

				scope.$watch('selectedItem', function () {
					updateProps();
				}, true);

				updateProps();
			}
		};
	});
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').directive('adButtonGroupButton', function ($timeout) {
		return {
			restrict: 'E',
			scope: {
				icon: '@?',
				value: '@?',
				title: '@?'
			},
			require: '^adButtonGroup',
			transclude: true,
			replace: true,
			templateUrl: 'adobe/widgets/directives/ad-button-group-button.tpl.html',
			link: function link(scope, element, attrs, adButtonGroupCtrl) {
				scope.group = adButtonGroupCtrl.scope;
			},
			controller: function controller($scope, $element) {

				function _valueIndex(value) {
					return $scope.group.model.indexOf(value);
				}

				$scope.isSelected = function (value) {
					return ~_valueIndex(value);
				};

				$scope.toggleSelection = function (value) {
					if ($scope.isSelected(value)) {
						$scope.model.splice(_valueIndex(value), 1);
					} else {
						$scope.model.push(value);
					}
				};

				// Use transcluded text as title, if no title is provided
				$timeout(function () {
					if (!$scope.title) {
						$scope.title = $.trim($element.text());
					}
				});
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adButtonGroup', function (guid) {
	return {
		restrict: 'E',
		replace: true,
		transclude: true,
		scope: {
			model: '=',
			type: '@'
		},
		templateUrl: 'adobe/widgets/directives/ad-button-group.tpl.html',
		controller: function controller($scope) {
			$scope.name = guid.create();

			$scope.multiple = $scope.type === 'multiple';

			this.scope = $scope;
		}
	};
});
'use strict';

angular.module('common').directive('adCalendarFormula', function (_, moment, DateService, $timeout, $filter) {

	var startOptions = [{ value: 'start', label: $filter('l10n')(['startOf', 'Start of']) }, { value: 'end', label: $filter('l10n')(['endOf', 'End of']) }, { value: 'fixed', label: $filter('l10n')(['fixedDay', 'Fixed Day']) }];

	var currentRangeOptions = [{ value: 'd', label: $filter('l10n')(['currentDay', 'current day']) }, { value: 'w', label: $filter('l10n')(['currentWeek', 'current week']) }, { value: 'm', label: $filter('l10n')(['currentMonth', 'current month']) }, { value: 'q', label: $filter('l10n')(['currentQuarter', 'current quarter']) }, { value: 'y', label: $filter('l10n')(['currentYear', 'current year']) }];

	var plusOptions = [{ value: '', label: $filter('l10n')(['noneParens', '(none)']) }, { value: '+', label: $filter('l10n')(['plus', 'plus']) }, { value: '-', label: $filter('l10n')(['minus', 'minus']) }];

	var quantityOptions = _.map(_.range(1, 366), function (o) {
		return { value: o, label: o };
	});

	var unitOptions = [{ value: 'd', label: $filter('l10n')(['day', 'day']) }, { value: 'w', label: $filter('l10n')(['week', 'week']) }, { value: 'm', label: $filter('l10n')(['month', 'month']) }, { value: 'q', label: $filter('l10n')(['quarter', 'quarter']) }, { value: 'y', label: $filter('l10n')(['year', 'year']) }];

	var unitsOptions = [{ value: 'd', label: $filter('l10n')(['days', 'days']) }, { value: 'w', label: $filter('l10n')(['weeks', 'weeks']) }, { value: 'm', label: $filter('l10n')(['months', 'months']) }, { value: 'q', label: $filter('l10n')(['quarters', 'quarters']) }, { value: 'y', label: $filter('l10n')(['years', 'years']) }];

	return {
		restrict: 'E',
		replace: true,
		templateUrl: 'adobe/widgets/directives/ad-calendar-formula.tpl.html',
		scope: {
			params: '=adCalendarFormulaParams'
		},
		controller: function controller($scope, $element) {
			var lastFormula = ''; // lastFormula keeps the last formula set to that we can tell if we need to update the ui or not.
			$scope.fixedDay = moment().format('YYYY-MM-DD'); // Default to today for the fixed day.
			$scope.scope = $scope;
			resetValues();

			// Called when a UI is change and we need to update the formula.
			function setFormula(formula) {
				lastFormula = formula;
				$scope.params.formula = formula;
				$scope.params.onChange($scope.params.formula);
			}

			$scope.$watch('params.formula', function (n) {
				if (n === lastFormula) {
					return; // if it is the same, we don't need to do anything.
				}
				$scope.updateFromFormula(); // The formula changed from the outside. Update this model.
			});

			$scope.updateFormula = function () {

				if ($scope.start === 'fixed') {
					var fixedDay = DateService.instance().getReasonableDate($scope.fixedDay);
					if (!fixedDay) {
						//If it is an invalid date, then don't do anything.
						return;
					}
					setFormula(DateService.instance().getStandardFormat(fixedDay));
					return;
				}

				var currentRange = $scope.currentRange;
				currentRange = 't' + currentRange;
				if ($scope.start === 'end') {
					currentRange += '+1' + $scope.currentRange; // If the currentRange is 'end' then we just need to adjust to the end of the period, by adding one of itself.
				}
				var adjustments = $scope.plus === '' ? '' : $scope.plus + $scope.quantity + $scope.unit; // This will be something similar to '-5d'
				setFormula(currentRange + adjustments);
			};

			$scope.updateFromFormula = function () {
				var formula = $scope.params.formula;
				resetValues();
				if (!formula) {
					return;
				}
				// handle fixed stuff first
				if (DateService.instance().isFormulaFixedDate(formula)) {
					$scope.start = 'fixed';
					$scope.fixedDay = DateService.instance().getMomentFromStandardFormat(formula).format('YYYY-MM-DD');
					return; // If it is fixed, we don't need to do anything else.
				}

				var ends = ['td+1d', 'tw+1w', 'tm+1m', 'tq+1q', 'ty+1y']; // if something is "End of" it will start like this.
				var firstChunk = formula.slice(0, 5);
				if (_.contains(ends, firstChunk)) {
					$scope.start = 'end';
					formula = formula.slice(0, 2) + formula.slice(5); // this just strips out characters 3,4,5
				}

				formula = formula.replace(/-/gi, '+-'); //add a + in front of all - to make it easier
				var formulaPieces = formula.split('+');

				var range = formulaPieces[0];
				var quantityAndUnit = formulaPieces[1];

				$scope.currentRange = range[1]; // for example, td, or tw, we want to select the d or w.

				if (quantityAndUnit) {
					$scope.plus = quantityAndUnit[0] == '-' ? '-' : '+';
					quantityAndUnit = quantityAndUnit.replace(/-/gi, ''); // remove all the slashes.

					$scope.quantity = +quantityAndUnit.slice(0, -1); // grab the last character for the unit.
					$scope.unit = quantityAndUnit.slice(-1); // grab the last character for the unit.
				}
			};

			function resetValues() {
				$scope.start = 'start';
				$scope.currentRange = 'd';
				$scope.plus = '';
				$scope.quantity = 1;
				$scope.unit = 'd';
			}

			$scope.startOptions = startOptions;
			$scope.currentRangeOptions = currentRangeOptions;
			$scope.plusOptions = plusOptions;
			$scope.quantityOptions = quantityOptions;
			$scope.unitOptions = unitOptions;
			$scope.unitsOptions = unitsOptions;
		}
	};
});
'use strict';

angular.module('common').directive('adCalendar', function (_, moment, DateService) {

	return {
		restrict: 'E',
		replace: true,
		templateUrl: 'adobe/widgets/directives/ad-calendar.tpl.html',
		scope: {
			params: '=adCalendarParams'
		},
		link: function link(scope, element, attrs) {

			_.defaults(scope.params, {
				stringValue: '', // This is an alternative way of setting the start and end dates.
				value: DateService.instance().currentRange(moment(), 'month'),
				isRange: false, // are we selecting a range, or a single day?
				clickedDay: function clickedDay() {} // called when a day is clicked. Used by calendar-input to update the manual inputs.
			});

			if (!scope.params.updateStringValue) {
				scope.params.updateStringValue = DateService.instance().updateStringValue;
				scope.params.setParamsValueFromStringValue = DateService.instance().setParamsValueFromStringValue;
			}

			scope.scope = scope;
			scope.isEndDate = _.has(attrs, 'adCalendarEndDate'); // ad-calendar-end-date is added to the calendar responsible for handling the end date.
			scope.monthOptions = DateService.instance().getMonthOptions();
			scope.yearOptions = DateService.instance().getYearOptions();

			scope.params.value.start = moment(scope.params.value.start);
			scope.params.value.end = moment(scope.params.value.end);

			if (!scope.params.stringValue) {
				scope.params.updateStringValue(scope.params);
			}

			//since we use the same params for both calendars, we need diferent names so they don't collide.
			if (scope.isEndDate) {
				scope.params.refreshEnd = refresh;
				scope.params.setEndValue = value;
				scope.params.useRollingDates = DateService.instance().isRangeStringAFormula(scope.params.value.formula);
			} else {

				scope.$watch('params.stringValue', function () {
					// if the stringValue ever changes externally, we need to update everything in here.
					scope.params.setParamsValueFromStringValue(scope.params);
					refresh();
				});

				scope.params.refreshStart = refresh;
				scope.params.setStartValue = value;
				scope.params.isValidForSave = isValidForSave;
			}

			function refresh() {
				if (!scope.params.isRange) {
					// If this is not a range, then we might as well set the end to match the start. Just in case somebody leaves an end value in there.
					scope.params.value.end = scope.params.value.start;
				}

				var range = DateService.instance().currentRange(value(), 'month');
				var lastDayInCurrentWeeks = _.last(_.last(scope.weeks));
				if (lastDayInCurrentWeeks && moment(lastDayInCurrentWeeks).isSame(range.end, 'day')) {
					// if the new days end on the same day as the current  days, we don't need to do anything.
					return;
				}
				updateCalendarView(range, true); //Update the calendar to reflect the new range.
			}

			// This function will set the start date if it is the start date calendar, and set the end date if it is the end date calendar.
			// It also returns the appropriate value for the given calendar.
			function value(newVal) {
				if (newVal !== undefined) {
					// if a value is passed, set the appropriate value.
					if (!scope.params.isRange) {
						scope.params.value.start = scope.params.value.end = newVal;
						return;
					}
					if (scope.isEndDate) {
						scope.params.value.end = newVal;
					} else {
						scope.params.value.start = newVal;
					}
				}
				return scope.isEndDate ? scope.params.value.end : scope.params.value.start; // return the single date value for this calendar.
			}

			// Returns true if the day is within the min and max.
			function isValidDay(day) {
				if (!moment.isMoment(day)) {
					return false;
				}
				var isValid = true;
				if (scope.params.min && day.isBefore(scope.params.min, 'day')) {
					isValid = false;
				}
				if (scope.params.max && day.isAfter(scope.params.max, 'day')) {
					isValid = false;
				}
				return isValid;
			}

			// Return true if the start and end are ready to save.
			function isValidForSave() {
				var isValid = true;
				if (!isValidDay(scope.params.value.start)) {
					return false;
				}
				if (scope.params.isRange && !isValidDay(scope.params.value.end)) {
					return false;
				}
				if (scope.params.isRange && scope.params.value.end.isBefore(scope.params.value.start, 'day')) {
					//$scope.params.value.end = $scope.params.value.start.clone(); // for now, just force the end date to come after the start date.
					//$scope.params.clickedDay(); // call clickedDay to update the manual inputs.
					return false;
				}

				return isValid;
			}

			// Used to display the days selected in the bottom of the the endDate calendar.
			scope.getNumberOfDays = function () {
				return moment(scope.params.value.end).diff(scope.params.value.start, 'days') + 1; // we always include the entire last day, so add 1
			};

			/******************************************************
   * Changing the selected date, and updating the view.
   ******************************************************/

			// Called when the user clicks a day.
			scope.clickDay = function (day) {
				if (!isValidDay(day)) {
					return;
				} // If they try to click an invalid day, don't allow it. But they can manually enter it, and then we will red out the save button.
				value(day); // set the corect value for this calendar.

				// if the user puts the end before the start, adjust the start to be the same as the end.
				if (scope.isEndDate && moment(scope.params.value.start).isAfter(value(), 'day')) {
					scope.params.value.start = moment(scope.params.value.end);
				}

				// if the user puts the start before the end, adjust the end to be the same as the start.
				if (!scope.isEndDate && moment(scope.params.value.end).isBefore(value(), 'day')) {
					scope.params.value.end = moment(scope.params.value.start);
				}

				scope.params.clickedDay(); // notify the date input so it can update the manual fields.
			};

			// when the user right clicks a day, it makes it be the end date.
			scope.clickEndDay = function (day) {
				if (!isValidDay(day)) {
					return;
				}
				scope.params.value.end = day;
				scope.params.clickedDay();
			};

			// User dbl clicked a day, month, or year.
			scope.dblClickRange = function (day, rangeType) {
				if (!moment.isMoment(day)) {
					return;
				}
				var range = DateService.instance().currentRange(day, rangeType);
				scope.params.value.start = range.start;
				scope.params.value.end = range.end;
				scope.clickDay(value());
			};

			/******************************************************
   * Updating the view, but not changing the actual date
   ******************************************************/

			// User clicked the left month arrow.
			scope.clickPreviousMonth = function () {
				updateCalendarView(DateService.instance().previousRange(scope.middleOfMonthDay, 'month'));
			};

			// User clicked the right month arrow.
			scope.clickNextMonth = function () {
				updateCalendarView(DateService.instance().nextRange(scope.middleOfMonthDay, 'month'));
			};

			// User selected a month from the dropdown.
			scope.updateMonthFromSelect = function (newMonth) {
				var newDay = scope.middleOfMonthDay.clone(); // take the day from the middle of the month, and change it to be the new month.
				newDay.month(+newMonth);
				updateCalendarView(DateService.instance().currentRange(newDay, 'month'));
			};

			// User selected a year from the dropdown.
			scope.updateYearFromSelect = function (newYear) {
				var newDay = scope.middleOfMonthDay.clone(); // take the day from the middle of the month, and change it to have the new year.
				newDay.year(+newYear);
				updateCalendarView(DateService.instance().currentRange(newDay, 'month'));
			};

			function updateCalendarView(range, skipUpdatingTheSelectedDay) {
				// skipUpdatingDay is set to true if we are simply refreshing. Otherwise, the user has changed the view and we should update the day.
				if (!moment.isMoment(range.start)) {
					range.start = moment(range.start);
				}
				if (!moment.isMoment(range.end)) {
					range.end = moment(range.end);
				}
				if (!range.start.isValid() || !range.end.isValid()) {
					return;
				}

				var oldWeeks = _.cloneDeep(scope.weeks);

				var details = DateService.instance().getCalendarDetails(range);
				scope.weeks = details.weeks;
				scope.selectedMonth = details.selectedMonth;
				scope.selectedYear = details.selectedYear;
				scope.dayLabels = details.dayLabels;
				scope.middleOfMonthDay = details.middleOfMonthDay;

				if (!skipUpdatingTheSelectedDay) {
					updateDayOnCalendarViewChange(_.flatten(oldWeeks), _.flatten(scope.weeks));
				}
			}

			/*
   * Since days are different on custom calendars and regular calendars, we use a consistent way to find the day in the month.
   * We look for the current position of the current day, ignoring any blank squares.
   * For the regular calendar, this will mean that Aug 8 will be at slot 8. We then click slot 8 of the next month, which will be Sep 8.
   * For a custom calendar with fixed week sizes, the day will be different, but it will always be the exact same position of the month.
   */
			function updateDayOnCalendarViewChange(oldDays, newDays) {
				var currentlySelectedDay = value(); // Number, day of month 1-31
				var position = findCurrentlySelectedPosition(oldDays, currentlySelectedDay);
				clickPositionInMonth(newDays, position);
			}

			function findCurrentlySelectedPosition(days, currentlySelectedDay) {
				var currentlySelectedPositionInMonth = 0;
				_.each(days, function (day) {
					if (moment.isMoment(day)) {
						currentlySelectedPositionInMonth++;
						if (currentlySelectedDay.isSame(day, 'day')) {
							return false;
						}
					}
				});
				return currentlySelectedPositionInMonth;
			}

			function clickPositionInMonth(days, position) {
				var currentlySelectedPositionInMonth = 0;
				var found = false;
				var lastMoment = null;
				_.each(days, function (day) {
					if (moment.isMoment(day)) {
						lastMoment = day;
						currentlySelectedPositionInMonth++;
						if (currentlySelectedPositionInMonth === position) {
							scope.clickDay(day);
							found = true;
							return false;
						}
					}
				});
				if (found) {
					return;
				}
				scope.clickDay(lastMoment); // Nothing was found, so click the last one possible. (Maybe the previous month had more days than this month.)
			}

			/******************************************************
   * Methods for CSS styling.
   ******************************************************/

			scope.getDayClasses = function (day) {
				if (day.isBlankDay) {
					return {
						'ad-Calendar-emptyCell': true
					};
				}
				return {
					'ad-CalendarSelectedDay': scope.selected(day),
					'ad-Calendar-day': true,
					'ad-CalendarToday': day.isSame(DateService.instance().now(), 'day'),
					'ad-CalendarHighlightedDay': scope.highlight(day),
					'ad-CalendarDisabledDay': !isValidDay(day)
				};
			};

			// For a given day, is it between the start and end dates. If so, highlight it.
			scope.highlight = function (day) {
				if (scope.isEndDate) {
					if (scope.params.value.start && scope.params.value.end && (day.isSame(scope.params.value.start, 'day') || day.isAfter(scope.params.value.start, 'day')) && day.isBefore(scope.params.value.end, 'day')) {
						return true;
					}
				} else {
					if (scope.params.value.start && scope.params.value.end && day.isAfter(scope.params.value.start, 'day') && (day.isBefore(scope.params.value.end, 'day') || day.isSame(scope.params.value.end, 'day'))) {
						return true;
					}
				}
				return false;
			};

			// If the day is the same as the current value, return true so it can be highlighted in the css.
			scope.selected = function (day) {
				if (value() && day.isSame(value(), 'day')) {
					return true;
				}
				return false;
			};

			refresh();
		}
	};
});
'use strict';

angular.module('common').directive('adContentEditableBlock', function ($parse, trackService, $timeout, _, Keys) {
	return {
		restrict: 'E', // only activate on element
		require: '?ngModel', // get a hold of NgModelController
		templateUrl: 'adobe/widgets/directives/ad-content-editable-block.tpl.html',
		replace: true,
		scope: {
			adContentEditableBlockParams: '='
		},
		link: function link(scope, element, attrs, ngModel) {

			var $el = $(element);
			var $label = $el.find('.ad-content-editable-block-label');
			var $textarea = $el.find('.ad-content-editable-block-textarea');
			var blurTimeoutID;

			var params = _.defaults(scope.adContentEditableBlockParams, {
				placeholder: '',
				value: '',
				focused: false,
				onResize: function onResize() {}, // Called whenever the text resizes.
				onSave: function onSave() {}, // Called when the textarea is closed.
				saveOnBlur: false
			});

			scope.scope = scope;
			scope.params = params;

			if (params.saveOnBlur) {
				$textarea[0].addEventListener('blur', function (e) {
					blurTimeoutID = setTimeout(function () {
						save(true);
					}, 250); // blurTimeoutID gives 'clear' function to opportunity to cancel the blur handler
				});
			}

			// Updates the label to be either the value, or the placeholder if there is no value.
			function render() {
				var val = _.trim(scope.params.value) || scope.params.placeholder;
				$label.text(val);
			}

			function unfocus(skipBlur) {
				if (!skipBlur) {
					$textarea.blur();
				}
				scope.params.focused = false;
				$el.toggleClass('focused', false);
			}

			function clear() {
				clearTimeout(blurTimeoutID);
				$textarea.val(scope.params.value);
				$label.text(scope.params.value || scope.params.placeholder);
				scope.$evalAsync();
				unfocus();
				scope.params.onResize();
			}

			function save(skipUnfocus) {
				var value = _.trim($textarea.val());
				scope.params.value = value === scope.placeholder ? '' : value;
				unfocus(skipUnfocus);

				var classNames = element[0].className;
				classNames = classNames.split('ad-content-editable')[0];
				trackService.trackAction(null, 'Inline Block Text Change', {
					item: classNames
				});

				render();
				scope.$evalAsync();
				scope.params.onResize();
				scope.params.onSave(scope.params.value);
			}

			scope.$watch('params.value', render);

			// Open the text area for editing.
			scope.edit = function () {
				if (scope.params.focused) {
					return;
				}
				$el.toggleClass('focused', true);
				scope.params.focused = true;
				$textarea.val(scope.params.value).focus();
				_.delay(function () {
					$textarea.focus();
					scope.params.onResize();
				}, 100);
			};
			scope.params.edit = scope.edit;

			// scope.clear is an event handler version of the `clear` function
			scope.clear = function (event) {
				event.stopPropagation();
				clear();
			};

			var resizeHandler = function resizeHandler() {
				scope.params.onResize();
			};

			$('body').on('content:resize', resizeHandler);

			// On control+enter, submit the textarea.
			$el.on('keydown', 'textarea', function (event) {
				if (event.keyCode == Keys.ENTER && (event.ctrlKey || event.metaKey)) {
					save();
					return false;
				}
			});

			// On esc, reset the value. Otherwise, update the underlying div so that it will auto grow the space for the textarea.
			$el.on('keyup', 'textarea', function (event) {
				if (event.keyCode == Keys.ESC) {
					clear();
				} else {
					$label.text($textarea.val());
				}
				scope.params.onResize();
			});

			// scope.save is an event handler version of the `save` function
			scope.save = function (event) {
				event.stopPropagation();
				save();
			};

			// Wait a bit for everything to settle down.
			_.delay(function () {
				render();
				scope.params.onResize();
			}, 50);

			// Remove all listeners.
			scope.$on('$destroy', function () {
				element.off();
				scope.params.onResize();
				$('body').off('content:resize', resizeHandler);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adContentEditable', function (_, Keys, util, $parse, trackService) {
	var INPUT_CHANGE_BIND_DELAY = 300;
	return {
		restrict: 'EA',
		require: '?ngModel',
		template: '' + '<div class="ad-content-editable" tabindex="0">' + '	<span class="ad-content-editable-label" data-title></span>' + '	<input class="ad-content-editable-input grid-stack-not-handle" style="display:none;">' + '</div>',
		replace: true,
		link: function link(scope, element, attrs, ngModel) {
			if (!ngModel) {
				return;
			}

			var $label = element.find('.ad-content-editable-label'),
			    $input = element.find('.ad-content-editable-input'),
			    placeholder = attrs['placeholder'];

			// Update when the placeholder changes
			attrs.$observe('placeholder', function (newVal) {
				placeholder = newVal;
				ngModel.$render();
			});

			ngModel.$render = function () {
				$label.text(ngModel.$viewValue || placeholder || '');
				$input.val(ngModel.$viewValue || placeholder || '');
			};

			var onInputChange = _.debounce(function () {
				var value = $input.val();
				ngModel.$setViewValue(value);
				$label.text(value);
			}, INPUT_CHANGE_BIND_DELAY),
			    onInputFocus = function onInputFocus() {
				if (_.has(attrs, 'autoFocus')) {
					this.setSelectionRange(0, this.value.length);
				}
			},
			    onInputKeydown = function onInputKeydown(event) {
				if (event.keyCode === Keys.ENTER) {
					$input.blur();
				}
			},
			    onInputBlur = function onInputBlur() {
				if ($input.val() === '' && placeholder) {
					$label.text(placeholder);
					$input.val(placeholder);
					ngModel.$setViewValue(placeholder);
				}
				$input.hide();
				$label.show();

				trackService.trackAction(null, 'Inline Text Change', {
					item: attrs.ngModel
				});

				if (attrs['onCommit']) {
					var fn = $parse(attrs['onCommit']);
					util.safeApply(scope, fn, { $value: ngModel.$viewValue });
				}
			};

			var onLabelClick = function onLabelClick() {
				if (!$input.is(':focus')) {
					var inputWidth = $label.outerWidth() + 5;
					$label.hide();
					$input.css('min-width', inputWidth + 'px').show().focus();
				}
			};

			$input.on('input', onInputChange).on('keydown', onInputKeydown).on('focus', onInputFocus).on('blur', onInputBlur);

			$label.on('click', onLabelClick);

			scope.$on('$destroy', function () {
				$input.off('input', onInputChange).off('keydown', onInputKeydown).off('focus', onInputFocus).off('blur', onInputBlur);

				$label.off('click', onLabelClick);
			});
		}
	};
});
'use strict';

angular.module('common').directive('adMultiSelectPopover', function ($timeout, util, $templateCache, _, $window, Keys) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		template: $templateCache.get('adobe/widgets/directives/ad-multi-select-popover.tpl.html'),
		restrict: 'E',
		replace: true,
		transclude: true,
		scope: {
			action: '&',
			actionLabel: '@',
			searchPlaceholder: '@',
			tall: '@?',
			allowAddNew: '@?', /* whether or not adding new items is allowed */
			items: '=', /* contains the list of items */
			itemTypeMap: '=', /* contains item type mappings to display in the popover */
			loadingItems: '=',
			ctrlObj: '='
		},
		link: function link(scope, element, attrs) {
			var scrollBody, searchField;

			// remove any existing instances of elements with popoverId to prevent creating duplicate popovers
			if (attrs.popoverId && $('#' + attrs.popoverId).length) {
				$('#' + attrs.popoverId).remove();
			}

			// build type/title lookup, priority map
			scope.titleLookupByType = {};
			var numTypes = scope.itemTypeMap.length;
			for (var i = 0; i < numTypes; i++) {
				scope.titleLookupByType[scope.itemTypeMap[i].type] = scope.itemTypeMap[i].title;
			}
			scope.itemTypePriority = util.pluck(scope.itemTypeMap, 'type');

			// on "show"
			scope.ctrlObj.onOpen = function () {
				// want to start with no search every time
				scope.clearSearchField();

				// pre-render "disable all others" functionality
				// When "All" is selected, toggleDisableAllOthersOnClick is true, 
				// so we will disable the other checkboxes.
				$timeout(function () {
					scope.allOthersDisabled = _.any(scope.items, function (item) {
						return item.checkedState === true && item.toggleDisableAllOthersOnClick;
					});
				}, 500);

				$timeout(function () {
					focusSearchField();
					scrollTop();
				});
			};

			scope.onCancelClick = function () {
				hidePopover();
			};

			scope.onActionClick = function () {
				// retrieve all selected items from popup
				var selectedItems = [];
				var numItems = scope.items.length;
				for (var i = 0; i < numItems; i++) {
					if (scope.items[i].checkedState) {
						/* checked OR indeterminate */
						selectedItems.push(scope.items[i]);
					}
				}

				scope.action({ 'selectedItems': selectedItems });

				hidePopover();
			};

			scope.onItemClick = function (item) {
				if (item.toggleDisableAllOthersOnClick) {
					scope.allOthersDisabled = !scope.allOthersDisabled;
				}
			};

			scope.onSearchFieldEnterKey = function () {
				if (!scope.isAddNewReady()) {
					return;
				}

				// add new item to list (currently will be auto-sorted - we will eventually create a custom filter to push these to the top)
				scope.items.push({
					id: -1, /* will be created by back-end */
					name: scope.search,
					checkedState: true
				});

				scope.clearSearchField();
			};

			scope.clearSearchField = function () {
				scope.search = '';
			};

			function focusSearchField() {
				if (!searchField) {
					searchField = element.find('.coral-Textfield');
				}
				searchField.focus();
			}

			scope.isAddNewReady = function () {
				var names = util.pluck(scope.items, 'name');
				if (names.indexOf(scope.search) != -1) {
					return false;
				}
				return scope.allowAddNew == 'true' && scope.search && scope.search.length > 0;
			};

			function hidePopover() {
				Popover.close(element.get(0));
			}

			function scrollTop() {
				if (!scrollBody) {
					scrollBody = element.find('.items');
				}
				scrollBody.scrollTop(0);
			}

			//This is a hack for really crappy angular behavior!!!! For some reason ng-if and ng-show like to keep
			//the spinner around for 5 seconds or more after the boolean variable has been set to false.
			var $spinner = element.find('.coral-Wait');
			scope.$watch('loadingItems', function (loading) {
				if (loading) {
					$spinner.show();
				} else {
					$spinner.hide();
				}
			});

			element.on('$destroy', function () {
				if (scope.controlObj) {
					scope.controlObj.isOpen = false;
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('adNumberinput', function ($filter, Keys) {
	return {
		templateUrl: 'adobe/widgets/directives/ad-numberinput.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			value: '=',
			isDisabled: '=', // can't be named 'disabled' because of the way IE treats disabled, same reason for ng-disabled
			onEnter: '&?'
		},
		link: function link(scope, element, attrs) {
			var lowerLimit = attrs.lowerLimit ? parseInt(attrs.lowerLimit) : -1000000000000000,
			    upperLimit = attrs.upperLimit ? parseInt(attrs.upperLimit) : Number.MAX_VALUE,
			    inputElement = $('.coral-InputGroup-input', element);

			scope.placeholder = angular.isDefined(attrs.placeholder) ? angular.placeholder : $filter('l10n')(['enterValuePlaceholderText', 'Enter Value']);

			scope.$watch('value', function () {
				if (scope.internalValue != scope.value) {
					updateInternalValue();
				}
			});

			scope.$watch('internalValue', function () {
				scope.value = parseInt(scope.internalValue, 10);
				if (scope.value > upperLimit) {
					scope.value = upperLimit;
				} else if (scope.value < lowerLimit) {
					scope.value = lowerLimit;
				}
			});

			scope.handleBlur = function () {
				if (isNaN(scope.value)) {
					scope.value = 0;
				}
				updateInternalValue();
			};

			scope.incrementValue = function () {
				var val = scope.value;
				if (!isNaN(val)) {
					if (val < upperLimit) {
						scope.value = val + 1;
					}
				} else {
					scope.value = lowerLimit > 0 ? lowerLimit : 0;
				}

				setInputFocus();
			};

			scope.decrementValue = function () {
				var val = scope.value;
				if (!isNaN(val)) {
					if (val > lowerLimit) {
						scope.value = val - 1;
					}
				} else {
					scope.value = lowerLimit > 0 ? lowerLimit : 0;
				}

				setInputFocus();
			};

			scope.onKeydown = function (event) {
				if (event.keyCode == Keys.UP) {
					scope.incrementValue();
				} else if (event.keyCode == Keys.DOWN) {
					scope.decrementValue();
				} else if (event.keyCode == Keys.ENTER && scope.onEnter) {
					scope.onEnter();
				}
			};

			scope.constrainNumericKeypress = function (e) {
				if (e.charCode && !Keys.isNumericKeypress(e.charCode)) {
					e.preventDefault();
				}
			};

			scope.onMouseWheel = function (event) {
				event.preventDefault();
				if (event.originalEvent.wheelDelta > 0) {
					scope.incrementValue();
				} else {
					scope.decrementValue();
				}
			};

			function setInputFocus() {
				if (!inputElement.is(':focus')) {
					inputElement.focus();
				}
			}

			function updateInternalValue() {
				if (!isNaN(scope.value)) {
					scope.internalValue = scope.value + '';
				}
			}
		}
	};
});
'use strict';

angular.module('common').directive('adPill', function () {
	return {};
});
'use strict';

// TODO
// * The first time the menu loads, it is at the top because the content has not generated. Then next time it is in the middle.
// Add css for the menu.
angular.module('common').directive('adPopoverMenu', function (util, CUI, $compile, $filter, spinnerService, $timeout, $templateCache, _, trackService) {
	var menuElement;
	var menuTemplate = $templateCache.get('adobe/widgets/directives/ad-popover-menu.tpl.html');

	var itemTemplate = $templateCache.get('adobe/widgets/directives/ad-popover-menu-item.tpl.html');
	var itemNavBackTemplate = $templateCache.get('adobe/widgets/directives/ad-popover-menu-item-back.tpl.html');

	$templateCache.put('ad-popover-menu-item-template', itemTemplate);
	$templateCache.put('ad-popover-menu-item-back-template', itemNavBackTemplate);

	return {
		restrict: 'A',
		replace: false,
		link: function link(parentScope, element, attrs) {

			var scope = parentScope.$new(true); // Create a new isolate scope so that the original element can be used by another directive.
			scope.adPopoverMenu = parentScope.$eval(attrs.adPopoverMenu); // grap the value in the adPopoverMenu attr from the parent scope.

			function init() {

				// Default values
				_.defaults(scope.adPopoverMenu, {
					showSearchBar: true,
					items: [],
					menuClass: '', // Attach an optional css class to the popover menu.
					onClick: null, // A global click handler for the items. Alternatively, an onClick can be placed on an item to override this.
					searchPlaceholder: $filter('l10n')(['popoverMenuSearch', 'Search']),
					noResultsPlaceholder: $filter('l10n')(['popoverMenuNoResults', 'There are no results.']),
					search: { str: '' }, // allow for filtering using more than just a string.
					isSearching: false, // this will usually be false, unless you want to start out with it doing a search.
					hideBorder: false,
					isLoading: false, // this will usually be empty, unless you want to start out with a preset search.
					shrinkMenu: false, // Makes the menu shrink to the size of the items. Useful for when there are only a few items.
					eventTrigger: 'contextmenu', // ('contextmenu', 'click') Event to trigger showing the menu.
					element: element, // defaults to the element with the ad-popover-menu attr, but can be overridden (eg, you need the event listener created higher up in the dom)
					triggerSelector: null, //Optional selector to trigger the event.
					pointMenuAt: 'source', // ('source', 'mouse', actual html node, or coords [x,y]). Tells the menu where to point at.
					showTooltips: false, // Shows the tooltips when hovering over items
					onShowMenu: function onShowMenu() {}, // Called when the menu is displayed. Useful for lazy loading the menu with an ajax call.
					onHideMenu: function onHideMenu() {}, // Called when menu is hidden.
					onSearch: null, // This is called on enter for the search box. Useful to do an ajax search. See example page.
					enableSort: false,
					labelKey: 'label',
					subLabelKey: 'subLabel',
					currentValue: function currentValue(item) {
						return false;
					},
					searchFilter: function searchFilter(list, searchObj, entireList) {
						return $filter('fuzzySearchFilter')(list, searchObj.str, scope.adPopoverMenu.labelKey, scope.slideMenu.applySort && scope.slideMenu.applySort());
					},
					searchFilters: searchFilters

				});

				// ======== Available methods to call on the directive. ========
				// Tell the scope that there are new items.
				scope.adPopoverMenu.updateItems = function (items) {
					scope.slideMenu.updateItems(items);
				};

				scope.adPopoverMenu.scrollToCurrentValue = function () {
					$timeout(function () {
						scope.slideMenu.scrollToCurrentValue();
					}, 100);
				};

				// Manually show the menu
				scope.adPopoverMenu.show = scope.show;

				// Loading screen the covers the entire widget.
				scope.adPopoverMenu.setLoading = function (isLoading) {
					scope.adPopoverMenu.isLoading = isLoading;
					spinnerService[isLoading ? 'show' : 'hide']('ad-PopoverMenu-spinner');
				};

				// Loading screen the covers the search area.
				scope.adPopoverMenu.setSearchLoading = function (isLoading) {
					scope.adPopoverMenu.isSearching = isLoading;
					spinnerService[isLoading ? 'show' : 'hide']('ad-PopoverMenu-spinner--search');
				};

				// Initialize the menu controller
				scope.menuController = {};

				// This is the slideMenu object params/control object.
				scope.slideMenu = {
					items: scope.adPopoverMenu.items,
					itemTemplate: scope.adPopoverMenu.itemTemplate || 'ad-popover-menu-item-template',
					itemBackTemplate: 'ad-popover-menu-item-back-template',
					onClick: scope.clickItem,
					search: scope.adPopoverMenu.search,
					showTooltips: scope.adPopoverMenu.showTooltips,
					searchFilter: scope.adPopoverMenu.searchFilter,
					labelKey: scope.adPopoverMenu.labelKey,
					subLabelKey: scope.adPopoverMenu.subLabelKey,
					enableSort: scope.adPopoverMenu.enableSort,
					currentValue: scope.adPopoverMenu.currentValue,
					overflowParentSelector: scope.adPopoverMenu.shrinkMenu ? '.ad-PopoverMenu-items' : '.ad-SlideMenu-items'
				};

				// Show the menu based on some event defined in the params.
				function onEvent(e) {

					if (scope.adPopoverMenu.eventTrigger === 'contextmenu') {
						$('body').trigger('click'); // We trigger a click on the body so that the popovers will act like they were clicked off. Otherwise, multiple popovers will be opened.
						trackService.trackAction(null, 'Right Click', {
							target: scope.adPopoverMenu.triggerSelector
						});
					}

					if (e.altKey) {
						return;
					}
					scope.$apply(function () {
						e.preventDefault();
						scope.show([e.pageX, e.pageY], e);
					});
				}

				if (scope.adPopoverMenu.triggerSelector) {
					scope.adPopoverMenu.element.on(scope.adPopoverMenu.eventTrigger, scope.adPopoverMenu.triggerSelector, onEvent);
				} else {
					scope.adPopoverMenu.element.on(scope.adPopoverMenu.eventTrigger, onEvent);
				}

				scope.$on('$destroy', function () {
					if (scope.adPopoverMenu.triggerSelector) {
						scope.adPopoverMenu.element.off(scope.adPopoverMenu.eventTrigger, scope.adPopoverMenu.triggerSelector, onEvent);
					} else {
						scope.adPopoverMenu.element.off(scope.adPopoverMenu.eventTrigger, onEvent);
					}
				});

				// Based of some settings, do some actions.
				if (scope.adPopoverMenu.isLoading) {
					scope.adPopoverMenu.setLoading(true);
				}

				if (scope.adPopoverMenu.isSearching) {
					scope.adPopoverMenu.setSearchLoading(true);
				}
			} // end init


			// When an item is clicked hide the menu.
			scope.clickItem = function (item, e) {
				if (item.onClick) {
					item.onClick(item, e);
					scope.menuController.hide();
					return;
				}
				if (scope.adPopoverMenu.onClick) {
					scope.adPopoverMenu.onClick(item, e);
					scope.menuController.hide();
					return;
				}
			};

			// If the down key is pressed, focus the slide menu.
			scope.onKeyDown = function (event) {
				if (event.keyCode == 40) {
					// down key
					event.preventDefault();
					scope.slideMenu.setFocus();
				}
			};

			// On first escape, clear the search. On second escape, close the menu.
			scope.onEscape = function (event) {
				event.preventDefault();
				if (scope.adPopoverMenu.search.str !== '') {
					scope.adPopoverMenu.search.str = '';
					return;
				}
				scope.menuController.hide();
			};

			scope.show = function (coords, event) {
				//Empty out the last search menu.
				scope.adPopoverMenu.search.str = '';

				// Only one instance can be open.
				if (menuElement) {
					menuElement.remove();
				}

				menuElement = angular.element(menuTemplate);
				if (scope.adPopoverMenu.menuClass) {
					menuElement.addClass(scope.adPopoverMenu.menuClass);
				}
				menuElement.appendTo($('body'));

				// Compile the content
				$compile(menuElement)(scope);

				// In some cases, the link for directives compile in content above
				// haven't been linked at this point, so we need to wait unti the
				// next frame to make sure link has been called and the content
				// is properly initialized
				$timeout(function () {

					var pointAt;
					switch (scope.adPopoverMenu.pointMenuAt) {
						case 'source':
							pointAt = element;
							break;
						case 'mouse':
							//pointAt = coords;
							pointAt = event.target; // we are deprecating mouse.
							break;
						default:
							// it must be a coord or node.
							pointAt = scope.adPopoverMenu.pointMenuAt;
					}

					scope.menuController.show(pointAt, { pointFrom: 'bottom' }); // bottom seems to work better than right

					scope.adPopoverMenu.onShowMenu(event.target);

					$timeout(function () {
						if (scope.adPopoverMenu.showSearchBar) {
							menuElement.find('.ad-PopoverMenu-search input').focus();
						} else {
							menuElement.find('.ad-SlideMenu').focus();
						}
					}, 0);
				});
			};

			// If there is an onsearch method, call it.
			scope.onSearch = function () {
				if (scope.adPopoverMenu.onSearch) {
					scope.adPopoverMenu.onSearch(scope.adPopoverMenu.search);
				}
			};

			var searchFilters = {};
			searchFilters.flatSearch = function (list, searchObj, entireList) {
				searchObj.showSubLabels = false;
				if (_.isEmpty(searchObj.str)) {
					return $filter('fuzzySearchFilter')(list, searchObj.str, scope.adPopoverMenu.labelKey, scope.slideMenu.applySort());
				}

				searchObj.showSubLabels = true;

				var flatList = [];

				var getItems = function getItems(items, parent) {
					_.each(items, function (item) {
						item[scope.adPopoverMenu.subLabelKey] = '';
						if (parent) {
							item[scope.adPopoverMenu.subLabelKey] = parent[scope.adPopoverMenu.subLabelKey] + parent[scope.adPopoverMenu.labelKey] + ' / ';
						}
						if (item.items) {
							getItems(item.items, item);
						} else {
							flatList.push(item);
						}
					});
				};

				getItems(list);

				return $filter('fuzzySearchFilter')(flatList, searchObj.str, scope.adPopoverMenu.labelKey, scope.slideMenu.applySort());
			};

			init();
		}
	};
});
'use strict';

angular.module('common').directive('adPopover', function (util, CUI, $timeout, eventBus, Keys, $window, _) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		template: '<div class="coral-Popover" ng-transclude></div>',
		restrict: 'E',
		replace: true,
		transclude: true,
		scope: {
			controlObj: '=adPopoverControl',
			hide: '&?',
			hideBorder: '=?'
		},
		link: function link(scope, element, attrs) {
			var popover;
			scope.controlObj = scope.controlObj || {};

			scope.controlObj.isOpen = false;

			scope.controlObj.show = function (target, opts) {
				// Target can be event or object with coordinates. If event, we need to pull the DOM element
				if (target.hasOwnProperty('currentTarget')) {
					target = target.currentTarget;
				}

				//target could also be a jquery object, so pull out the dom element
				if (target instanceof jQuery) {
					target = target.get(0);
				}

				opts = angular.extend({
					element: element,
					pointAt: target,
					preventAutoHide: false,
					pointFrom: 'bottom'
				}, opts);

				if (_.isArray(opts.pointAt)) {
					opts.pointAt = target;
				}

				$timeout(function () {
					var id = _.uniqueId('popover'); // We may want to persist the id...
					popover = Popover.show({
						target: opts.pointAt,
						position: opts.pointFrom,
						isModal: false,
						ref: id,
						dialog: {
							className: 'ad-popover-dialog',
							padded: false,
							onClose: function onClose(dialog, e) {
								if (opts.onDialogClose) {
									var result = opts.onDialogClose(dialog, e);
									if (!result) {
										return false;
									}
								}

								scope.controlObj.isOpen = false;
								scope.hide();
								return true;
							}
						},
						closeOnClickOutside: !opts.preventAutoHide,
						selector: opts.element,
						onClose: opts.onClose
					});

					scope.controlObj.isOpen = true;
				}, 0);
			};

			scope.controlObj.hide = function (target) {
				_.invoke(popover, 'close', true);
				scope.controlObj.isOpen = false;
				if (scope.controlObj.onClose) {
					scope.controlObj.onClose();
				}
			};

			scope.$on('$destroy', function () {
				scope.controlObj.isOpen = false;
			});

			// Allow hiding all popovers at once - useful for things like scroll
			eventBus.subscribe('ad-popover:hide', scope, function () {
				scope.controlObj.hide();
			});
		}
	};
});
'use strict';

angular.module('common').directive('adQuickAdd', function (_, eventBus) {
	return {
		templateUrl: 'adobe/widgets/directives/ad-quick-add.tpl.html',
		restrict: 'E',
		replace: true,
		scope: {
			items: '=',
			allowCreate: '=',
			loadItems: '=',
			loadingItems: '=',
			placeholderTextKey: '@', // must use the l10n key here, not the translated string
			iconClassName: '@?', // the coral icon class name, e.g. 'coral-Icon--tag'
			addNewItemTextKey: '@?',
			itemTypeMap: '=?',
			selectionChange: '&',
			updateSelectedItemsEvent: '@',
			groupKey: '=',
			sort: '=',
			groupLabelMappings: '='
		},
		controller: function controller($scope, $element, $attrs) {
			$scope.selectedItem = null;
			$scope.optionalClass = $attrs.optionalClass || 'tag-list';
			updateSelectedItems();

			eventBus.subscribe($scope.updateSelectedItemsEvent, function () {
				updateSelectedItems();
			});

			function updateSelectedItems() {
				if (!_.isArray($scope.items)) {
					$scope.selectedItems = [];
					return;
				}
				$scope.selectedItems = $scope.items.filter(function (item) {
					return item.selected;
				});
			}

			$scope.numSelectedItems = function () {
				return _.get($scope, 'selectedItems.length', 0);
			};

			$scope.$watch('items', function () {
				updateSelectedItems();
			}, true);

			$scope.onSelectedItemChange = function (changedItems, text) {
				_.each(changedItems, function (item) {
					item.selected = true;
					if (!_.contains($scope.items, item)) {
						delete item._isNew;
						delete item.id;
						$scope.items.push(item);
					}
				});

				_.each(_.difference($scope.items, changedItems), function (item) {
					item.selected = false;
				}); // grab all the items that were not changed and unselect them.

				$scope.selectionChange({ item: changedItems });
			};
		}
	};
});
'use strict';

angular.module('common').directive('adRadioGroupButton', function ($timeout) {
	return {
		restrict: 'E',
		scope: {
			value: '@?',
			title: '@?'
		},
		require: '^adRadioGroup',
		transclude: true,
		replace: true,
		templateUrl: 'adobe/widgets/directives/ad-radio-group-button.tpl.html',
		link: function link(scope, element, attrs, adButtonGroupCtrl) {
			scope.group = adButtonGroupCtrl.scope;
		},
		controller: function controller($scope, $element) {}
	};
});
'use strict';

angular.module('common').directive('adRadioGroup', function (guid) {
	return {
		restrict: 'E',
		replace: true,
		transclude: true,
		scope: {
			model: '='
		},
		templateUrl: 'adobe/widgets/directives/ad-radio-group.tpl.html',
		controller: function controller($scope) {
			$scope.name = guid.create();

			this.scope = $scope;
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('adReactComponent', function (_, $window, $rootScope) {
		return {
			restrict: 'EA',
			link: function link(scope, element, attrs) {

				var node = element.get(0);
				var contents = element.contents().remove();
				var contentPortal;

				var ReactComponent = _.get($window, 'analyticsui.features.' + attrs.type) || _.get($window, 'analyticsui.ui.' + attrs.type) || _.get($window, 'analyticsui.ui-core.' + attrs.type) || _.get($window, 'analyticsui.shell.' + attrs.type);

				var ContentPortal = React.createClass({
					displayName: 'ContentPortal',

					componentDidMount: function componentDidMount() {
						var node = ReactDOM.findDOMNode(this);
						contents.each(function () {
							node.appendChild(this);
						});
					},
					render: function render() {
						return React.createElement('div', { className: attrs.className });
					}
				});

				function renderReactComponent(props) {
					if (!props) {
						return;
					}
					props = _.extend({}, getAdditionalProps(), props);
					contentPortal = contentPortal || React.createElement(ContentPortal);

					// January 28, 2016 - Commenting this out because it causes a JavaScript error when pressing enter on the
					// autocomplete. I'm note sure if the bug this fixed is even an issue anymore.
					// node.innerHTML = ''; // If we don't clear out the innerHTML, we get the error "Invariant Violation: ReactMount: Two valid but unequal nodes with the same data-reactid"

					var AppContext = _.get($window, 'analyticsui.ui.AppContext');

					var newElement = React.createElement(AppContext, { app: $window.analyticsui.app }, React.createElement(ReactComponent, props, contentPortal));

					scope.reactComponent = ReactDOM.render(newElement, node);
				}

				function getAdditionalProps() {
					var additionalProps = {};
					_.forIn(attrs.$attr, function (value, key) {
						if (!~['type', 'props', 'class'].indexOf(key)) {
							additionalProps[key] = attrs[key];
						}
					});
					return additionalProps;
				}

				var deepWatch = _.get(attrs, 'deepWatch', true);
				var renderOnce = _.get(attrs, 'renderOnce', false);
				deepWatch = deepWatch === 'true' || deepWatch === true;

				if (renderOnce) {
					renderReactComponent(scope.$eval(attrs.props));
				} else {
					// Larger components like a subPanel don't want a deep watch.
					scope.$watch(attrs.props, renderReactComponent, deepWatch);
				}
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adScrollTo', function ($parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var model = $parse(attrs.adScrollTo);
			scope.$watch(model, function (val) {
				if (val && element.is(':visible')) {
					model.assign(scope, false);
					doScroll();
				}
			});

			function doScroll() {
				var parent = element.closest(attrs.adScrollToParentSelector);
				var parentHeight = parent.height();
				var elHeight = element.height();
				var elYRelative = element.position().top;
				var elYAbsolute = elYRelative + parent.scrollTop();

				if (elYRelative + elHeight > parentHeight) {
					parent.scrollTop(elYAbsolute - parentHeight + elHeight);
					return;
				}

				if (elYRelative < 0) {
					parent.scrollTop(elYAbsolute);
					return;
				}
			}
		}
	};
});
'use strict';

angular.module('common').directive('adSearchBar', function ($controller, $filter, $templateCache) {
	return {
		template: $templateCache.get('adobe/widgets/directives/ad-search-bar.tpl.html'),
		restrict: 'E',
		replace: true,
		scope: {
			searchModel: '=',
			blur: '&?'
		},
		controller: function controller($scope, $element, $attrs) {
			$scope.init = function () {
				$scope.icon = $attrs.icon || 'search';
				$scope.searchPlaceholder = $attrs.searchPlaceholder || $filter('l10n')(['adSearchBarSearch', 'Search']);
			};

			$scope.clearSearchField = function () {
				$scope.searchModel = '';
			};

			angular.extend($controller('widgetBaseCtrl', {
				$scope: $scope,
				$element: $element,
				$attrs: $attrs
			}), this);
		},
		link: function link(scope, element, attrs) {
			var searchField;

			scope.focusSearchField = function () {
				if (!searchField) {
					searchField = element.find('.coral-Textfield:first');
				}
				searchField.focus();
			};
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('adSearchPopover', function (util, CUI, $compile, $timeout, $filter, $templateCache) {

		var mainElement;
		var mainTemplate = $templateCache.get('adobe/widgets/directives/ad-search-popover.tpl.html');

		return {
			restrict: 'A',
			replace: false,
			link: function link(parentScope, element, attrs) {
				var scope = parentScope.$new(true); // Create a new isolate scope so that the original element can be used by another directive.
				scope.params = parentScope.$eval(attrs.adSearchPopoverParams); // grap the value in the adPopoverMenu attr from the parent scope.

				scope.scope = scope;
				scope.popoverParams = {};
				scope.params.popover = scope.popoverParams;

				scope.operatorOptions = [{ label: $filter('l10n')(['if-all-criteria-are-met', 'If all criteria are met']), value: 'AND' }, { label: $filter('l10n')(['if-any-criteria-are-met', 'If any criteria are met']), value: 'OR' }];

				scope.containOptions = [{ label: $filter('l10n')(['contains', 'Contains']), value: true }, { label: $filter('l10n')(['does-not-contain', 'Does not contain']), value: false }];

				scope.show = function (el) {
					// Only one instance can be open.
					if (mainElement) {
						mainElement.remove();
					}

					scope.search = scope.params.search.copy();

					mainElement = angular.element(mainTemplate);
					mainElement.appendTo($('body'));
					$compile(mainElement)(scope);
					scope.currentRule = 0;
					scope.popoverParams.show(el || element, { pointFrom: 'bottom', preventAutoHide: true }); // bottom seems to work better than right

					if (scope.search.rules.length === 0) {
						scope.search.addRuleGroup();
					}

					scope.advanced = scope.search.isAdvancedSearch();

					scope.focus();
				};

				scope.focus = function () {
					$timeout(function () {
						if (!scope.advanced) {
							mainElement.find('.ad-SearchPopover-simpleSearchTextField').focus();
						} else {
							mainElement.find('.advanced_search_string').focus();
						}
					});
				};

				scope.cancel = function () {
					scope.popoverParams.hide();
				};

				scope.save = function () {
					if (!scope.advanced) {
						var tempValue = scope.search.rules[0].rules[0].value;
						scope.search.clearAll();
						scope.search.addRuleGroup();
						scope.search.rules[0].rules[0].value = tempValue;
					}
					scope.params.search.replaceWith(scope.search);
					scope.params.search.updateStrings();
					scope.params.search.onSave();
					scope.popoverParams.hide();
				};

				scope.onEscape = function (event) {
					event.preventDefault();
					scope.popoverParams.hide();
				};

				scope.removeRule = function (rule, targetArray) {
					scope.search.removeRule(rule, targetArray);
					if (targetArray.length === 0) {
						scope.search.addRule(null, targetArray);
					}
				};

				scope.removeRuleGroup = function (ruleGroup, targetArray) {
					var tempRuleGroup = ruleGroup;
					scope.search.removeRule(ruleGroup, targetArray);
					if (scope.search.rules.length === 0) {
						scope.search.addRuleGroup();
					}
					var currentRuleIndex = scope.search.rules.indexOf(tempRuleGroup);
					scope.currentRule = currentRuleIndex === -1 ? 0 : currentRuleIndex;
				};

				scope.clearAll = function () {
					scope.search.clearAll();
					scope.search.addRuleGroup();
					scope.currentRule = 0;
				};

				scope.params.show = scope.show;
			}
		};
	});
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').directive('adSelect', function ($timeout, util, CUI, _, $filter) {
		return {
			template: '<ad-react-component props="props" type="Select" class="ad-select-react"/>',
			restrict: 'EA',
			replace: true,
			scope: {
				options: '=',
				icon: '@',
				selection: '=',
				selectionChange: '&?',
				useRawValue: '@?',
				quiet: '@?',
				size: '@?',
				disableDropdown: '='
			},
			link: function link(scope, element, attrs) {
				function updateProps() {
					var props = {
						searchable: false,
						clearable: false,
						placeholder: $filter('l10n')(['searchPlaceholder', 'Search']),
						value: _.get(_.filter(scope.options, { value: scope.selection }), 0),
						options: scope.options,
						autoAdjustWidth: true,
						forceOpenMenu: false,
						onChange: function onChange(value) {
							scope.props.value = value;
							scope.selection = _.get(value, 'value', null);

							// The selection needs to be applied before the selectionChange is called.
							// A good example is the rolling date select in the date picker. Without an apply before selectionChange, it is always off by a digest cycle.
							scope.$apply();
							scope.selectionChange({ newValue: scope.selection });
							scope.$evalAsync();
						}
					};

					if (scope.quiet === 'true') {
						props.variant = 'quiet';
					}

					if (scope.size) {
						props.size = scope.size;
					}

					scope.props = props;
				}

				scope.$watch('options + selection', function (oldValue, newValue) {
					updateProps();
				});

				updateProps();
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('adSlideMenu', function (util, CUI, $timeout, $templateCache, $filter, _) {

	var itemTemplate = $templateCache.get('adobe/widgets/directives/ad-slide-menu-item.tpl.html');
	var itemNavBackTemplate = $templateCache.get('adobe/widgets/directives/ad-slide-menu-item-back.tpl.html');

	$templateCache.put('ad-slide-menu-item-template', itemTemplate);
	$templateCache.put('ad-slide-menu-item-back-template', itemNavBackTemplate);

	return {
		templateUrl: 'adobe/widgets/directives/ad-slide-menu.tpl.html',
		restrict: 'E',
		replace: true,
		scope: {
			adSlideMenuParams: '='
		},
		link: function link(scope, element, attrs) {

			_.defaults(scope.adSlideMenuParams, {
				items: [],
				itemTemplate: 'ad-slide-menu-item-template',
				itemBackTemplate: 'ad-slide-menu-item-back-template',
				onClick: function onClick(item, e) {},
				showTooltips: true,
				search: { str: '' }, // search object used by the filters for the items.
				filteredItems: [], // ReadOnly. This is populated by the search, and can be used for result counts, etc.
				labelKey: 'label',
				enableSort: false,
				searchFilter: function searchFilter(list, searchObj, entireList) {
					// Filter to be used for the repeat of items.
					if (searchObj.str === '') {
						return list;
					}
					// Why does the sort change if sorting is set to false?
					return $filter('fuzzySearchFilter')(list, searchObj.str, scope.adSlideMenuParams.labelKey, false);
				},
				currentValue: function currentValue(item) {
					return false;
				},
				overflowParentSelector: '.ad-SlideMenu-items'
			});

			scope.scope = scope; // Shortcut to get around having to use $parent in the template.
			scope.activePane = 0;
			scope.direction = '';
			scope.backLists = []; // This will get populated with the items needed to go back to.
			scope.showKeyboardHighlighter = false; // When a key is pressed, this is set to true and extra styles are applied to indicate keyboard position.
			scope.panes = [{ items: [], currentIndex: 0 }, { items: [], currentIndex: 0 }]; // We use two panes to handle the animation.
			scope.panes[0].items = scope.adSlideMenuParams.items;

			// Allow outside directives to set focus.
			scope.adSlideMenuParams.setFocus = function () {
				scope.showKeyboardHighlighter = true;
				$timeout(function () {
					element.focus();
				}, 0);
			};

			// since the drilldowns work off a detached array, we need to update them if something ahs changed.
			scope.adSlideMenuParams.updateItems = function (items) {
				scope.activePane = 0;
				scope.panes = [{ items: [], currentIndex: 0 }, { items: [], currentIndex: 0 }];
				scope.panes[0].items = scope.adSlideMenuParams.items = items;
			};

			scope.adSlideMenuParams.scrollToCurrentValue = function () {
				_.each(scope.adSlideMenuParams.items, function (item) {
					if (scope.adSlideMenuParams.currentValue(item)) {
						item.doScroll = true;
					}
				});
			};

			scope.adSlideMenuParams.applySort = function () {
				if (scope.backLists.length > 0) {
					// If there is a drilldown, use the setting on the parent of the drilldown items.
					return scope.backLists[scope.backLists.length - 1].item.enableSort === true;
				}
				return scope.adSlideMenuParams.enableSort;
			};

			// Called when an item is clicked. It will either need to open a drilldown or call the items click action.
			scope.onClick = function (item, e) {
				scope.showKeyboardHighlighter = false; // If a key was pressed, this will be set to tru after this function.

				if (item.items) {
					//It's a drilldown
					scope.direction = 'left'; // This is applied so the correct css class handles the animation.
					$timeout(function () {
						// do a timeout so the css class can change first. Otherwise, there are funky transitions
						scope.backLists.push({ // store a copy of the position, so when we goBack, we can find it again.
							item: item,
							items: scope.panes[scope.activePane].items,
							index: scope.panes[scope.activePane].currentIndex
						});
						scope.activePane = scope.activePane === 0 ? 1 : 0; // Swap to the new pane
						scope.panes[scope.activePane].items = item.items; // Set the new pane's items to be this item's items.
						scope.panes[scope.activePane].currentIndex = 0; // We drilled down, so the index should be set to the first one.
					}, 0);
				} else {
					scope.adSlideMenuParams.onClick(item, e); // The item was clicked. Do it.
				}
			};

			// Called when coming back from a drilldown.
			scope.goBack = function () {
				scope.showKeyboardHighlighter = false;

				scope.direction = 'right';
				$timeout(function () {
					var backList = scope.backLists.pop();
					scope.activePane = scope.activePane === 0 ? 1 : 0;
					scope.panes[scope.activePane].items = backList.items;
					scope.panes[scope.activePane].currentIndex = backList.index;
					backList.item.doScroll = true;
				}, 0);
			};

			// Handle all the keyboard events.
			scope.onKeyDown = function (event) {
				if (scope.showKeyboardHighlighter === false) {
					// If the keyboard is used for the first time, then just turn on the highlighter to highlight the first item.
					event.preventDefault();
					if (event.keyCode != 27) {
						// if the user hit escape, then we don't want to show the highlighter.
						scope.showKeyboardHighlighter = true;
					}
					return;
				}

				var currentList = scope.adSlideMenuParams.filteredItems;
				var currentPane = scope.panes[scope.activePane];
				var currentItem = function currentItem() {
					return currentList[currentPane.currentIndex];
				};
				if (!currentItem() && [38, 39, 40, 13, 8].indexOf(event.keyCode) > -1) {
					event.preventDefault();
					return;
				} // if there is not a current item, then we are done.

				switch (event.keyCode) {
					case 37:
						//left
						event.preventDefault();
						if (scope.backLists.length) {
							// If there are any backlists, we must be in a drop down. Go back to the previous list.
							scope.goBack();
						}
						break;
					case 38:
						//up
						event.preventDefault();
						currentPane.currentIndex = Math.max(0, currentPane.currentIndex - 1);
						currentItem().doScroll = true;
						break;
					case 39:
						//right
						event.preventDefault();
						if (currentItem().items) {
							// Is it a drilldown? If yes, click it. Otherwise, we dont want to trigger the submit action of the item, so do nothing.)
							scope.onClick(currentItem(), event);
						}
						break;
					case 40:
						//down
						event.preventDefault();
						if (++currentPane.currentIndex >= currentList.length) {
							currentPane.currentIndex = Math.max(currentList.length - 1, 0);
						}
						currentItem().doScroll = true;
						break;
					case 13:
						//enter
						event.preventDefault();
						scope.onClick(currentItem(), event);
						break;
					case 8:
						//backspace
						event.preventDefault(); // The page would navigate away without this.
						break;
				}
				scope.showKeyboardHighlighter = true;
			};
		}
	};
}).filter('adSlideMenuFilter', function () {
	// A dumby filter that just does a passthru to the passed in searchFilter.
	return function (list, adSlideMenuParams) {
		return adSlideMenuParams.searchFilter(list, adSlideMenuParams.search, adSlideMenuParams.items);
	};
});
'use strict';

angular.module('common').directive('adSlider', function ($timeout, $controller, CUI) {
	return {
		templateUrl: 'adobe/widgets/directives/ad-slider.tpl.html',
		restrict: 'E',
		replace: true,
		scope: {
			// Note: You must provide either intervals OR min,max,step.
			// Use intervals for non-uniform steps (e.g., [1,2,5,10,20,50])
			// Use min,max,step for uniform steps (e.g., even #'s between 0 and 10)
			adModel: '=', // Required [array] 1-2 models, the current value(s) of the slider handle(s)  
			unit: '@', // [string] The unit for the tooltip
			tooltip: '=?', // [boolean]
			intervals: '=?', // [array] Non-uniform slider interval values
			min: '=?', // [number]
			max: '=?', // [number]
			step: '=?' // [number]
		},
		controller: function controller($scope, $element, $attrs) {
			$scope.init = function () {
				$scope.setDefaults({
					unit: '',
					tooltip: true,
					min: 0,
					step: 1
				});
			};

			// $scope.initialValues gets passed to CUI to set the initial position of the slider
			// If min,max,step were provided then initialValues simply equals adModel
			// If an intervals array was provided then initialValues equals the index of adModel in the intervals array
			$scope.initialValues = $scope.adModel.slice(); // clone it
			if ($scope.intervals) {
				// Convert initials to indices on the intervals array
				for (var i = 0; i < $scope.initialValues.length; i++) {
					var model = $scope.initialValues[i],
					    modelIndex = $scope.intervals.indexOf(model);
					if (modelIndex < 0) {
						modelIndex = 0;
					}
					$scope.initialValues[i] = modelIndex;
				}
			}

			// This provides 2 way binding for the slider.
			// This picks up cases where the adModel changes values in
			// a way other than moving the slider handle
			$scope.$watch('adModel', function (newValues) {
				if ($scope.slider) {
					$scope.sliderInputs.each(function (i, element) {
						var slider = $(element),
						    currentValue;
						if ($scope.intervals) {
							currentValue = $scope.intervals[slider.val()];
						} else {
							currentValue = slider.val();
						}
						if (currentValue != newValues[i]) {
							var newValue;
							if ($scope.intervals) {
								var index = $scope.intervals.indexOf(newValues[i]);
								if (index < 0) {
									index = 0;
								}
								newValue = index;
							} else {
								newValue = newValues[i];
							}
							$scope.slider.refresh(i, newValue);
						}
					});
				}
			}, true);

			// Inherit from the widget base controller
			angular.extend($controller('widgetBaseCtrl', {
				$scope: $scope,
				$element: $element,
				$attrs: $attrs
			}), this);
		},
		link: function link(scope, element, attrs) {
			// Refresh a specific handle and value.
			// This is necessary when the handle needs to be moved
			// because of a change in input value
			CUI.Slider.prototype.refresh = function (pos, value) {
				this._updateValue(pos, value);
				this._moveHandles();
				if (this.options.filled) {
					this._updateFill();
				}
			};

			// Initialize the slider in the next frame to allow bindings to fire
			$timeout(function () {
				scope.slider = new CUI.Slider({
					element: element,
					ticks: true,
					filled: true,
					min: scope.min,
					max: scope.max || scope.intervals.length - 1,
					bound: true,
					value: scope.initialValues,
					step: scope.step
				});

				scope.sliderInputs = element.find('input[type=range]');

				// Because the default CUI slider doesn't allow for a custom array of interval values
				// we have to create our own tooltips for the slider handles and manually 
				// set the values of the tooltips
				if (scope.tooltip) {
					scope.tooltips = [];

					// Create a tooltip for each model
					for (var i = 0; i < scope.adModel.length; i++) {
						var handle = element.find('.coral-Slider-handle:eq(' + i + ')'),
						    value = scope.adModel[i],
						    unit = scope.unit || false;

						scope.tooltips[i] = new Tooltip(handle, value, unit);
					}
				}

				scope.sliderInputs.on('change', function () {
					// Find the model that is changing
					// (CUI assigns an index to the end of the id)
					var sliderIndex;
					if ($(this).is('[id$=0]')) {
						sliderIndex = 0;
					} else {
						sliderIndex = 1;
					}

					var val = $(this).val();
					scope.$apply(function () {
						if (scope.intervals) {
							scope.adModel[sliderIndex] = scope.intervals[val];
						} else {
							scope.adModel[sliderIndex] = val;
						}
						if (scope.tooltip) {
							var value = scope.adModel[sliderIndex];
							scope.tooltips[sliderIndex].setContent(value);
						}
					});
				});
			});

			function Tooltip(handle, value, unit) {
				var tooltipTarget = angular.element('<div></div>');
				handle.append(tooltipTarget);

				this.unit = unit ? ' ' + unit.trim() : '';
				this.cuiElement = new CUI.Tooltip({
					target: tooltipTarget,
					arrow: 'bottom'
				});

				this.setContent(value);

				return this;
			}

			Tooltip.prototype.setContent = function (value) {
				var content = value + this.unit;
				this.cuiElement.set('content', content);
			};
		}
	};
});
'use strict';

angular.module('common').directive('adSort', function () {
	return {
		restrict: 'E',
		replace: true,
		templateUrl: 'adobe/widgets/directives/ad-sort.tpl.html',
		scope: {
			asc: '=',
			active: '=',
			defaultToAsc: '=?'
		},
		link: function link(scope, element, attrs) {
			var ascClass = 'coral-Icon--arrowUp';
			var descClass = 'coral-Icon--arrowDown';
			scope.getSortClasses = function () {
				var classes = {};
				if (!scope.active) {
					classes['ad-Sort--inactive'] = true;
					classes[scope.defaultToAsc ? ascClass : descClass] = true;
				} else {
					classes[scope.asc ? ascClass : descClass] = true;
				}
				return classes;
			};
		}
	};
});
'use strict';

angular.module('common').directive('adSwitch', function ($timeout, $controller, CUI) {
	return {
		templateUrl: 'adobe/widgets/directives/ad-switch.tpl.html',
		restrict: 'E',
		replace: true,
		transclude: true,
		scope: {
			model: '=',
			trueLabel: '@',
			falseLabel: '@'
		},
		controller: function controller($scope, $element, $attrs) {}
	};
});
'use strict';

angular.module('common').directive('adTagList', function (_) {
	return {
		restrict: 'EA',
		replace: true,
		template: '<ad-react-component props="props" type="TagList"/>',
		//templateUrl: 'adobe/widgets/directives/ad-tag-list.tpl.html',
		scope: {
			items: '=',
			noItemsMessage: '@',
			whenRemoveItem: '&?',
			whenRemoveAll: '&?',
			showInfoIcon: '=',
			whenInfoClick: '&?',
			readOnly: '=?',
			hideRemoveAll: '@?',
			prefixAttribute: '@?'
		},
		link: function link(scope, element, attrs) {
			function removeItem(item) {
				var removedItem = item.originalItem,
				    removedItemIndex = scope.items.indexOf(removedItem);

				scope.items.splice(removedItemIndex, 1);

				scope.whenRemoveItem({ $removedItem: removedItem });

				updateProps();
				scope.$evalAsync();
			}

			function removeAllItems() {
				scope.whenRemoveAll({ $removedItems: scope.items });

				// Empty the array without causing angular to lose reference to it.
				scope.items.splice(0, scope.items.length);

				updateProps();
				scope.$evalAsync();
			}

			function updateProps() {
				var tags = _.map(scope.items, function (item) {
					var tag = {
						label: scope.prefixAttribute && item[scope.prefixAttribute] ? item[scope.prefixAttribute] + ' ' + item.name : item.name,
						id: item.id,
						originalItem: item,
						onRemove: removeItem
					};

					if (scope.showInfoIcon) {
						tag.rightIcon = {
							icon: 'infoCircle',
							onClick: function onClick(item, e) {
								scope.whenInfoClick({ '$event': e, '$item': item.originalItem });
							}
						};
					}

					return tag;
				});

				var props = {
					tags: tags,
					readOnly: scope.readOnly
				};

				if (!scope.hideRemoveAll) {
					props.onRemoveAll = removeAllItems;
				}

				if (scope.noItemsMessage) {
					props.noTagsMessage = scope.noItemsMessage;
				}

				if (attrs.className) {
					props.className = attrs.className;
				}

				scope.props = props;
			}

			scope.$watchCollection('items', function (newValue, oldValue) {
				if (oldValue !== newValue) {
					updateProps();
				}
			});

			updateProps();
		}
	};
});
'use strict';

angular.module('common').directive('adTooltip', function (_) {
	var l10nConfig = analyticsui['core'].l10nConfig;
	var Popover = analyticsui['ui-core'].Popover;

	return {
		restrict: 'E',
		templateUrl: 'adobe/widgets/directives/ad-tooltip.tpl.html',
		transclude: true,
		replace: true,
		controller: 'widgetBaseCtrl',
		scope: {
			link: '@?'
		},
		link: function link(scope, element, attrs) {
			// Set full Learn More link based off relative link passed in
			scope.fullLink = 'https://marketing.adobe.com/resources/help/' + l10nConfig.currentLocale + scope.link;
			scope.fullLink = scope.fullLink.replace('jp_JP', 'ja_JP');

			var $popover = element.find('.coral-Popover');
			var isOpen = false;
			var pendingClose = false;

			scope.popoverId = _.uniqueId('tooltip_');

			scope.icon = attrs.icon || 'helpCircle';
			scope.position = attrs.position || 'below';
			scope.tiptype = attrs.tiptype || 'info';
			scope.size = attrs.size || 'XS';

			scope.initialized = false;

			scope.hasIcon = function () {
				return typeof scope.icon !== 'undefined';
			};

			scope.showTooltip = function () {
				if (isOpen) {
					pendingClose = false;
					return;
				}

				isOpen = true;
				pendingClose = false;

				var $target = element.find('.tooltip-icon');
				var target = $target.get(0) || element.get(0);

				Popover.show({
					target: target,
					isModal: false,
					dialog: { padded: false },
					closeOnClickOutside: true,
					selector: $popover.get(0)
				});
			};

			scope.hideTooltip = function () {
				pendingClose = true;
				_.delay(function () {
					if (pendingClose) {
						isOpen = false;
						Popover.close($popover.get(0));
					}
				}, 400);
			};

			scope.$on('$destroy', function () {
				$popover.remove();
			});
		}
	};
});
'use strict';

angular.module('common').constant('TOTALS_REPORT_DIMENSION_ID', 'totals').factory('axleRankedTransform', function ($rootScope, TOTALS_REPORT_DIMENSION_ID) {
	/**
  * Axle transform: Converts axle response data into DV data
  * Iterates throught the response and generates a table of datasets
  *
  * @param axleData
  * @returns {{}}
  */
	function converAxleData2DV(axleData) {
		if (axleData.columns && axleData.rows && axleData.rows.length > 0 && axleData.columns.columnIds.length > 0 && axleData.columns.columnIds.length > 0) {
			var dimensionId, isTimeBased;

			if (axleData.columns.dimension === undefined) {
				dimensionId = TOTALS_REPORT_DIMENSION_ID;
				isTimeBased = false;
			} else {
				dimensionId = axleData.columns.dimension.id;
				// We need to know if the data is time based or not
				isTimeBased = axleData.columns.dimension.type === 'time' ? true : false;
			}

			var dvDataSets = {};
			// create array to hold dimension item values
			dvDataSets[dimensionId] = [];
			// create an id array
			dvDataSets.id = [];
			// data bucket array
			dvDataSets.metaData = [];
			// Traverse over the data and convert it to dv sets
			axleData.rows.forEach(function (item, itemIdx) {
				var itemValue = isTimeBased ? new Date(Date.parse(item.value)) : item.value,
				    metrics = item.metrics || [];

				if (!metrics && item.metric) {
					metrics = [item.metric];
				}

				dvDataSets[dimensionId].push(itemValue);
				// add unique(ish) id to dataset
				dvDataSets.id.push(dimensionId + '::' + item.itemId);
				// start adding data into data sets

				if (!dvDataSets.itemIds) {
					dvDataSets.itemIds = [];
				}

				dvDataSets.itemIds.push(item.itemId);
				dvDataSets.metaData.push({}); // MetaData object per item (row)

				//
				// If we find metrics on the item:
				// - push an object onto the metaData array
				// - Create an object mapped to the colId (colId is what is used in the y mappings array in getDefaultDataMappings
				// - In that colId object, store a reference to the metric object
				metrics.forEach(function (metric, metricIndex) {
					var colId = axleData.columns.columnIds[metricIndex];

					if (!dvDataSets.metaData[itemIdx]) {
						dvDataSets.metaData[itemIdx] = {};
					}

					dvDataSets.metaData[itemIdx][colId] = {
						metric: metric
					};
				});

				item.data.forEach(function (columnValue, columnIdx) {
					var colId = axleData.columns.columnIds[columnIdx];

					if (!dvDataSets[colId]) {
						dvDataSets[colId] = [];
					}

					dvDataSets[colId].push(columnValue);
				});
			});
			var dataMappings = getDefaultDataMappings(axleData);
			if (dataMappings) {
				dvDataSets.dataMappings = dataMappings;
			}
			return dvDataSets;
		} else {
			return {};
		}
	}

	/**
  *
  * @param axleData
  */
	function getDefaultDataMappings(axleData) {

		if (axleData.columns.columnIds && axleData.columns.columnIds.length > 0) {
			var hasDimensionColumn = axleData.columns.dimension !== undefined,
			    dimensionColumn = hasDimensionColumn ? axleData.columns.dimension.id : TOTALS_REPORT_DIMENSION_ID,
			    numColumns = axleData.summaryData.totals.length,
			    metricColumns = [];

			for (var i = 0; i < axleData.columns.columnIds.length; i++) {
				var columnIndex, columnId;

				if (hasDimensionColumn) {
					columnIndex = i;
				} else {
					columnIndex = i > 0 ? i % numColumns : 0;
				}

				columnId = axleData.columns.columnIds[columnIndex];

				if (metricColumns.indexOf(columnId) === -1) {
					metricColumns.push(columnId);
				}
			}

			return {
				area: {
					x: dimensionColumn,
					y: metricColumns
				},
				line: {
					x: dimensionColumn,
					y: metricColumns
				},
				horizontalbar: {
					x: dimensionColumn,
					y: metricColumns
				},
				verticalbar: {
					x: dimensionColumn,
					y: metricColumns
				},
				donut: {
					x: dimensionColumn,
					y: metricColumns
				},
				scatter: {
					x: dimensionColumn,
					y: metricColumns
				},
				bubble: {
					x: dimensionColumn,
					y: [metricColumns[0]],
					size: metricColumns[1]
				},
				treemap: {
					series: dimensionColumn,
					nodes: [metricColumns[0]]
				}
			};
		} else {
			return null;
		}
	}

	/*
  -------------------------------------------------------------------------------------------------------
  --											PUBLIC	API												---
  -------------------------------------------------------------------------------------------------------
  */

	$rootScope.AXLE_RANKED = converAxleData2DV;

	return {};
});
'use strict';

angular.module('common').factory('axle', function ($window, RankedRequest, $q, appModel) {
	var _analyticsui$core = analyticsui['core'],
	    l10nConfig = _analyticsui$core.l10nConfig,
	    _ = _analyticsui$core._;

	// Support backwards compatibility

	$window.axle = {
		RankedRequest: RankedRequest,
		ranked: function ranked() {
			return new RankedRequest().setAppService(appModel.appService).setRsid(appModel.reportSuite.rsid).setLocale(l10nConfig.currentLocale).setDisableOberonRemoteLoading(appModel.axle.disableOberonRemoteLoading);
		},
		getTopItems: function getTopItems(opts) {
			_.defaults(opts, { rsid: appModel.reportSuite.rsid, useEntity: false });
			var deferred = $q.defer();
			appModel.axle.getTopItems(opts).then(function (result) {
				// Map Entities back to objects to support old angular code
				result.rows = result.rows.map(function (row) {
					return {
						id: row.itemId,
						dimensionId: opts.dimension,
						name: row.value,
						itemType: 'item'
					};
				});
				deferred.resolve(result);
			}).catch(function (err) {
				deferred.reject(err);
			});

			return deferred.promise;
		}
	};

	return $window.axle;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('RankedRequest', function ($q, appModel) {
	var l10nConfig = analyticsui['core'].l10nConfig;
	var RankedRequest = analyticsui['model'].RankedRequest;

	var AngularRankedRequest = function (_RankedRequest) {
		_inherits(AngularRankedRequest, _RankedRequest);

		function AngularRankedRequest() {
			_classCallCheck(this, AngularRankedRequest);

			return _possibleConstructorReturn(this, (AngularRankedRequest.__proto__ || Object.getPrototypeOf(AngularRankedRequest)).apply(this, arguments));
		}

		_createClass(AngularRankedRequest, [{
			key: '_init',
			value: function _init(startDate, endDate) {
				_get(AngularRankedRequest.prototype.__proto__ || Object.getPrototypeOf(AngularRankedRequest.prototype), '_init', this).call(this, startDate, endDate);

				this._rsid = appModel.reportSuite.rsid;
				this._locale = l10nConfig.currentLocale;
			}

			/**
    * Wrap getData in order to invoke an angular digest cycle when getData is called.
    */

		}, {
			key: 'getData',
			value: function getData(config) {
				var deferred = $q.defer();
				_get(AngularRankedRequest.prototype.__proto__ || Object.getPrototypeOf(AngularRankedRequest.prototype), 'getData', this).call(this, config).then(function (result) {
					deferred.resolve(result);
				}).catch(function (err) {
					deferred.reject(err);
				});
				return deferred.promise;
			}
		}]);

		return AngularRankedRequest;
	}(RankedRequest);

	return AngularRankedRequest;
});
'use strict';

angular.module('common').factory('RankedResponse', function () {
	var RankedResponse = analyticsui['model'].RankedResponse;

	return RankedResponse;
});
'use strict';

angular.module('common').factory('topItemsService', function (axle) {
	return {
		getTopItems: axle.getTopItems.bind(axle)
	};
});
'use strict';

angular.module('common').filter('fragToOberonMetric', function () {
	return function (input, metricType, hasFragDataSource) {
		if (typeof hasFragDataSource !== 'boolean') {
			hasFragDataSource = true;
		}

		//Frag returns percentages as whole numbers instead of decimals but oberon returns them
		//as decimals. So we are going to divide a value by 100 before passing it into the metric
		//value filter to mimic the same type of data.
		if (hasFragDataSource && metricType === 'percent') {
			return input / 100;
		}

		return input;
	};
});
'use strict';

angular.module('common').filter('metric', function (appModel, _) {
	return function (input) {
		//
		// $filter('metric') can be called with old-style signature (i.e. individual options),
		// or new-style signature (i.e. options as `opts` object, to mirror `appModel.format`),
		// to support backwards compatibility.
		var opts = _.isObject(arguments[1]) ? arguments[1] : {
			type: arguments[1],
			precision: arguments[2],
			abbreviate: arguments[3]
		};

		return appModel.format(input, opts);
	};
});
'use strict';

angular.module('common').service('analyticsConfig', function ($window) {
	if ($window.OM && $window.OM.Config) {
		return $window.OM.Config;
	} else {
		return $window.adobe.analytics;
	}
});
'use strict';

angular.module('common').factory('landingPageService', function ($http, scUrl) {
	return {
		/*
   * Set a project as default landing page.
   * If the userIds param is passed, the project will be set for those users, and not the active user.
   * If the userIds param is omitted, the project will be set for the active user.
   */
		setLandingPage: function setLandingPage(projectId, userIds) {
			return $http({
				'method': 'POST',
				'url': scUrl.suitej('User.SetLanding', {
					'project': projectId,
					'force_push_to_users': userIds
				})
			});
		},

		/*
   * Sets the project launch page as the default landing page for the active user.
   */
		setLaunchAsLandingPage: function setLaunchAsLandingPage() {
			return $http({
				'method': 'POST',
				'url': scUrl.suitej('User.SetLanding', {
					'project': 'launch'
				})
			});
		}
	};
});
'use strict';

angular.module('common').factory('scUrl', function (appModel) {
	return appModel.omnitureUrl;
});
'use strict';

angular.module('common').factory('simpleAttributeService', function ($http, appModel, util, _, $q) {
	return {
		save: function save(serviceType, components, enable, cb) {
			cb = cb || function () {};

			// support single objects in addition to arrays of objects
			if (!angular.isArray(components)) {
				components = [components];
			}

			// POST for enabling, DELETE for disabling -- both are bulk operations
			if (enable) {
				return $http({
					method: 'POST',
					url: appModel.appService.baseURL + '/' + serviceType,
					data: components
				}).success(cb);
			} else {

				var promises = [];
				//If we have multiple components of different types we need to group them by componentType
				var groupedComponents = _.groupBy(components, 'componentType');

				_.forOwn(groupedComponents, function (value, key) {
					var componentType = key;
					var components = value;

					var request = $http({
						method: 'DELETE',
						url: appModel.appService.baseURL + '/' + serviceType,
						params: {
							'componentType': componentType,
							'componentIds': util.pluck(components, 'componentId').join(',')
						}
					});

					promises.push(request);
				});

				return $q.all(promises).then(cb);
			}
		}
	};
});
'use strict';

angular.module('common').factory('usageService', function ($http, appModel) {
	return {
		defaultUsage: {
			count: 0,
			mostRecentTimestamp: null,
			relevancyScore: 0
		},
		getSegmentUsage: function getSegmentUsage() {
			return this.getUsage('segments');
		},
		trackSegmentUsage: function trackSegmentUsage(itemIds) {
			return this.trackUsage('segments', itemIds);
		},
		trackMetricUsage: function trackMetricUsage(itemIds) {
			return this.trackUsage('metrics', itemIds);
		},
		trackUsage: function trackUsage(usageType, itemIds) {
			var items = itemIds.map(function (itemId) {
				return {
					rsid: appModel.reportSuite.rsid,
					itemId: itemId,
					itemDetails: {
						oid: appModel.omnitureUrl.oid
					}
				};
			});
			return $http({
				method: 'POST',
				url: appModel.appService.baseURL + '/usage/' + usageType,
				data: items
			});
		},
		getUsage: function getUsage(usageType) {
			return $http({
				method: 'GET',
				url: appModel.appService.baseURL + '/usage/' + usageType + '/summary',
				params: {
					expansion: 'relevancyScore,count,mostRecentTimestamp'
				}
			});
		}
	};
});
'use strict';

angular.module('common').factory('user', function (appModel) {
	return appModel.user;
});
'use strict';

angular.module('common').controller('dateRangePickerCtrl', function ($log, $scope, $attrs, $element, $timeout, calendarLocaleConfig, moment, _) {
	var currentMoment = moment(),
	    colCount = $attrs.colCount ? parseInt($attrs.colCount) : 4;

	$scope.minBound = moment($attrs.minBound);
	$scope.maxBound = $attrs.maxBound ? moment($attrs.maxBound) : moment().endOf($scope.rangeType); //Set to the last day of the month
	$scope.minYear = $scope.minBound.year();
	$scope.maxYear = $scope.maxBound.year();

	if ($scope.dateRangeString && $scope.dateRangeString.indexOf(' - ') !== -1) {
		var bounds = $scope.dateRangeString.split(' - ');
		$scope.lowerBound = moment(bounds[0]);
		$scope.upperBound = moment(bounds[1]);
	} else if ($scope.rangeType == 'quarter') {
		//Replace with correct code.
		$scope.lowerBound = moment().startOf($scope.rangeType);
		$scope.upperBound = moment().endOf($scope.rangeType);
	} else {
		$scope.lowerBound = moment().startOf($scope.rangeType);
		$scope.upperBound = moment().endOf($scope.rangeType);
	}

	$scope.selectedYear = $scope.lowerBound.year();
	if ($scope.rangeType == 'week') {
		$scope.selectedMonthName = $scope.lowerBound.format('MMMM');
		$scope.selectedMonth = $scope.lowerBound.month();
	}

	$scope.rangeList = getRangeList();
	$scope.currentRange = null;
	$scope.currentRangeString = '';

	$scope.simpleDatePickerId = _.uniqueId('simpleDatePickerId_');

	var $slidingContainer;

	$scope.scrollList = function () {
		var numPages = $scope.rangeList.length,
		    pageNum = $scope.selectedYear - $scope.minYear;

		$slidingContainer = $slidingContainer || $element.find('.coral-Datepicker-calendarSlidingContainer');

		if ($scope.rangeType == 'week') {
			//Multiply 12 to the page num to account for months.
			pageNum *= 12;
			//Add the months up to the current month.
			pageNum += $scope.lowerBound.month();
		}

		if (numPages > 1) {
			$slidingContainer.css('left', '-' + pageNum * 244 + 'px');
		}
	};

	$scope.onItemClick = function (item) {
		if ($scope.currentRange) {
			$scope.currentRange.selected = false;
		}

		$scope.currentRange = item;
		$scope.currentRange.selected = true;
		$scope.hide();
	};

	$scope.incrementYear = function () {
		$scope.selectedYear++;
	};

	$scope.decrementYear = function () {
		$scope.selectedYear--;
	};

	$scope.displayIncrementMonthButton = function () {
		if (!$scope.maxBound) {
			return true;
		}

		return $scope.selectedYear < currentMoment.year() || $scope.selectedYear == currentMoment.year() && $scope.selectedMonth < $scope.maxBound.month();
	};

	$scope.incrementMonth = function () {
		if ($scope.selectedMonth < 11) {
			$scope.selectedMonth++;
		} else {
			$scope.selectedYear++;
			$scope.selectedMonth = 0;
		}
	};

	$scope.displayDecrementMonthButton = function () {
		if (!$scope.minBound) {
			return true;
		}

		return $scope.selectedYear > $scope.minBound.year() || $scope.selectedYear == $scope.minBound.year() && $scope.selectedMonth > $scope.minBound.month();
	};

	$scope.decrementMonth = function () {
		if ($scope.selectedMonth > 0) {
			$scope.selectedMonth--;
		} else {
			$scope.selectedMonth = 11;
			$scope.selectedYear--;
		}
	};

	function getRangeList() {
		if ($scope.rangeType == 'year') {
			return getYearRangeList();
		} else if ($scope.rangeType == 'quarter') {
			return getQuarterRangeList();
		} else if ($scope.rangeType == 'month') {
			return getMonthRangeList();
		} else if ($scope.rangeType == 'week') {
			return getWeekRangeList();
		}
		return [];
	}

	function getYearRangeList() {
		var pages = [],
		    page = { rows: [] },
		    row = { cols: [] },
		    colNum = 0,
		    selectedYear;

		for (var y = $scope.minYear; y <= $scope.maxYear; y++) {
			if (colNum >= colCount) {
				page.rows.push(row);
				row = { cols: [] };
				colNum = 0;
			}

			var yearMoment = moment([y]),
			    year = {
				name: y,
				rangeMin: yearMoment.startOf('year'),
				rangeMax: yearMoment.clone().endOf('year'),
				enabled: true,
				selected: $scope.lowerBound.year() == y,
				current: currentMoment.year() == y
			};

			if (year.selected) {
				selectedYear = year;
			}

			row.cols.push(year);

			colNum++;
		}

		page.rows.push(row);
		pages.push(page);

		if (selectedYear) {
			selectedYear.selected = true;
			$timeout(function () {
				$scope.currentRange = selectedYear;
			});
		}

		return pages;
	}

	function getQuarterRangeList() {
		var pages = [],
		    currentQuarter = null,
		    selectedQuarter = null;

		for (var y = $scope.minYear; y <= $scope.maxYear; y++) {
			var page = { rows: [] };

			for (var i = 0; i < 4; i++) {
				var rangeMin = moment([y, i * 3]).startOf('month'),
				    rangeMax = rangeMin.clone().add('months', 2).endOf('month'),
				    row = { cols: [] };

				var quarter = {
					name: '(Q' + (i + 1) + ') ' + rangeMin.format('ll') + ' - ' + rangeMax.format('ll'),
					rangeMin: rangeMin,
					rangeMax: rangeMax,
					enabled: true,
					selected: false,
					current: false
				};

				if (y == currentMoment.year()) {
					if (rangeMin.month() <= currentMoment.month() && currentMoment.month() <= rangeMax.month()) {
						currentQuarter = quarter;
					} else if (rangeMin.month() > currentMoment.month()) {
						quarter.enabled = false;
					}
				}

				if ($scope.lowerBound.year() == rangeMin.year() && $scope.lowerBound.month() == rangeMin.month()) {
					selectedQuarter = quarter;
				}

				row.cols.push(quarter);
				page.rows.push(row);
			}
			pages.push(page);
		}

		selectedQuarter = selectedQuarter || currentQuarter;

		if (selectedQuarter) {
			selectedQuarter.selected = true;
			$timeout(function () {
				$scope.currentRange = selectedQuarter;
			});
		}

		return pages;
	}

	function getMonthRangeList() {
		var monthNames = calendarLocaleConfig.getCloudUIShortMonthNames();
		var pages = [];

		for (var y = $scope.minYear; y <= $scope.maxYear; y++) {
			//Empty out the current array.
			var page = { rows: [] },
			    row = { cols: [] },
			    colNum = 0;

			/* jshint loopfunc:true */
			monthNames.forEach(function (monthName, idx) {
				if (colNum >= colCount) {
					page.rows.push(row);
					row = { cols: [] };
					colNum = 0;
				}

				row.cols.push(createMonthObjectFromMoment(monthName, idx, moment([y, idx]).startOf('month')));

				colNum++;
			});

			page.rows.push(row);
			pages.push(page);
		}

		return pages;
	}

	function createMonthObjectFromMoment(monthName, idx, moment) {
		var month = {
			id: monthName,
			name: monthName,
			enabled: true,
			rangeMin: moment,
			rangeMax: moment.clone().endOf('month')
		};

		if ($scope.maxYear == moment.year()) {
			month.enabled = idx <= $scope.maxBound.month();
		} else if (moment.year() < currentMoment.year() && moment.year() == $scope.minYear) {
			month.enabled = idx >= $scope.minBound.month();
		}

		month.current = moment.year() == $scope.lowerBound.year() && currentMoment.month() === idx;
		month.selected = moment.year() == $scope.lowerBound.year() && $scope.lowerBound.month() === idx;

		if (month.selected) {
			//Set the currentRange in the next frame because at this point we are too late to be picked
			//up by date binding.
			$timeout(function () {
				$scope.currentRange = month;
			});
		}

		return month;
	}

	function getWeekRangeList() {
		var monthFullNames = calendarLocaleConfig.getCloudUIMonthNames(),
		    thisWeek,
		    selectedWeek,
		    pages = [];

		for (var y = $scope.minYear; y <= $scope.maxYear; y++) {
			/* jshint loopfunc:true */
			monthFullNames.forEach(function (monthName, idx) {
				if (y < currentMoment.year() || y == currentMoment.year() && idx <= currentMoment.month()) {
					var m = moment([y, idx]),
					    lastOfMonth = m.clone().endOf('month'),
					    firstOfMonth = m.clone().startOf('month'),
					    currentWeek = firstOfMonth.clone().day(0),
					    startOfWeek,
					    endOfWeek,
					    page = { rows: [] },
					    weekObj,
					    row;

					while (currentWeek < lastOfMonth) {
						row = { cols: [] };
						startOfWeek = currentWeek.clone();
						endOfWeek = currentWeek.clone().day(6);
						weekObj = {
							name: startOfWeek.format('ll') + ' - ' + endOfWeek.format('ll'),
							rangeMin: currentWeek.clone(),
							rangeMax: currentWeek.clone().day(6),
							enabled: true,
							current: false,
							selected: false
						};

						row.cols.push(weekObj);

						if (y == currentMoment.year() && idx == currentMoment.month() && startOfWeek <= currentMoment && currentMoment <= endOfWeek) {
							weekObj.current = true;
							thisWeek = weekObj;
						}

						if (y == $scope.upperBound.year() && idx == $scope.upperBound.month() && startOfWeek <= currentMoment && currentMoment <= endOfWeek) {
							thisWeek = weekObj;
						}

						if (y > currentMoment.year() || y == currentMoment.year() && idx >= currentMoment.month() && endOfWeek > currentMoment.clone().endOf('week')) {
							weekObj.enabled = false;
						}

						if (startOfWeek <= $scope.lowerBound && $scope.lowerBound <= endOfWeek) {
							selectedWeek = weekObj;
						}

						page.rows.push(row);
						currentWeek.add('d', 7);
					}

					pages.push(page);
				}
			});
		}

		selectedWeek = selectedWeek || thisWeek;

		if (selectedWeek) {
			selectedWeek.selected = true;
			$timeout(function () {
				$scope.currentRange = selectedWeek;
			});
		}

		return pages;
	}
});
'use strict';

angular.module('common').directive('anDateRangePicker', function ($timeout, calendarLocaleConfig, moment, $window) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		templateUrl: 'analytics/calendar/directives/an-date-range-picker.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			dateRangeString: '=', //(optional) the date range string
			rangeChange: '&', // a handler for when the date is changed.
			rangeType: '@'
		},
		controller: 'dateRangePickerCtrl',
		link: function link(scope, element, attrs) {
			var datePopover = element.find('.coral-Popover');

			datePopover.on('hide', function () {
				if (scope.rangeChange) {
					scope.rangeChange({
						newValue: scope.currentRange.rangeMin.toISOString() + ' - ' + scope.currentRange.rangeMax.toISOString()
					});
				}
			});

			scope.hide = function () {
				Popover.close(datePopover.get(0));
			};

			scope.$watch('selectedYear', function () {
				$timeout(function () {
					scope.scrollList();
				});
			});

			scope.$watch('selectedMonth', function (selectedMonth) {
				scope.lowerBound = moment([scope.selectedYear, selectedMonth]);
				scope.upperBound = scope.lowerBound.clone().add('d', 6);
				scope.selectedMonthName = scope.lowerBound.format('MMMM');
				$timeout(function () {
					scope.scrollList();
				});
			});

			scope.$watch('currentRange', function (currentRange) {
				if (currentRange) {
					scope.currentRangeString = currentRange.rangeMin.format('ll') + ' - ' + currentRange.rangeMax.format('ll');
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('anDatepicker', function (moment, _) {
	return {
		restrict: 'EA',
		replace: true,
		template: '<ad-react-component props="props" type="CalendarInput" />',
		scope: {
			date: '=',
			dateChange: '&',
			blurHideCallback: '&?',
			dateType: '=?', /* date|datetime */
			size: '=',
			disableMinutes: '=?',
			editTimeOnly: '='
		},
		link: function link($scope) {
			function updateProps() {
				var disableMinutes = _.get($scope, 'disableMinutes', true);

				var props = {
					value: moment($scope.date),
					singleDate: true,
					dateType: "start",
					includeTime: $scope.dateType === 'datetime',
					disableMinutes: disableMinutes,
					disableSeconds: true,
					size: $scope.size,
					editTimeOnly: $scope.editTimeOnly,
					onChange: function onChange(value) {
						var dateStr = value.format('YYYY-MM-DDTHH:mm:ss');
						$scope.dateChange({ dateString: dateStr });
						$scope.$evalAsync();
					},
					onBlur: function onBlur(value) {
						if ($scope.blurHideCallback) {
							$scope.blurHideCallback(value);
						}
						$scope.$evalAsync();
					}
				};

				$scope.props = props;
			}

			$scope.$watch('date', function (oldValue, newValue) {
				updateProps();
			});

			updateProps();
		}
	};
});
'use strict';

angular.module('common').factory('calendarLocaleConfig', function () {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var cloudUIMonthLocaleMap = {
		'en': 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
		'fr': 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
		'zh-cn': '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
		'zh-tw': '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
		'de': 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
		'ja': '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
		'ko': '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
		'es': 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
		'pt-br': 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_')
	},
	    cloudUIMonthShortLocaleMap = {
		'en': 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
		'fr': 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
		'zh-cn': '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
		'zh-tw': '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
		'de': 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez'.split('_'),
		'ja': '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
		'ko': '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
		'es': 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
		'pt-br': 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_')
	},
	    cloudUIDayLocaleMap = {
		'en': 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
		'fr': 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
		'zh-cn': '日_一_二_三_四_五_六'.split('_'),
		'zh-tw': '日_一_二_三_四_五_六'.split('_'),
		'de': 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
		'ja': '日_月_火_水_木_金_土'.split('_'),
		'ko': '일_월_화_수_목_금_토'.split('_'),
		'es': 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
		'pt-br': 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_')
	},
	    phpToMomentLocaleMap = {
		'en_US': 'en',
		'fr_FR': 'fr',
		'zh_CN': 'zh-cn',
		'zh_TW': 'zh-tw',
		'de_DE': 'de',
		'jp_JP': 'ja',
		'ja_JP': 'ja',
		'ko_KR': 'ko',
		'es_ES': 'es',
		'pt_BR': 'pt-br'
	};

	return {
		getCloudUIMonthNames: function getCloudUIMonthNames() {
			return cloudUIMonthLocaleMap[this.getMomentLocale()];
		},
		getCloudUIShortMonthNames: function getCloudUIShortMonthNames() {
			return cloudUIMonthShortLocaleMap[this.getMomentLocale()];
		},
		getCloudUIDayNames: function getCloudUIDayNames() {
			return cloudUIDayLocaleMap[this.getMomentLocale()];
		},
		getMomentLocale: function getMomentLocale() {
			return phpToMomentLocaleMap[l10nConfig.currentLocale];
		}
	};
});
'use strict';

angular.module('common').directive('anAnomalyLineChartInfo', function ($filter, util, eventBus) {
	return {
		restrict: 'EA',
		replace: true,
		templateUrl: 'analytics/charts/directives/an-anomaly-line-chart-info.tpl.html',
		scope: {
			anomalyDate: '=',
			viewPeriod: '=?',
			actualValue: '=',
			expectedValue: '=',
			metricName: '=',
			metricType: '=?',
			metricPrecision: '=?',
			metricPolarity: '=?',
			isCompact: '=?',
			hasFragDataSource: '=?'
		},
		controller: function controller($scope, $element, $attrs) {
			$scope.totalMetricLabel = '';

			eventBus.subscribe('metricDataReceived', function (metric) {
				$scope.totalMetricLabel = util.sprintf($filter('l10n')(['adChartCompactMetricLabel', 'Total %s']), $scope.metricName);
			});
		}
	};
});
'use strict';

angular.module('common').directive('anAnomalyLineChart', function ($filter, util, eventBus, anomalyService, moment, spinnerService, $timeout, dv, $window) {
	return {
		restrict: 'EA',
		replace: true,
		template: '<div class="anomaly-line-chart" ng-init="loadChart()"></div>',
		scope: {
			chartData: '=?',
			metricId: '=?',
			selectedAnomaly: '=?',
			focusAnomaly: '=?',
			showHoverTooltips: '=?',
			hasBackground: '=?',
			hasBorder: '=?',
			limit: '=?'
		},
		controller: function controller($scope, $element, $attrs) {

			$scope.loadChart = function () {
				if ($scope.chartData) {
					$timeout(function () {
						$scope.renderChart($scope.chartData, $scope.selectedAnomaly);
					});
				}
			};

			if ($scope.hasBackground) {
				$element.addClass('chartBackground');
			}
			if ($scope.hasBorder) {
				$element.addClass('chartBorder');
			}

			if (typeof $scope.showHoverTooltips === 'undefined') {
				$scope.showHoverTooltips = true;
			}

			eventBus.subscribe('lineChartDataLoaded', $scope, function (lineChartData) {
				spinnerService.show('lineChartSpinner');
				var viewPeriod = {
					start: moment(lineChartData.startDate),
					end: moment(lineChartData.endDate)
				};
				var trainPeriod = {
					start: moment(lineChartData.startDate).subtract('days', lineChartData.trainingDays),
					end: moment(lineChartData.startDate).subtract('days', 1)
				};
				anomalyService.load(trainPeriod, viewPeriod, $scope.segmentIds, [lineChartData.metricId]).then(function (anomalyData) {
					$scope.chartData = anomalyData.detail[0].trends;
					$scope.selectedAnomaly = lineChartData.anomalyDate;
					$scope.renderChart($scope.chartData, $scope.selectedAnomaly);
					spinnerService.hide('lineChartSpinner');
				});
			});

			// optionally accepts a metric id (which should be unique) so you only have to render one line chart at a time
			eventBus.subscribe('renderLineChart', $scope, function (metricId) {
				if ($scope.chartData && (!metricId || metricId == $scope.metricId)) {
					$scope.renderChart($scope.chartData, $scope.selectedAnomaly);
				}
			});

			// 'selectedAnomaly' (optional) is the Date which will be selected in the chart (will appear blue)
			$scope.renderChart = function (chartData, selectedAnomaly) {

				if ($element.width() === 0 || $element.height() === 0) {
					return;
				} // the chart doesn't render properly if the element hasn't been created yet.

				chartData.x = chartData.date; //Note this is being done to account for an issue in DV's inspector behavior that is preventing it from reading the mapped value of date instead of x

				// set the selected anomaly so that it appears blue in the line chart
				if (selectedAnomaly) {
					for (var i = 0; i < chartData.x.length; i++) {
						chartData.x[i].focused = moment(chartData.x[i]).format('MM-DD-YYYY') == moment(selectedAnomaly).format('MM-DD-YYYY');
						// determine if user has clicked the anomaly that was already selected, and if so unselect it
						if (chartData.x[i].focused && $attrs.clickable) {
							var oldSelectedAnomaly = $scope.selectedAnomaly;
							$scope.selectedAnomaly = chartData.x[i];
							if (chartData.x[i] == oldSelectedAnomaly) {
								$scope.selectedAnomaly = null;
								chartData.x[i].focused = false;
							}
						}
					}
					if ($attrs.clickable) {
						util.safeApply($scope); // so that the Analyze button appears right when the user clicks
					}
				}

				var behaviorsArray = [dv.behavior.inspector().label(function (d) {
					return $filter('date')(d, 'shortDate');
				}).inspectorMove($scope._mouseOverPoint.bind($scope)).inspectorOut($scope._mouseOffPoint.bind($scope)).orientation('top')];

				if (!$scope.showHoverTooltips) {
					behaviorsArray = [];
				}

				// Optimally we wouldn't have to go through the process of constructing the chart each time.
				// Instead, we would reuse the same chart object and just call render(). Unfortunately,
				// dv is too buggy at the moment with that workflow and ends up rendering some wonky charts.
				$scope.chart = dv.chart().data(chartData).layers([dv.geom.ribbon().map('yMin', 'lowerBound').map('yMax', 'upperBound').set('alpha', 0.05).interpolate('cardinal'), dv.geom.line().map('y', 'value').set('alpha', 0.5).set('linetype', 'dotted').interpolate('cardinal'), dv.geom.line().map('y', 'origValue'), dv.geom.point().map('y', 'origValue').set('fill', '#FFF').set('stroke', '#30385E').set('alpha', function (d, i) {
					return d.data.origValue > d.data.upperBound || d.data.origValue < d.data.lowerBound ? 1 : 0;
				}), dv.geom.point().map('y', 'origValue').set('fill', '#3287d2').set('stroke', '#30385E').set('alpha', function (d, i) {
					return d.x.focused ? 1 : 0;
				})]).guide('all', 'none').width($element.width()).height($element.height()).map('x', 'x', dv.scale.time()) //See the note about data.trends.x above. The second element should actually be date instead of x, but we are doing this to allow the inspector behavior to work
				.behaviors(behaviorsArray).set('fill', '#000').set('stroke', '#B9B9B9').padding({ 'left': 0, 'top': 25, 'right': 0, 'bottom': 10 }).duration(0).parent($element.get(0)).render(); //The anomaly drawer actually has 2 child divs, one for the chart, one for the footer
			};

			$scope._mouseOverPoint = function (d, index) {
				var allData = $scope.chart.data().data,
				    dataPoint = {};
				if (allData) {
					for (var propertyName in allData) {
						if (Object.prototype.hasOwnProperty.call(allData, propertyName)) {
							dataPoint[propertyName] = allData[propertyName][index];
						}
					}
				}
				util.safeApply($scope, function () {
					$scope.focusAnomaly = dataPoint;
				});
			};

			$scope._mouseOffPoint = function () {
				util.safeApply($scope, function () {
					$scope.focusAnomaly = null;
				});
			};

			$(window).on('resize', util.debounce(function () {
				if ($scope.chartData) {
					$scope.renderChart($scope.chartData, $scope.selectedAnomaly);
				}
			}, 50));

			$($window.document).on('leftRailPinnedStateChange rightRailPinnedStateChange', onRailsPinnedStateChange);

			function onRailsPinnedStateChange() {
				$timeout(function () {
					if ($scope.chartData) {
						$scope.renderChart($scope.chartData, $scope.selectedAnomaly);
					}
				}, 500);
			}

			// event to re-render the chart when clicked (to highlight the selected anomaly)
			$element.click(function () {
				if ($scope.chartData && $attrs.clickable) {
					$scope.renderChart($scope.chartData, $scope.focusAnomaly.date);
				}
			});

			$scope.$on('$destroy', function () {
				$($window.document).off('leftRailPinnedStateChange rightRailPinnedStateChange', onRailsPinnedStateChange);
			});
		}
	};
});
'use strict';

angular.module('common').directive('anCoachmark', function (coachmarkService, CoachmarkNamespace) {
	return {
		restrict: 'A',
		controller: function controller($scope, $element, $attrs) {
			var coachmarkParts = $attrs.anCoachmark.split('.'),
			    namespace = coachmarkParts[0],
			    stepId = coachmarkParts[1];

			// Add this element to its 'step'
			CoachmarkNamespace.getCoachmarkNamespace(namespace).getStep(stepId).setElement($element[0]);
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').factory('CoachmarkNamespace', ['util.cls', '_', 'coachmarkService', 'CoachmarkStep', '$q', 'eventBus', '$timeout', 'featureAccess', function (cls, _, coachmarkService, CoachmarkStep, $q, eventBus, $timeout, featureAccess) {

		// This is used as an interface for all of our coachmarks
		var CoachmarkNamespace = cls.create({

			_constructor: function _constructor() {
				this.steps = [];
				this.events = {};
				this.requiredFeatureAccess = '';
				this.namespace = 'default';
				this._beforeStepFns = [];
				this._onStepFns = [];
				this._afterStepFns = [];
			},

			// Set the namespace
			setNamespace: function setNamespace(ns) {
				this.namespace = ns;
				coachmarkService.addCoachmarkNamespaceToHistory(this.namespace);
				CoachmarkNamespace.addCoachmarkNamespace(this.namespace, this);
				return this;
			},

			// Set the events for this namespace
			// These will be run on every step
			setEvents: function setEvents(events) {
				this._pluckEvents(events);
				return this;
			},

			// Set the steps for this namespace
			setSteps: function setSteps(steps) {
				var self = this;
				_.each(steps, function (step, i) {
					var coachmarkStep = new CoachmarkStep(self, step, i);
					self.steps.push(coachmarkStep);
					self._pluckEvents(coachmarkStep, coachmarkStep.stepNumber);
				});
				return this;
			},

			// Get a step by id
			getStep: function getStep(stepId) {
				var step = _.filter(this.steps, function (step) {
					return step.id == stepId;
				})[0];
				if (!step) {
					throw 'The step id "' + stepId + '" was not found in the "' + this.namespace + '" namespace.';
				}
				return step;
			},

			getIntro: function getIntro() {
				return coachmarkService.intros[this.namespace];
			},

			// Start the coachmarks when the expression is truthy
			startWhen: function startWhen(expr, $scope) {
				var self = this;

				var unwatch = $scope.$watch(expr, function (newVal, oldVal) {
					if (newVal == oldVal) {
						return;
					}
					if (newVal) {
						self.start();
						unwatch();
					}
				});
				return this;
			},

			// Start the coachmarks when an eventBus event happens
			startWhenEventBusEvent: function startWhenEventBusEvent(evt, $scope) {
				var self = this;

				var unsubscribe = eventBus.subscribe(evt, $scope, function () {
					$timeout(function () {
						self.start();
					}, 50); // Wait just a little bit before starting
					unsubscribe();
				});
				return this;
			},

			// Start the coachmarks immediately
			start: function start() {
				var self = this;

				if (coachmarkService.disabled()) {
					return;
				}

				// Check to see if it requires featureAccess
				if (this.requiredFeatureAccess.length) {
					var featureAccessParts = this.requiredFeatureAccess.split('.'),
					    appName = featureAccessParts[0],
					    feature = featureAccessParts[1];

					featureAccess.load(appName).then(function () {
						if (featureAccess.isFeatureSupported(appName, feature)) {
							triggerStart();
						}
					});
				} else {
					triggerStart();
				}

				function triggerStart() {
					var events = self._compileEvents();

					// Add all of the steps to the coachmark service
					_.each(self.steps, function (step) {
						coachmarkService.addStep(step);
					});

					coachmarkService.start(self.namespace, events);
				}
				return this;
			},

			// A function to be called after we end the coachmarks
			aferEnd: function aferEnd() {},

			// Pluck the events from an object
			_pluckEvents: function _pluckEvents(o, stepNumber) {
				var curStep = -1;
				if (o.beforeStep) {
					this._beforeStepFns.push(function (targetElement, intro) {
						if (!stepNumber || stepNumber === intro._currentStep) {
							// The beforeStep function can return a promise so that the dom can update
							// before starting the current step

							// We only want to run the beforeStep function once (instead of infinity times)
							if (curStep === stepNumber) {
								return;
							}
							curStep = stepNumber;

							// Stop intro.js so we can run our beforeStep function
							intro.exit();

							$q.when(o.beforeStep(targetElement, intro)).then(function () {
								// Remove the overlay (if it still exists)
								// When we restart intro.js it will create a new overlay
								var $overlay = $('.introjs-overlay');
								if ($overlay.length) {
									$overlay.remove();
								}

								// Start up intro.js where we left off
								if (stepNumber === 0) {
									intro.start();
								} else {
									intro.goToStep(stepNumber).start();
								}
							});
						}
					});
				}
				if (o.onStep) {
					this._onStepFns.push(function (targetElement, intro) {
						if (!stepNumber || stepNumber === intro._currentStep) {
							o.onStep(targetElement, intro);
						}
					});
				}
				if (o.afterStep) {
					this._afterStepFns.push(function (targetElement, intro) {
						if (!stepNumber || stepNumber === intro._currentStep) {
							o.afterStep(targetElement, intro);
						}
					});
				}
				if (o.afterEnd) {
					this.afterEnd = o.afterEnd;
				}
			},

			// Combine all of the events and put them in intro.js format
			_compileEvents: function _compileEvents() {
				var self = this;
				return {
					onbeforechange: function onbeforechange(targetElement, intro) {
						_.each(self._beforeStepFns, function (fn) {
							fn.call(self, targetElement, intro);
						});
					},
					onchange: function onchange(targetElement, intro) {
						_.each(self._onStepFns, function (fn) {
							fn.call(self, targetElement, intro);
						});
					},
					onafterchange: function onafterchange(targetElement, intro) {
						_.each(self._afterStepFns, function (fn) {
							fn.call(self, targetElement, intro);
						});
					},
					oncomplete: function oncomplete() {
						if (self.afterEnd) {
							self.afterEnd();
						}
					},
					onexit: function onexit() {
						if (self.afterEnd) {
							self.afterEnd();
						}
					}
				};
			}

		});

		// We'll keep track of all of our coachmark namespaces here for easy lookup
		CoachmarkNamespace._coachmarks = {};

		CoachmarkNamespace.addCoachmarkNamespace = function (namespace, coachmarks) {
			CoachmarkNamespace._coachmarks[namespace] = coachmarks;
		};

		CoachmarkNamespace.getCoachmarkNamespace = function (namespace) {
			var coachmarkNamespace = CoachmarkNamespace._coachmarks[namespace];
			if (!coachmarkNamespace) {
				throw 'The coachmark namespace "' + namespace + '" has not been set yet.';
			}
			return coachmarkNamespace;
		};

		return CoachmarkNamespace;
	}]);
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').factory('coachmarkService', function ($filter, introJs, $timeout, user, trackService, util, $q, $window, _, eventBus, appModel) {
		var introInProgress = false;

		var coachmarkService = {

			coachmarks: {},

			_isDisabled: false,

			disabled: function disabled(val) {
				if (val !== undefined) {
					this._isDisabled = val;
				}
				return this._isDisabled;
			},

			currentIntro: null,

			namespaceQueue: [],

			namespaceHistory: ['default'], // used for clearing coachmarks.

			intros: {},

			options: {
				steps: [],
				showStepNumbers: false,
				exitOnOverlayClick: false,
				nextLabel: $filter('l10n')(['nextLabel', 'Next']),
				prevLabel: $filter('l10n')(['backLabel', 'Back']),
				skipLabel: $filter('l10n')(['exitLabel', 'Exit']),
				doneLabel: $filter('l10n')(['doneLabel', 'Done']),
				tooltipClass: 'coachmark-step'
			},

			addStep: function addStep(step) {
				if (step.element) {
					// don't add the step if there is no element

					step.positionOriginal = step.position; // Store the original so we can set it right before the step executes.
					step.elementOriginal = step.element;
					step.element = null;

					if (step.cssClass) {
						step.tooltipClass = this.options.tooltipClass + ' ' + step.cssClass; // Add the additional step css class to the global class.
					}

					step.namespace = step.namespace || 'default';
					// add the namespace if it doesn't have any steps yet
					if (!this.coachmarks[step.namespace]) {
						this.coachmarks[step.namespace] = [];
					}

					var steps = this.coachmarks[step.namespace];

					if (!this.isDuplicateStep(step, steps)) {
						if (step.title) {
							step.intro = '<div class="coachmark-title">' + step.title + '</div>' + step.intro;
						}
						steps.push(step);
						steps.sort(function (a, b) {
							return a.stepNumber - b.stepNumber;
						});
					}
				}
			},

			start: function start(namespace, events) {
				var serverRender = $window.adobe.analytics && $window.adobe.analytics.serverRender;
				if (serverRender) {
					return;
				}

				namespace = namespace || 'default';
				events = events || {};

				if (this.disabled() || appModel.isLocalDev) {
					return;
				}

				var intro = introJs();

				this.initIntro(intro, events, namespace);

				this.namespaceQueue.push(namespace);
				this.intros[namespace] = intro;

				if (!introInProgress) {
					this.runNextNamespace();
				}
			},

			getCurrentStep: function getCurrentStep(intro) {
				return intro._introItems[intro._currentStep];
			},

			initIntro: function initIntro(intro, events, namespace) {
				var self = this,
				    trackedSteps = [],
				    namespaceKey = this.getNamespaceKey(namespace),
				    queue = this.namespaceQueue;

				this.options.steps = this.coachmarks[namespace];

				// only show the bullets if there is more than one step in the coachmarks
				this.options.showBullets = this.options.steps.length != 1;

				intro.setOptions(this.options);

				intro.onexit(function () {
					$('.endor-Panel').removeClass('introjs-inProgress');

					user.setPersistentAttribute(namespaceKey, true); // indicates user has completed this intro
					if (events.onexit) {
						events.onexit();
					}
					trackService.trackAction(true, 'Coachmarks Exited', {
						stepsFollowed: trackedSteps.join(', '),
						totalSteps: trackedSteps.length,
						lastStep: trackedSteps[trackedSteps.length - 1],
						coachmarkNamespace: namespace
					});

					introInProgress = false;
					if (queue.length) {
						self.runNextNamespace();
					}
				});
				intro.oncomplete(function () {
					$('.endor-Panel').removeClass('introjs-inProgress');

					user.setPersistentAttribute(namespaceKey, true); // indicates user has completed this intro
					if (events.oncomplete) {
						events.oncomplete();
					}
					trackService.trackAction(true, 'Coachmarks Completed', {
						stepsFollowed: trackedSteps.join(', '),
						totalSteps: trackedSteps.length,
						lastStep: trackedSteps[trackedSteps.length - 1],
						coachmarkNamespace: namespace
					});

					introInProgress = false;
					this.currentIntro = null;
					if (queue.length) {
						self.runNextNamespace();
					}
				});
				if (events.onchange) {
					intro.onchange(function (targetElement) {
						$timeout(function () {
							events.onchange(targetElement, intro);
						});
					});
				}
				intro.onbeforechange(function (targetElement) {
					var step = self.getCurrentStep(intro);

					// If there was an original element, use it.
					if (step.elementOriginal) {
						if (typeof step.elementOriginal == 'function') {
							var newElement = step.elementOriginal();
							if (newElement instanceof jQuery) {
								newElement = newElement.get(0);
							}
							if (newElement) {
								step.element = newElement; // If there is a new element, we want to use it.
							} else {
								step.positionOriginal = 'floating'; // There is no element, so position better float.
							}
						} else {
							step.element = step.elementOriginal;
						}
						step.position = step.positionOriginal; // Position is wiped out. Reset it to be whatever was set originally.
						targetElement = step.element; // Set the targetElement so the scrolling below works.
					}

					var scrollToStep = intro._options.steps[intro._currentStep].scrollTo !== false;
					if (scrollToStep && intro._options.scrollToElement && !self.isInViewport(targetElement)) {
						self.scrollIntoView(targetElement).then(function () {
							self.placeHelperElement(targetElement);
						});
					}

					if (events.onbeforechange) {
						$timeout(function () {
							events.onbeforechange(targetElement, intro);
						}, 0);
					}
				});
				intro.onafterchange(function (targetElement) {
					if (intro._currentStep === intro._options.steps.length - 1) {
						// last step
						$('.introjs-tooltipbuttons').addClass('last-coachmark');
						$('.introjs-tooltipbuttons').removeClass('first-coachmark');
						$('.introjs-tooltiptext').addClass('last-coachmark');
					} else if (intro._currentStep === 0) {
						// first step
						$('.introjs-tooltipbuttons').addClass('first-coachmark');
						$('.introjs-tooltipbuttons').removeClass('last-coachmark');
						$('.introjs-tooltiptext').removeClass('last-coachmark');
					} else {
						// all steps besides first and last
						$('.introjs-tooltipbuttons').removeClass('first-coachmark');
						$('.introjs-tooltipbuttons').removeClass('last-coachmark');
						$('.introjs-tooltiptext').removeClass('last-coachmark');
					}

					//Fix a stupid intro.js bug (happens when the first step is position:'top'||'bottom')
					if (intro._currentStep === 0) {
						var $tooltip = $('.introjs-tooltip'),
						    bottom = $tooltip.css('bottom'),
						    top = $tooltip.css('top'),
						    TOOLTIP_ADJUSTMENT = 45;

						if (bottom && bottom != 'auto') {
							bottom = parseInt(bottom);
							if (bottom) {
								$tooltip.css('bottom', bottom - TOOLTIP_ADJUSTMENT);
							}
						} else if (top && top != 'auto') {
							top = parseInt(top);
							if (top) {
								$tooltip.css('top', top - TOOLTIP_ADJUSTMENT);
							}
						}

						// intro.js sets the 'bottom' and 'top' css property on tooltip of the first item before we can add classes to the tooltip
						// When we increase the size of the 'Next' button, the tooltip gets pushed
						bottom = parseInt(bottom);
						if (bottom) {
							$tooltip.css('bottom', bottom - TOOLTIP_ADJUSTMENT);
						}
					}

					if (events.onafterchange) {
						$timeout(function () {
							events.onafterchange(targetElement, intro);
						});
					}

					//Track the sequential steps. Ignore any event where there is no _currentStep
					//or where it fires an event more than once for a single step.
					if (!isNaN(intro._currentStep) && intro._currentStep + 1 !== trackedSteps[trackedSteps.length - 1]) {
						trackedSteps.push(intro._currentStep + 1);
					}
				});
			},

			runNextNamespace: function runNextNamespace() {
				this.runNamespace(this.namespaceQueue.shift());
			},

			runNamespace: function runNamespace(namespace) {
				var self = this,
				    queue = this.namespaceQueue,
				    introHash = this.intros;
				introInProgress = true;

				// don't start intro unless user has not already seen this intro
				this.isComplete(namespace).then(function (completed) {
					if (!completed) {
						var introToStart = introHash[namespace];
						if (!introToStart) {
							return;
						}
						$timeout(function () {
							$('.endor-Panel').addClass('introjs-inProgress');

							$('body').on('click', '.introjs-overlay', function () {
								eventBus.publish('disableCoachmarks');
								$('.introjs-overlay').remove();
							});

							coachmarkService.currentIntro = introToStart;
							if (coachmarkService.disabled()) {
								return;
							}
							introToStart.start();

							trackService.trackAction(true, 'Coachmarks Started', { coachmarkNamespace: namespace });
						}, 10); // wait until the next frame
					} else {
						introInProgress = false;
						if (queue.length) {
							self.runNextNamespace();
						}
					}
				});
			},

			getNamespaceKey: function getNamespaceKey(namespace) {
				return 'sc://coachmarks/' + namespace;
			},

			isComplete: function isComplete(namespace) {
				var nsKey = this.getNamespaceKey(namespace),
				    deferred = $q.defer(),
				    lokiOverridesComplete = this.lokiOverridesComplete(namespace);

				var FeatureFlag = window.analyticsui.model.FeatureFlag;
				// If loki[showcoachmarks]=0 then hide never show any of the coachmarks.
				if (util.getQueryParam('loki[showcoachmarks]') === '0' || FeatureFlag.isActive('serverRender')) {
					deferred.resolve(true);
					return deferred.promise;
				}

				user.getPersistentAttribute(nsKey).then(function (completed) {
					deferred.resolve(completed && !lokiOverridesComplete, namespace);
				});

				return deferred.promise; //return the promise of knowing whether the coachmark namespace has been completed.
			},

			lokiOverridesComplete: function lokiOverridesComplete(namespace) {
				var showAll = util.getQueryParam('loki[showcoachmarks]') === '1',
				    showNamespace = util.getQueryParam('loki[showcoachmarks][' + namespace + ']') === '1';

				return showAll || showNamespace;
			},

			isDuplicateStep: function isDuplicateStep(step, steps) {
				var stepNum = step.stepNumber,
				    namespace = step.namespace,
				    didFindDuplicate = steps.some(function (s) {
					return s.stepNumber == stepNum && s.namespace == namespace;
				});

				return didFindDuplicate;
			},

			isInViewport: function isInViewport(elem) {
				var viewportRect = $('.shell-scroll-content')[0].getBoundingClientRect(),
				    targetRect = elem.getBoundingClientRect();

				return targetRect.top >= 0 && targetRect.left >= 0 && targetRect.bottom + 80 <= viewportRect.height && targetRect.right <= viewportRect.height;
			},

			scrollIntoView: function scrollIntoView(targetElement, skipOffsetParentCheck) {
				var endorContent = $($('.shell-scroll-content')[0]),
				    viewportRect = endorContent[0].getBoundingClientRect(),
				    targetRect = targetElement.getBoundingClientRect();

				var offsetParent = targetElement,
				    _left = 0,
				    _top = 0;

				if (skipOffsetParentCheck) {
					_top = targetRect.top;
				} else {
					while (offsetParent) {
						_left += offsetParent.offsetLeft;
						_top += offsetParent.offsetTop;

						offsetParent = offsetParent.offsetParent;
						if ($(offsetParent).hasClass('endor-Panel-contentMain')) {
							offsetParent = null;
						}
					}
				}

				var shouldAnimate = false,
				    newScrollTop,
				    deferred = $q.defer();

				if (targetRect.bottom > viewportRect.bottom) {
					//bottom of targetElement is below the fold
					shouldAnimate = true;
					newScrollTop = _top - viewportRect.top;
				} else if (targetRect.top < viewportRect.top) {
					//top of targetElement is above the fold
					shouldAnimate = true;
					newScrollTop = _top - 30;
				}

				if (shouldAnimate) {
					endorContent.animate({ scrollTop: newScrollTop }, 250, function () {
						deferred.resolve();
					});
				} else {
					deferred.resolve();
				}

				return deferred.promise;
			},

			//
			// Override IntroJS's helper layer placement because our scrolling
			// takes placee in the 'js-endor-content' element, not the window.
			// Because of this, IntroJS can put helperLayer in the wrong place
			placeHelperElement: function placeHelperElement(targetElement) {
				var helper = angular.element('.introjs-helperLayer'),
				    tooltip = angular.element('.introjs-helperLayer .introjs-tooltip'),
				    oldDisplayVal = helper.css('display'),
				    destination;

				helper.css('display', 'none');
				destination = targetElement.getBoundingClientRect().top - 5;
				helper.css('display', oldDisplayVal);
				helper.css('top', destination);

				//
				// Make sure the tooltip is in view
				if (!this.isInViewport(tooltip[0])) {
					this.scrollIntoView(tooltip[0]).then(function () {
						destination = targetElement.getBoundingClientRect().top - 5;
						helper.css('top', destination);
					});
				}
			},

			addCoachmarkNamespaceToHistory: function addCoachmarkNamespaceToHistory(namespace) {
				this.namespaceHistory.push(namespace);
			},

			clearCoachmarkHistory: function clearCoachmarkHistory() {
				var self = this;
				_.each(this.namespaceHistory, function (namespace) {
					var namespaceKey = self.getNamespaceKey(namespace);
					user.setPersistentAttribute(namespaceKey, false);
				});
			}

		};

		var disableCoachmarks = function disableCoachmarks() {
			coachmarkService.disabled(true);
			if (coachmarkService.currentIntro && coachmarkService.currentIntro.exit) {
				coachmarkService.currentIntro.exit();
			}
		};

		eventBus.subscribe('disableCoachmarks', disableCoachmarks);
		appModel.on('disableCoachmarks', disableCoachmarks);

		$window.adobe = $window.adobe || {};
		$window.adobe.tools = $window.adobe.tools || {};
		$window.adobe.tools.clearCoachmarks = coachmarkService.clearCoachmarkHistory.bind(coachmarkService);
		$window.adobe.tools.help = $window.adobe.tools.help || {};
		$window.adobe.tools.help.coachmarks = ['[showcoachmarks]=1   Force all coachmarks to be displayed.', '[showcoachmarks]=0   Force all coachmarks to not be displayed.', 'adobe.tools.clearCoachmarks();   Resets all the coachmarks that would be displayed on the current page to be reset for the current user (DB is reset, too).'].join('\n');

		return coachmarkService;
	});
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').factory('CoachmarkStep', ['util.cls', '_', function (cls, _) {

		var CoachmarkStep = cls.create({

			_constructor: function _constructor(ns, step, stepNum) {
				angular.extend(this, step);
				this.namespace = ns.namespace;
				this.intro = step.description || step.intro || '';
				this.stepNumber = stepNum;
			},

			setElement: function setElement(elm) {
				this.element = elm;
			}

		});

		return CoachmarkStep;
	}]);
})(jQuery);
'use strict';

angular.module('common').directive('anComponentRail', ['_', 'Tag', 'Share', 'eventBus', '$filter', 'user', function (_, Tag, Share, eventBus, $filter, user) {
	return {
		templateUrl: 'analytics/component-management/directives/an-component-rail.tpl.html',
		restrict: 'EA',
		replace: true,
		transclude: true,
		scope: {
			dock: '@?',
			component: '=',
			componentType: '@'
		},
		controller: function controller($scope, $element) {
			$scope.unsavedTags = [];

			$scope.canTag = true;
			$scope.canShare = true;

			$scope.applyTags = function (selectedTags) {
				$scope.unsavedTags = _.map(_.filter(selectedTags, { id: -1 }), function (item) {
					return { id: item.id || -1, name: item.name, description: item.description || '' };
				});

				selectedTags = convertTagsToTagModels(selectedTags);

				//Reflect the change in the ui.
				$scope.component.tags = selectedTags;
			};

			$scope.applyShareables = function (selectedShareables) {
				$scope.component.shares = convertSharesToShareModels(selectedShareables);
				updateCheckedShares();
			};

			$scope.canUpdateComponent = function () {
				// if not an admin and there is an owner but the owner does not match the current owner.
				if (!user.isAdmin && _.get($scope, 'component.owner.id') && _.get($scope, 'component.owner.id') !== parseFloat(user.id)) {
					return false;
				}
				return true;
			};

			var unwatchComponent = $scope.$watch('component', function (component) {
				if ($scope.canUpdateComponent()) {
					$scope.noTagsMessage = $filter('l10n')(['noTagsMessage', 'This %s has not been tagged yet.'], getComponentPrettyName());
					$scope.noCollaboratorsMessage = $filter('l10n')(['noCollaboratorsMessage', 'This %s has not been shared yet.'], getComponentPrettyName());
				} else {
					$scope.noTagsMessage = $filter('l10n')(['cantTagComponentYouDontOwn', 'You cannot tag a %s you do not own unless you are an admin'], getComponentPrettyName());
					$scope.noCollaboratorsMessage = $filter('l10n')(['cantShareComponentYouDontOwn', 'You cannot share a %s you do not own unless you are an admin.'], getComponentPrettyName());
				}

				if (component) {
					updateCheckedShares();
				}
			});

			$scope.onRemoveShare = function (share) {
				var idx = _.findIndex($scope.checkedShares, { 'id': share.id });
				if (idx !== -1) {
					$scope.checkedShares.splice(idx, 1);
				}
			};

			$scope.onRemoveAllShares = function () {
				$scope.checkedShares = [];
			};

			$scope.$on('$destroy', function () {
				unwatchComponent();
			});

			function getComponentPrettyName() {
				if ($scope.componentType === 'project') {
					return $filter('l10n')(['projectTypeLabel', 'project']);
				}
				return $filter('l10n')(['componentTypeLabel', 'component']);
			}

			function convertTagsToTagModels(tags) {
				return _.map(tags, function (tag) {
					return Tag.fromJSON({
						id: tag.id || -1,
						name: tag.name,
						description: tag.description || ''
					});
				});
			}

			function convertSharesToShareModels(shares) {
				return _.map(shares, function (share) {
					return Share.fromJSON({
						id: share.id,
						type: share.type,
						name: share.name
					});
				});
			}

			function updateCheckedShares() {
				if (!_.get($scope, 'component.shares')) {
					return;
				}
				$scope.checkedShares = _.map($scope.component.shares, function (share) {
					return {
						id: share.id,
						type: share.type,
						name: share.name
					};
				});
			}

			$scope.$watch('component.shares', function () {
				updateCheckedShares();
			}, true);
		}
	};
}]);
'use strict';

(function ($) {
	angular.module('common').directive('anFilterSubRail', function (SHOW_ALL_ID, FAILED_ID, eventBus, $filter) {
		return {
			restrict: 'E',
			replace: true,
			templateUrl: 'analytics/component-management/directives/an-filter-sub-rail.tpl.html',
			scope: {
				componentListService: '=',
				filterClearsSelection: '@?',
				showAllFilter: '@?',
				reportSuiteLabel: '@?',
				hasReportSuiteColumn: '='
			},
			controller: function controller($scope, $timeout) {
				$scope.tagSearch = '';
				$scope.ownerSearch = '';
				$scope.index = 0;
				$scope.reportSuiteLabel = $scope.reportSuiteLabel || $filter('l10n')(['report-suites11a', 'Report Suites']);

				var updateFilteredLists = $scope.componentListService.updateFilteredLists.bind($scope.componentListService);
				$scope.onFilterSelectionChange = function (filter) {
					if ($scope.filterClearsSelection) {
						$scope.componentListService.clearComponentSelection();
					}

					// If Show All has been selected then load all results
					if (filter !== undefined && filter.id === SHOW_ALL_ID && filter.selected) {
						eventBus.publish('showAllClicked');
					}

					// Timeout 0 to allow checkbox to get redrawn before freezing the UI thread to filter
					$timeout(updateFilteredLists);
				};
			},
			link: function link(scope, element, attrs) {

				element.on('click', '.coral3-Accordion-header', function () {
					var accordionItem = $(this).closest('.coral3-Accordion-item');
					var needToOpenAccordion = !accordionItem.hasClass('is-active');
					$(this).closest('.coral-Accordion').find('.coral3-Accordion-item').toggleClass('is-active', false);
					accordionItem.toggleClass('is-active', needToOpenAccordion);
				});
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('anSharePopover', function ($filter, CUI, trackService, _, $window) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		replace: true,
		restrict: 'EA',
		templateUrl: 'analytics/component-management/directives/an-share-popover.tpl.html',
		scope: {
			confirmAction: '&',
			buttonAction: '&',
			triggerType: '@',
			checkedShares: '=?'
		},
		controller: function controller($scope, $element, shareRepository, user, util) {
			$scope.popCtrlObject = {};
			$scope.popoverId = $element.get(0).id + '-popover';
			$scope.shareables = [];
			$scope.data = {
				loadingShares: false
			};

			// admins can share to groups
			if (user.isAdmin) {
				$scope.shareablesTypeMap = [{ title: $filter('l10n')(['organizationLabel', 'Organization']), type: 'all' }, { title: $filter('l10n')(['groupsLabel', 'Groups']), type: 'group' }, { title: $filter('l10n')(['usersLabel', 'Users']), type: 'user' }];
			} else {
				$scope.shareablesTypeMap = [{ title: '', type: 'user' }];
			}

			function shareablesIncludeGroups() {
				return util.getObjectByValue($scope.shareablesTypeMap, 'type', 'group') || false;
			}

			function onOpen() {
				if (!$scope.shareables.length) {
					/* Load sharing items */
					$scope.data.loadingShares = true;
					shareRepository.getUsers().then(function (users) {
						$scope.shareables = users;
						$scope.$evalAsync(function () {
							$scope.data.loadingShares = false;
						});

						// add groups (if applicable)
						if (shareablesIncludeGroups()) {
							shareRepository.getGroups().then(function (groups) {
								// attach 'toggleDisableAllOthersOnClick' to 'all' group in UI layer
								var numGroups = groups.length;
								for (var i = 0; i < numGroups; i++) {
									if (groups[i].type == 'all') {
										groups[i].toggleDisableAllOthersOnClick = true;
										break;
									}
								}

								$scope.shareables = $scope.shareables.concat(groups);
							}).then(function () {
								setCheckedShares();
							});
						} else {
							setCheckedShares();
						}
					});

					$scope.shareablesIncludeGroups = shareablesIncludeGroups() ? 'true' : 'false';
					$scope.sharingSearchPlaceholder = shareablesIncludeGroups() ? $filter('l10n')(['searchIndividualsOrGroupsLabel', 'Search Individuals or Groups']) : $filter('l10n')(['searchIndividualsLabel', 'Search Individuals']);

					$scope.action = function (selectedShareables) {
						var counts = _.countBy(selectedShareables, 'type');
						trackService.trackAction(null, 'Added Collaborators', {
							numOrgs: counts.all || 0,
							numGroups: counts.group || 0,
							numUsers: counts.user || 0
						});

						$scope.confirmAction({
							selectedShareables: selectedShareables
						});
					};
				} else {
					setCheckedShares();
				}
			}

			function setCheckedShares() {
				if ($scope.checkedShares) {
					$scope.shareables.forEach(function (availableCollaborator) {
						availableCollaborator.checkedState = false;
						$scope.checkedShares.forEach(function (collaborator) {
							if (availableCollaborator.id === collaborator.id && (!collaborator.type || collaborator.type === availableCollaborator.type)) {
								availableCollaborator.checkedState = true;
							}
						});
					});
				} else {
					//A use can pass in a buttonAction if they would like to add in their own checked state. This is
					//necessary in the case of multiple selection like component manager.
					$scope.buttonAction({
						shareables: $scope.shareables
					});
				}
			}

			$scope.triggerId = $scope.popoverId + '-trigger';
			$scope.onTriggerAction = function () {

				setCheckedShares();

				_.delay(function () {
					Popover.show({
						target: $('#' + $scope.triggerId).get(0),
						position: 'bottom',
						isModal: false,
						ref: _.uniqueId('popover'),
						dialog: {
							padded: false,
							onClose: function onClose() {
								return true;
							}
						},
						closeOnClickOutside: true,
						selector: '#' + $scope.popoverId
					});

					onOpen();
					$scope.popCtrlObject.onOpen();
				}, 0);
			};

			$scope.$watch('checkedShares', function () {
				setCheckedShares();
			}, true);
		}

	};
});
'use strict';

angular.module('common').directive('anTagPopover', function (CUI, trackService, tagRepository, _, $window) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		replace: true,
		restrict: 'EA',
		templateUrl: 'analytics/component-management/directives/an-tag-popover.tpl.html',
		scope: {
			confirmAction: '&',
			buttonAction: '&',
			triggerType: '@',
			checkedTags: '=',
			unsavedTags: '=?',
			customTarget: '='
		},
		controller: function controller($scope, $element, $attrs) {
			/* Load tags */
			$scope.popCtrlObject = {};
			var popoverNode;

			$scope.tags = [];
			$scope.data = {
				loadingTags: false
			};
			$scope.tagsTypeMap = [{ title: '', type: undefined }];
			var refreshTagList = function refreshTagList() {
				$scope.loadingTags = true;
				return tagRepository.query({}).then(function (tags) {
					$scope.tags = tags;
					createLocalTagsArray();
					$scope.$evalAsync(function () {
						$scope.loadingTags = false;
					});
				});
			};

			function createLocalTagsArray() {
				var copiedTags = angular.copy($scope.tags).concat($scope.unsavedTags || []); // because users can create new, temporary tags, we need to create a copy so that we don't affect the master list
				if ($scope.checkedTags) {
					var checkedTagNames = _.pluck($scope.checkedTags, 'name');
					copiedTags.forEach(function (tag) {
						if (~checkedTagNames.indexOf(tag.name)) {
							tag.checkedState = true;
						} else {
							tag.checkedState = false;
						}
					});
				} else {
					//A user can either pass in an array of checkedTags or a custom method to buttonAction that will
					//allow them to use their own check logic. This is important for component manager where multiple
					//items are selected and tagged at a time.
					$scope.buttonAction({
						tags: copiedTags
					});
				}
				$scope.copiedTags = copiedTags;
			}

			$scope.action = function (selectedTags) {
				trackService.trackAction(null, 'Added Tags', { numTags: selectedTags.length });

				$scope.confirmAction({
					selectedTags: selectedTags,
					refreshTagList: refreshTagList
				});
			};

			$scope.copiedTags = [];

			$scope.onTriggerAction = function () {

				popoverNode = popoverNode || $element.find('.tagPopoverMultiSelect').get(0);

				var pointAt = $element.get(0);

				if ($scope.customTarget) {
					pointAt = $scope.customTarget;
				}

				// Put in delay so it will not close immediately. For some reason, when it gets added, the irginiating mouseclick triggers the close of it.
				_.delay(function () {
					Popover.show({
						target: pointAt,
						position: 'bottom',
						isModal: false,
						ref: _.uniqueId('popover'),
						dialog: {
							padded: false,
							onClose: function onClose() {
								return true;
							}
						},
						closeOnClickOutside: true,
						selector: popoverNode
					});

					$scope.popCtrlObject.onOpen();
				}, 0);

				createLocalTagsArray();
				refreshTagList();
			};
		}
	};
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('mgr.Owner', function (user) {
	var Model = analyticsui['core'].Model;

	var Owner = function (_Model) {
		_inherits(Owner, _Model);

		function Owner() {
			_classCallCheck(this, Owner);

			return _possibleConstructorReturn(this, (Owner.__proto__ || Object.getPrototypeOf(Owner)).apply(this, arguments));
		}

		_createClass(Owner, null, [{
			key: 'properties',
			value: function properties() {
				return {
					id: { type: Number, default: parseFloat(user.id), serializeDefault: true },
					name: { type: String, default: user.fullName, serializeDefault: true },
					login: { type: String, default: user.username, serializeDefault: true }
				};
			}
		}]);

		return Owner;
	}(Model);

	return Owner;
});
'use strict';

angular.module('common').factory('mgr.Share', function () {
	var Share = analyticsui['model'].Share;

	return Share;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('mgr.Tag', function () {
	var Model = analyticsui['core'].Model;

	var Tag = function (_Model) {
		_inherits(Tag, _Model);

		function Tag() {
			_classCallCheck(this, Tag);

			return _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).apply(this, arguments));
		}

		_createClass(Tag, null, [{
			key: 'properties',
			value: function properties() {
				return {
					id: { type: Number, default: -1 },
					name: String,
					description: { type: String, default: '' },
					checkedState: { type: Boolean, default: false, transient: true },
					toggleDisableAllOthersOnClick: { type: Boolean, default: false, transient: true }
				};
			}
		}]);

		return Tag;
	}(Model);

	return Tag;
});
'use strict';

angular.module('common').factory('ComponentListService', ['_', 'util.cls', 'user', 'eventBus', '$filter', 'otherFilters', 'util', 'Segment', '$q', 'SHOW_ALL_ID', 'FAILED_ID', function (_, cls, user, eventBus, $filter, otherFilters, util, Segment, $q, SHOW_ALL_ID, FAILED_ID) {

	var ComponentListService = cls.create({

		_constructor: function _constructor(actionManager) {
			this.actionManager = actionManager;
			this.otherFilters = otherFilters.instance = angular.copy(otherFilters);
			// private variables
			this._fullComponentList = null;
			this._fullTagList = null;
			this._fullReportSuiteList = null;
			this._fullOwnersList = null;
			this._fullOthersList = this.otherFilters.others;
			this._componentsByTagId = null;
			this._tagsByComponentId = null;
			this._selectedTags = [];
			this._selectedReportSuites = [];
			this._selectedOwners = [];
			this._selectedOthers = [];
			this._showAllFilter = null;
			this._mineFilter = null;
			this._sharedWithMeFilter = null;
			this._displayShowAllFilter = false;
			this._allComponentsLoaded = false;

			// public variables
			this.components = null; //Bindable component list used for ng-repeat.
			this.tags = null; //Tags filtered by visible components and selected tags.
			this.reportSuites = null; //List of Report Suites for only visible components.
			this.owners = null; //List of Owners for only visible components.
			this.others = null; //Filtered others list used for ng-repeat.
			this.filters = null; //The currently selected filters.

			this.selectedComponents = null; //Bindable list of selected components.
			this.selectedTags = null;
			this.selectedReportSuites = null;
			this.selectedOwners = null;
			this.selectedOthers = null;
			this.totalComponentCount = 0;
			this.allComponentCountLoaded = false;

			this.queryComponents = null; // function which loads components. returns a promise. (must be overridden!)
			this.queryAllComponents = null; // function loads all components, returning a promise (must be overridden as well).
			this.searchText = ''; // text to filter components by, entered by user in search bar
		},

		/**
  	-------------------------------------------------------------------------------------------------------
  	---							Methods specific to populating the full lists							---
  	-------------------------------------------------------------------------------------------------------
  **/

		_populateFullTagListFromComponentList: function _populateFullTagListFromComponentList() {
			//Empty out the hash of components by tag id. 
			this._componentsByTagId = {};

			//Empty out the has of tags by component id.
			this._tagsByComponentId = {};

			//Empty out the full tag list.
			this._fullTagList = [];

			var i, k, component, tag;
			for (i = 0; i < this._fullComponentList.length; i++) {
				component = this._fullComponentList[i];
				component.tags = component.tags || [];
				for (k = 0; k < component.tags.length; k++) {
					tag = component.tags[k];

					//Give the tag a type for display purposes. 
					tag.type = 'tag';
					tag.typeLabel = $filter('l10n')(['tagPrefixLabel', 'Tag:']);

					if (!this._componentsByTagId[tag.id]) {
						this._componentsByTagId[tag.id] = {};
						this._fullTagList.push(tag);
					}

					if (!this._tagsByComponentId[component.id]) {
						this._tagsByComponentId[component.id] = {};
					}

					this._componentsByTagId[tag.id][component.id] = component;
					this._tagsByComponentId[component.id][tag.id] = tag;
				}
			}
		},

		_populateFullOwnerListFromComponentList: function _populateFullOwnerListFromComponentList() {
			//Empty out the full owners list.
			this._fullOwnersList = [];

			var ownerIds = [],
			    i,
			    component,
			    owner;
			for (i = 0; i < this._fullComponentList.length; i++) {
				component = this._fullComponentList[i];
				component.owner = component.owner || {};
				owner = component.owner;
				owner.type = 'owner'; //Assync a type for display purposes. 
				owner.typeLabel = $filter('l10n')(['ownerPrefixLabel', 'Owner:']);
				if (ownerIds.indexOf(owner.id) == -1) {
					this._fullOwnersList.push(owner);
					ownerIds.push(owner.id); //using this for good measure to make sure we don't add the same owner twice. 
				}
			}
		},

		_populateFullReportSuiteListFromComponentList: function _populateFullReportSuiteListFromComponentList() {
			//Empty out the full report suites list.
			this._fullReportSuiteList = [];

			var rsids = [],
			    i,
			    component,
			    reportSuite;
			for (i = 0; i < this._fullComponentList.length; i++) {
				reportSuite = {};
				component = this._fullComponentList[i];
				reportSuite.rsid = component[this.overrideRsidAttribute] || component.rsid;
				reportSuite.name = component[this.overrideReportSuiteNameAttribute] || component.reportSuiteName || component.siteTitle;
				reportSuite.type = 'report-suite'; //Assync a type for display purposes. 
				reportSuite.typeLabel = $filter('l10n')(['reportSuitePrefixLabel', 'Report Suite:']);
				if (rsids.indexOf(reportSuite.rsid) == -1) {
					this._fullReportSuiteList.push(reportSuite);
					rsids.push(reportSuite.rsid); //using this for good measure to make sure we don't add the same rsid twice. 
				}
			}
		},

		/**
  	-------------------------------------------------------------------------------------------------------
  	---						Methods specific to setting the different filtered lists					---
  	-------------------------------------------------------------------------------------------------------
  **/

		/**
   * Filter the component list by tags, owners, and other filters. NOTE: This is the only place that should 
   * ever modify the components array that is inside filteredLists.components. 
   */
		_getFilteredComponentList: function _getFilteredComponentList() {
			if (this._fullComponentList) {
				//Get the list of selected tags, owners, and others.
				this._showAllFilter = this._showAllFilter || this.otherFilters.getShowAllFilter();
				var showFailedFilter = this.otherFilters.getFailedFilter();

				var filteredComponentList = this._getComponentsFilteredBySearchText();

				return filteredComponentList.filter(function (component) {
					if (!showFailedFilter.selected && component.isDeleted || showFailedFilter.selected && !component.isDeleted || !this._componentHasAllSelectedTags(component) || !this._componentHasAnySelectedOwners(component) || !this._componentHasAnySelectedReportSuites(component) || !this._componentHasOtherFilter(component) || !this._showAllFilter.disabled && !this._showAllFilter.selected && !this._componentIsRelevantToCurrentUser(component)) {
						return false;
					}
					return true;
				}.bind(this));
			}
		},

		/**
   * Returns the full component list (this._fullComponentList) filtered by the text typed into the search bar
   * If there is no search text, returns the full component list
   */
		_getComponentsFilteredBySearchText: function _getComponentsFilteredBySearchText() {
			return this.searchText ? $filter('fuzzySearchFilter')(this._fullComponentList, this.searchText, this.actionManager.searchKey) : this._fullComponentList;
		},

		/**
   * This list has to be built using the filtered component list because these are the tags that are left depending on the 
   * list of components within the array. 
   */
		_getFilteredTagsList: function _getFilteredTagsList(components) {
			var component, includeTag, tagCount;
			return this._fullTagList.filter(function (tag) {
				includeTag = false;
				tagCount = 0;
				for (var i = 0; i < components.length; i++) {
					component = components[i];
					if (this._tagsByComponentId[component.id] && this._tagsByComponentId[component.id][tag.id]) {
						includeTag = true;
						tagCount += 1;
					}
				}

				//Only update the tag count if 
				tag.count = includeTag ? tagCount : 0;

				return includeTag;
			}.bind(this));
		},

		/**
   * Create the filtered owners list including disabled/enabled states, count, etc. based on the current filtered 
   * component list together with the current selected tags/other filters. NOTE: This must be built using the current 
   * filtered component list to get the right results.
   */
		_refreshFilteredOwnersList: function _refreshFilteredOwnersList() {
			this._showAllFilter = this._showAllFilter || this.otherFilters.getShowAllFilter();

			var showOwner, component, ownerDisabled, ownerCount;

			// For filtering the owners list, we want to look at the full component list, not the filtered component list.
			// Since you can filter by multiple owners, there may be an owner listed in the rail that is not
			// present in the visible component list. However, we do want to filter by search text.
			var filteredComponentList = this._getComponentsFilteredBySearchText();

			return this._fullOwnersList.filter(function (owner) {
				ownerCount = 0;
				ownerDisabled = true;
				showOwner = this._showAllFilter.selected || this._showAllFilter.disabled;

				for (var i = 0; i < filteredComponentList.length; i++) {
					component = filteredComponentList[i];
					// identify all of the components that this owner created
					if (component.owner.id == owner.id) {
						var componentHasAllFilters = this._componentHasAllSelectedTags(component) && this._componentHasAnySelectedReportSuites(component) && this._componentHasOtherFilter(component);
						if (this._showAllFilter.selected || this._showAllFilter.disabled) {
							// if show all filter is checked or the user isn't allowed to show all
							if (componentHasAllFilters) {
								ownerCount += 1;
								ownerDisabled = false; // allow owner to be filtered on
							}
						} else {
							// if the show all filter is in the list but not checked
							if (componentHasAllFilters && this._componentIsRelevantToCurrentUser(component)) {
								ownerCount += 1;
								showOwner = true;
								ownerDisabled = false; // allow owner to be filtered on
							}
						}
					}
				}

				owner.disabled = ownerDisabled;
				owner.count = ownerCount;

				if (!showOwner || ownerDisabled) {
					owner.selected = false; // if the owner isn't being shown, don't filter by it
				}

				return showOwner;
			}.bind(this));
		},

		/**
   * Create the filtered owners list including disabled/enabled states, count, etc. based on the current filtered 
   * component list together with the current selected tags/other filters. NOTE: This must be built using the current 
   * filtered component list to get the right results.
   */
		_refreshFilteredReportSuiteList: function _refreshFilteredReportSuiteList() {
			this._showAllFilter = this._showAllFilter || this.otherFilters.getShowAllFilter();

			var showReportSuite, component, reportSuiteDisabled, reportSuiteCount;

			// For filtering the report suite list, we want to look at the full component list, not the filtered component list.
			// Since you can filter by multiple report suites, there may be a report suite listed in the rail that is not
			// present in the visible component list. However, we do want to filter by search text.
			var filteredComponentList = this._getComponentsFilteredBySearchText();

			return this._fullReportSuiteList.filter(function (reportSuite) {
				reportSuiteCount = 0;
				reportSuiteDisabled = true;
				showReportSuite = this._showAllFilter.selected || this._showAllFilter.disabled;

				for (var i = 0; i < filteredComponentList.length; i++) {
					component = filteredComponentList[i];
					component.rsid = component[this.overrideRsidAttribute] || component.rsid;
					// identify all of the components that have this report suite
					if (component.rsid == reportSuite.rsid) {

						var componentHasAllFilters = this._componentHasAllSelectedTags(component) && this._componentHasAnySelectedOwners(component) && this._componentHasOtherFilter(component);
						if (this._showAllFilter.selected || this._showAllFilter.disabled) {
							// if show all filter is checked or the user isn't allowed to show all
							if (componentHasAllFilters) {
								reportSuiteCount += 1;
								reportSuiteDisabled = false; // allow owner to be filtered on
							}
						} else {
							// if the show all filter is in the list but not checked
							if (componentHasAllFilters && this._componentIsRelevantToCurrentUser(component)) {
								reportSuiteCount += 1;
								showReportSuite = true;
								reportSuiteDisabled = false; // allow owner to be filtered on
							}
						}
					}
				}

				reportSuite.disabled = reportSuiteDisabled;
				reportSuite.count = reportSuiteCount;

				if (!showReportSuite || reportSuiteDisabled) {
					reportSuite.selected = false; // if the owner isn't being shown, don't filter by it
				}

				return showReportSuite;
			}.bind(this));
		},

		_getFilteredOthersList: function _getFilteredOthersList(components) {
			this._showAllFilter = this._showAllFilter || this.otherFilters.getShowAllFilter();

			var otherCount = 0,
			    component;

			return this._fullOthersList.filter(function (otherFilter) {
				// Hide the Shared With Me filter for Virtual Report Suites and Scheduled Jobs
				if (otherFilter.id == 2 && (this.componentType == 'virtualReportSuite' || this.componentType == 'scheduledJob')) {
					otherFilter.hide = true;
				}

				// Hide the Failed filter for all components except Scheduled Jobs
				if (otherFilter.id == FAILED_ID && this.componentType !== 'scheduledJob') {
					otherFilter.hide = true;
				}

				if (otherFilter.hide) {
					return false;
				} // hides all filters that have hide:true from the list

				var comps = otherFilter === this._showAllFilter || otherFilter.id == FAILED_ID ? this._fullComponentList : components;

				// When Show All is not selected, get only user owned failed job count
				if (otherFilter.id == FAILED_ID && !this._showAllFilter.selected) {
					comps = _.filter(this._fullComponentList, function (compn) {
						return compn.isDeleted && compn.owner.id == user.id;
					});
				}

				otherCount = 0;
				for (var i = 0; i < comps.length; i++) {
					component = comps[i];
					if (otherFilter.condition(component)) {
						otherCount += 1;
					}
				}
				otherFilter.count = otherCount;
				return true;
			}.bind(this));
		},

		/**
  	-------------------------------------------------------------------------------------------------------
  	---											Utility functions										---
  	-------------------------------------------------------------------------------------------------------
  **/

		/**
   * Returns true if component has ALL tags that are checked
   */
		_componentHasAllSelectedTags: function _componentHasAllSelectedTags(component) {
			var hasAllTags = true,
			    tag;

			for (var i = 0; i < this._selectedTags.length; i++) {
				tag = this._selectedTags[i];
				if (this._componentsByTagId[tag.id] && !this._componentsByTagId[tag.id][component.id]) {
					hasAllTags = false;
					break;
				}
			}

			return hasAllTags;
		},

		/**
   * Returns true if component's owner matches ANY owner that is checked.
   */
		_componentHasAnySelectedOwners: function _componentHasAnySelectedOwners(component) {
			if (this._selectedOwners.length) {
				var hasAnyOwner = false,
				    owner;
				for (var i = 0; i < this._selectedOwners.length; i++) {
					owner = this._selectedOwners[i];
					if (owner.id == component.owner.id) {
						hasAnyOwner = true;
						break;
					}
				}
				return hasAnyOwner;
			}
			return true;
		},

		/**
   * Returns true if component's report suite matches ANY report suite that is checked.
   */
		_componentHasAnySelectedReportSuites: function _componentHasAnySelectedReportSuites(component) {
			if (this._selectedReportSuites.length) {
				var hasAnyReportSuite = false,
				    reportSuite;
				for (var i = 0; i < this._selectedReportSuites.length; i++) {
					reportSuite = this._selectedReportSuites[i];
					if (reportSuite.rsid == component.rsid) {
						hasAnyReportSuite = true;
						break;
					}
				}
				return hasAnyReportSuite;
			}
			return true;
		},

		/**
   * Returns true if component matches ALL of the 'other' filters
   */
		_componentHasOtherFilter: function _componentHasOtherFilter(component) {
			var hasOtherFilter = true,
			    otherFilter;
			for (var i = 0; i < this._selectedOthers.length; i++) {
				otherFilter = this._selectedOthers[i];
				if (!otherFilter.condition(component)) {
					hasOtherFilter = false;
					break;
				}
			}
			return hasOtherFilter;
		},

		/** 
   * Returns true if the component belongs to the user or if it has been shared with the user 
   * used for admins to filter out irrelevant components (not show every single user's component)
   */
		_componentIsRelevantToCurrentUser: function _componentIsRelevantToCurrentUser(component) {
			this._mineFilter = this._mineFilter || this.otherFilters.getMineFilter();
			this._sharedWithMeFilter = this._sharedWithMeFilter || this.otherFilters.getSharedWithMeFilter();
			return this._mineFilter.condition(component) || this._sharedWithMeFilter.condition(component);
		},

		/**
  	-------------------------------------------------------------------------------------------------------
  	---											Public API 												---
  	-------------------------------------------------------------------------------------------------------
  **/

		//Provide a single location with filtered components tags, owners, and others that the UI can be bound to. This
		//data will be populated within the component-filter-ctrl.

		loadComponents: function loadComponents(displayShowAllFilter) {
			var self = this,
			    deferred = $q.defer();

			self._displayShowAllFilter = displayShowAllFilter;

			self.queryComponents().then(function (components) {
				self.setFullComponentList(components);

				//Return the filtered list of components. This can be changed later if need be.
				deferred.resolve(self.components);
			}, function (errors) {
				deferred.reject(errors);
			});

			return deferred.promise;
		},
		loadAllComponents: function loadAllComponents(displayShowAllFilter) {

			if (this._allComponentsLoaded) {
				return $q.when(this._fullComponentList);
			}

			this.queryComponents = this.queryAllComponents;

			var deferred = $q.defer();

			this._displayShowAllFilter = displayShowAllFilter;

			this.queryAllComponents().then(function (components) {

				this._allComponentsLoaded = true;
				this.setFullComponentList(components);

				//Return the filtered list of components. This can be changed later if need be.
				deferred.resolve(this.components);
			}.bind(this), function (errors) {
				deferred.reject(errors);
			});

			return deferred.promise;
		},
		refreshSelectedComponents: function refreshSelectedComponents() {
			var deferred = $q.defer();

			var segmentIds = this.selectedComponents.map(function (s) {
				return s.id;
			});
			this.queryComponents(segmentIds).then(function (components) {
				components.forEach(function (refreshedComponent) {
					var oldComponent = this.selectedComponentsById[refreshedComponent.id] || {};
					angular.extend(oldComponent, refreshedComponent);
				}.bind(this));

				this._populateFullTagListFromComponentList();
				this._populateFullOwnerListFromComponentList();
				this._populateFullReportSuiteListFromComponentList();
				this.updateFilteredLists();
				this.updateSelectedComponents();

				deferred.resolve();
			}.bind(this), function (errors) {
				deferred.reject(errors);
			});

			return deferred.promise;
		},

		refreshComponentList: function refreshComponentList() {
			var deferred = $q.defer();

			this.queryComponents().then(function (components) {
				var component;

				//Loop through each of the new components and select the right ones.
				for (var i = 0; i < components.length; i++) {
					component = components[i];
					if (this.selectedComponentsById[component.id]) {
						component.selected = true;
					}
				}

				this._fullComponentList = components;
				// If user is filtering by owners, add the active user to the selected owners filter
				// after copying so that he will see the new copied segment
				if ($filter('filter')(this._fullOwnersList, { selected: true }).length) {
					this._fullOwnersList[_.indexOf(_.pluck(this._fullOwnersList, 'login'), user.username)].selected = true;
				}
				this.updateFilteredLists();
				this.updateSelectedComponents();

				//Return the filtered list of components. This can be changed later if need be.
				deferred.resolve(this.components);
			}.bind(this), function (errors) {
				deferred.reject(errors);
			});

			return deferred.promise;
		},

		setFullComponentList: function setFullComponentList(components) {
			this._showAllFilter = this._showAllFilter || this.otherFilters.getShowAllFilter();
			this._showAllFilter.disabled = !this._displayShowAllFilter;

			this._fullComponentList = components;
			this._populateFullTagListFromComponentList();
			this._populateFullOwnerListFromComponentList();
			this._populateFullReportSuiteListFromComponentList();
			this.updateFilteredLists();
		},

		updateFilteredLists: function updateFilteredLists() {
			var filteredComponentList, filteredTags, filteredOwners, filteredReportSuites, filteredOthers, filters;

			// set the selected tags/owners/others lists
			this.selectedTags = this._selectedTags = this._fullTagList ? $filter('filter')(this._fullTagList, { selected: true }) : [];
			this.selectedOthers = this._selectedOthers = this._fullOthersList ? $filter('filter')(this._fullOthersList, { selected: true }) : [];
			this.selectedOwners = this._selectedOwners = this._fullOwnersList ? $filter('filter')(this._fullOwnersList, { selected: true }) : [];
			this.selectedReportSuites = this._selectedReportSuites = this._fullReportSuiteList ? $filter('filter')(this._fullReportSuiteList, { selected: true }) : [];

			// get the filtered owners and report suites lists (depends on all the selected filters that are set above)
			filteredOwners = this._refreshFilteredOwnersList();
			filteredReportSuites = this._refreshFilteredReportSuiteList();

			// create the list of selected owners and selected report suites again. calling getFilteredOwnersList() and getFilteredReportSuiteList()
			// may deselect items. This happens when you select an owner or report suite that is only visible when Show All is checked, and then deslect Show All.
			this.selectedOwners = this._selectedOwners = this._fullOwnersList ? $filter('filter')(this._fullOwnersList, { selected: true }) : [];
			this.selectedReportSuites = this._selectedReportSuites = this._fullReportSuiteList ? $filter('filter')(this._fullReportSuiteList, { selected: true }) : [];

			// now that all lists of what's selected are accurate, get the rest of the filtered lists
			// filteredOwners and filteredReportSuites need to be refreshed because they depend on selectedReportSuites and selectedOwners (respectively), which were changed above.
			filteredComponentList = this._getFilteredComponentList();
			filteredTags = this._getFilteredTagsList(filteredComponentList);
			filteredOwners = this._refreshFilteredOwnersList();
			filteredReportSuites = this._refreshFilteredReportSuiteList();
			filteredOthers = this._getFilteredOthersList(filteredComponentList);
			filters = filteredTags.concat(filteredOwners, filteredReportSuites, filteredOthers).filter(function (item) {
				return item.selected;
			});

			this.components = filteredComponentList;
			this.tags = filteredTags;
			this.owners = filteredOwners;
			this.reportSuites = filteredReportSuites;
			this.others = filteredOthers;
			this.filters = filters;

			// Special case where we need to override the count value for the 'Show All' Filter in this.others
			// Occurs whenever the user has not yet clicked 'Show All' but we need to show the correct count
			// next to the 'Show All' checkbox in the filter rail.
			if (!this._allComponentsLoaded) {
				this.updateShowAllCount();
			}
		},
		updateShowAllCount: function updateShowAllCount() {

			var index = _.findIndex(this.others, { id: SHOW_ALL_ID });

			// Item not found	
			// If this is the case it is likely that this.others has not been
			// initialized yet			
			if (index < 0) {
				return;
			}

			this.others[index].count = this.totalComponentCount;
		},
		updateSelectedComponents: function updateSelectedComponents() {
			if (this.components) {
				this.selectedComponentsById = {};
				this.selectedComponents = this.components.filter(function (c) {
					if (c.selected) {
						this.selectedComponentsById[c.id] = c;
						return true;
					} else {
						return false;
					}
				}.bind(this));
			}
		},

		clearComponentSelection: function clearComponentSelection() {
			if (this._fullComponentList) {
				for (var i = 0; i < this._fullComponentList.length; i++) {
					this._fullComponentList[i].selected = false;
				}
			}
		},

		removeComponent: function removeComponent(component, updateFilteredLists) {
			if (typeof updateFilteredLists === 'undefined') {
				updateFilteredLists = true;
			}

			var idx = $.inArray(component, this._fullComponentList);
			if (idx !== -1) {
				this._fullComponentList.splice(idx, 1);
			}

			if (updateFilteredLists) {
				this.updateFilteredLists();
			}
			return component;
		}

	});

	return ComponentListService;
}]);
'use strict';

angular.module('common').constant('MINE_ID', 1).constant('SHARED_WITH_ME_ID', 2).constant('FAVORITES_ID', 3).constant('APPROVED_ID', 4).constant('SHOW_ALL_ID', 5).constant('FAILED_ID', 6).factory('otherFilters', function (user, $filter, MINE_ID, SHARED_WITH_ME_ID, FAVORITES_ID, APPROVED_ID, SHOW_ALL_ID, FAILED_ID) {
	return {
		others: [
		// for now, 'name' is the unique identifier
		{
			id: MINE_ID,
			name: $filter('l10n')(['mineLabel', 'Mine']),
			type: 'other',
			condition: function condition(component) {
				return component.owner.id == user.id;
			}
		}, {
			id: SHARED_WITH_ME_ID,
			name: $filter('l10n')(['sharedWithMeLabel', 'Shared With Me']),
			type: 'other',
			condition: function condition(component) {
				var userIsOwner = String(component.owner.id) === String(user.id);

				if (component.sharedWithMe !== undefined) {
					return component.sharedWithMe;
				}

				if (component.shares) {
					for (var i = 0; i < component.shares.length; i++) {
						var shareId = component.shares[i].id,
						    shareToType = component.shares[i].type;
						if (shareId == user.id && !userIsOwner) {
							return component.sharedWithMe = true;
						}

						// loop through the groups the user is in and see if this component is shared with any of them
						if (user.groups) {
							for (var j = 0; j < user.groups.length; j++) {
								if (shareId == user.groups[j].groupId && !userIsOwner) {
									if (shareToType == "group" || shareToType == "all") {
										return component.sharedWithMe = true;
									}
								}
							}
						}
					}
				}
				return component.sharedWithMe = false;
			}
		}, {
			id: FAVORITES_ID,
			name: $filter('l10n')(['favoritesLabel', 'Favorites']),
			type: 'other',
			condition: function condition(component) {
				return component.favorite;
			}
		}, {
			id: APPROVED_ID,
			name: $filter('l10n')(['approvedLabel', 'Approved']),
			type: 'other',
			condition: function condition(component) {
				return component.approved;
			}
		}, {
			id: SHOW_ALL_ID,
			name: $filter('l10n')(['showAllLabel', 'Show All']),
			type: 'other',
			disabled: true,
			condition: function condition(component) {
				return true;
			}
		}, {
			id: FAILED_ID,
			name: $filter('l10n')(['failed', 'Failed']),
			type: 'other',
			condition: function condition(component) {
				return component.isDeleted;
			}
		}],

		getShowAllFilter: function getShowAllFilter() {
			return this.others.filter(function (other) {
				return other.id == SHOW_ALL_ID;
			})[0];
		},

		getMineFilter: function getMineFilter() {
			return this.others.filter(function (other) {
				return other.id == MINE_ID;
			})[0];
		},

		getSharedWithMeFilter: function getSharedWithMeFilter() {
			return this.others.filter(function (other) {
				return other.id == SHARED_WITH_ME_ID;
			})[0];
		},

		getFailedFilter: function getFailedFilter() {
			return this.others.filter(function (other) {
				return other.id == FAILED_ID;
			})[0];
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').factory('AnalysisQueueCoachmarks', ['util.cls', 'CoachmarkNamespace', '$filter', function (cls, CoachmarkNamespace, $filter) {

		var AnalysisQueueCoachmarks = cls.extend(CoachmarkNamespace, {
			_constructor: function _constructor($scope) {
				this.super$();
				this.setNamespace('analysisQueue');
				this.startWhenEventBusEvent('processingQueueRailTransitioned', $scope);
				this.setSteps([{
					id: 'configure',
					intro: $filter('l10n')(['configureCoachmarkText', 'Click the configuration icon to select dimensions for the contribution analysis.']),
					position: 'right',
					scrollTo: false
				}, {
					id: 'completedList',
					intro: $filter('l10n')(['queueCoachmarkText', 'View the list of completed analysis reports here. Any reports that are queued, but not yet complete will appear in the list above.']),
					position: 'right',
					scrollTo: false
				}]);
			}
		});

		AnalysisQueueCoachmarks.init = function ($scope) {
			new AnalysisQueueCoachmarks($scope);
		};

		return AnalysisQueueCoachmarks;
	}]);
})(jQuery);
'use strict';

angular.module('common').factory('ConfigData', function ($resource, appModel) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	return $resource(appModel.appService.baseURL + '/contributionanalysis/:rsid/configdata/', { rsid: appModel.reportSuite.rsid }, {
		'estimate': {
			method: 'GET',
			url: appModel.appService.baseURL + '/contributionanalysis/:rsid/configdata/estimate',
			params: {
				rsid: appModel.reportSuite.rsid,
				dimensionCount: '@dimensionCount',
				locale: l10nConfig.currentLocale
			}
		}
	});
});
'use strict';

angular.module('common').factory('reportQueue', function ($resource, appModel) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var request = {
		'create': {
			method: 'POST',
			url: appModel.appService.baseURL + '/contributionanalysis/queue',
			params: {
				locale: l10nConfig.currentLocale
			}
		},
		'update': {
			method: 'PUT'
		}
	};

	if (appModel.appService.disableOberonRemoteLoading) {
		request.create.params.allowRemoteLoad = 'false'; // string-based; only 
	}

	var reportQueue = $resource(appModel.appService.baseURL + '/contributionanalysis/queue/:id', { id: '@id' }, request);

	reportQueue.status = {
		QUEUED: '0',
		ASSIGNED: '1',
		PROCESSING: '2',
		COMPLETED: '3',
		CANCELLED: '4',
		ERROR: '5',
		ABNORMAL: '6',
		NO_DATA: '7'
	};

	// need to keep a cache of the CA reports for checking duplicates when adding a new report to the queue
	reportQueue.completedReports = []; // reports with status COMPLETED
	reportQueue.queuedReports = []; // reports with status QUEUED, ASSIGNED, or PROCESSING

	return reportQueue;
});
'use strict';

angular.module('common').directive('anAnalysisQueue', function (reportQueue, $filter, spinnerService, eventBus, scUrl, RankedRequest, appModel, $timeout, $interval, util, Segment, moment, _, $q, AnalysisQueueCoachmarks, featureAccess, $window) {
	var Dialog = analyticsui['ui-core'].Dialog;
	var Rail = analyticsui['shell'].Rail;

	return {
		restrict: 'E',
		replace: true,
		templateUrl: 'analytics/contribution-analysis/directives/an-analysis-queue.tpl.html',
		controller: function controller($scope, $element, trackService, $rootElement) {

			var QUEUE_RAIL_ID = 'processing-queue-rail',
			    QUEUE_REFRESH_INTERVAL = 5000,
			    // amount of time between refreshes in the Analysis Queue
			FLASH_ANIMATION_TIMEOUT = 2200,
			    // the animation takes 2 seconds, plus 200 ms of buffer time
			stopRefreshing;

			$scope.contributionConfigUrl = scUrl.switchpfs(scUrl.productIds.SITECATALYST, 'ContributionAnalysis.Config');
			$scope.statusPriority = [reportQueue.status.PROCESSING, reportQueue.status.ASSIGNED, reportQueue.status.QUEUED];
			$scope.noDataStatus = reportQueue.status.NO_DATA;
			$scope.currentReportSuite = appModel.reportSuite.name;
			$scope.deletedReportIds = [];
			$scope.segmentNameMap = {}; // cache of segment names so we don't have to keep calling Segment.get
			AnalysisQueueCoachmarks.init($scope);

			function getReports(callback) {
				reportQueue.query({
					rsid: appModel.reportSuite.rsid,
					showCompleted: 1
				}, function (reports) {

					var i,
					    url,
					    ranked,
					    rsid,
					    queue = [],
					    completed = [];

					for (i = 0; i < reports.length; i++) {
						reports[i].id = reports[i].jobId; // use the jobId as the reportId
						if ($scope.deletedReportIds.indexOf(reports[i].id) != -1) {
							continue;
						}
						setProgressInfo(reports[i]);
						if (reports[i].status == reportQueue.status.COMPLETED) {

							// do product-switching and report-suite-switching necessary to create url
							url = scUrl.switchpfs(scUrl.productIds.SITECATALYST, 'ContributionAnalysis');
							url = scUrl.appendFragment(url, reports[i].id);
							ranked = new RankedRequest().fromJSON(reports[i].reportDefinition.viewRankedRequest);
							rsid = ranked.getRsid();
							reports[i].url = scUrl.switchReportSuite(rsid, url);

							getSegmentLabel(reports[i], ranked); // get name of segment(s) to be displayed under each report name
							completed.push(reports[i]);
						} else if (reports[i].status != reportQueue.status.CANCELLED) {
							// show all reports besides completed and cancelled in queue
							queue.push(reports[i]);
						}
					}
					// check if there are any newly added reports that didnt come through the GET request yet
					var newIds = util.pluck(reports, 'id');
					if ($scope.queue) {
						for (i = 0; i < $scope.queue.length; i++) {
							if (newIds.indexOf($scope.queue[i].id + '') == -1) {
								// then this id has been added, but not returned from the GET request
								queue.push($scope.queue[i]);
							}
						}
					}
					$scope.completedReports = completed;
					$scope.queue = queue;
					reportQueue.completedReports = completed;
					reportQueue.queuedReports = queue.filter(function (report) {
						return $scope.statusPriority.indexOf(report.status) != -1;
					}); // filter out failed reports
					if (callback) {
						callback(queue, completed);
					}
				}, function (reason) {
					if (reason.status == 401) {
						//if the session timed out, stop polling for reports
						$interval.cancel(stopRefreshing);
					}
				});
			}

			function getSegmentLabel(report, ranked) {
				report.segmentTooltip = [];
				var segments = ranked.getAllGlobalFilters('segment');
				if (segments.length === 1) {
					// get the name of the segment
					if ($scope.segmentNameMap[segments[0].segmentId]) {
						report.segmentLabel = $scope.segmentNameMap[segments[0].segmentId];
					} else {
						Segment.get({ id: segments[0].segmentId }, function (segment) {
							$scope.segmentNameMap[segments[0].segmentId] = segment.name;
							report.segmentLabel = segment.name;
						});
					}
				} else if (segments.length > 1) {
					var segmentPromises = [];
					_.each(segments, function (val, i) {
						if ($scope.segmentNameMap[val.segmentId]) {
							report.segmentTooltip.push($scope.segmentNameMap[val.segmentId]);
						} else {
							segmentPromises.push(Segment.get({ id: val.segmentId }).$promise);
						}
					});
					$q.all(segmentPromises).then(function (response) {
						_.each(response, function (val, i) {
							$scope.segmentNameMap[val.id] = val.name;
							report.segmentTooltip.push(val.name);
						});
						report.segmentTooltip = report.segmentTooltip.join(', ');
					});
					report.segmentLabel = $filter('l10n')(['numberOfSegmentsLabel', '%s segments'], segments.length);
				} else {
					report.segmentLabel = '';
				}
			}

			$scope.loadReportQueue = function () {
				// Check access type before making initial queue request
				featureAccess.load(featureAccess.CONTRIBUTION_ANALYSIS).then(function () {
					if (featureAccess.isFeatureSupported(featureAccess.CONTRIBUTION_ANALYSIS, 'allowCA')) {
						spinnerService.show('processingQueueSpinner');
						getReports(function () {
							spinnerService.hide('processingQueueSpinner');
						});
					}
				});
			};

			$scope.onInnerRailToggle = function (leftRailId) {
				if (leftRailId == QUEUE_RAIL_ID) {
					// Wait until the rail has finished the transition
					$timeout(function () {
						eventBus.publish('processingQueueRailTransitioned');
					}, 500);
					stopRefreshing = $interval(function () {
						getReports();
					}, QUEUE_REFRESH_INTERVAL);

					trackQueue();
				} else {
					$interval.cancel(stopRefreshing);
				}
			};

			$scope.cancelReport = function (report) {
				report.cancelling = true;
				spinnerService.show('cancelQueueItem' + report.id);
				getReports(function (reports) {
					report = reports.filter(function (r) {
						return r.id == report.id;
					})[0];
					if (!report || $scope.isFailed(report.status)) {
						// report has either completed or failed
						Dialog.alert($filter('l10n')(['reportCouldNotBeCancelledBecause', 'The report could not be cancelled either because it already completed or because it failed.']), {
							variant: 'warning',
							title: $filter('l10n')(['couldNotCancelReport', 'Could Not Cancel Report'])
						});
					} else {
						// the report is still queued/processing/assigned, so remove it
						Dialog.confirm($filter('l10n')(['areYouSureCancelReport', 'Are you sure you want to cancel the report "%s"?'], report.reportDefinition.name)).then(function () {
							reportQueue.remove({ id: report.id }, function (json) {
								spinnerService.hide('cancelQueueItem' + report.id);
								$scope.queue.splice($scope.queue.indexOf(report), 1);
							});
						});
					}
				});
			};

			eventBus.subscribe('reportAddedToQueue', $scope, function (report) {
				Rail.updateProps({
					activePanelId: QUEUE_RAIL_ID,
					isPinned: true
				}, $element.get(0));

				report.status = reportQueue.status.QUEUED;
				setProgressInfo(report);
				report.new = true; // makes item flash when added to queue
				$timeout(function () {
					// prevent other new list items from flashing again
					report.new = false;
				}, FLASH_ANIMATION_TIMEOUT);
				$scope.queue.push(report);
			});

			function setProgressInfo(report) {
				if (report.status == reportQueue.status.PROCESSING) {
					var timeRemaining; // create time remaining string with format '2h 48m'
					var percentComplete;

					if (report.progressText.secondsLeft === null) {
						// means report is in 'Starting' state
						timeRemaining = $filter('l10n')(['startingLabel', 'Starting']);
					} else {
						var ms = report.progressText.secondsLeft * 1000,
						    // convert to milliseconds
						minutes = moment.duration(ms).minutes(),
						    hours = moment.duration(ms).hours();

						if (hours === 0) {
							timeRemaining = $filter('l10n')(['countdownMinutesOnly', '%sm'], minutes || '< 1');
						} else {
							timeRemaining = $filter('l10n')(['countdownHoursMinutes', '%1$sh %2$sm'], [hours, minutes]);
						}
					}

					if (report.progressText.percentage === null) {
						percentComplete = '0';
					} else {
						percentComplete = report.progressText.percentage;
					}
					percentComplete += '%';

					report.progress = {
						percent: percentComplete,
						countdown: timeRemaining,
						style: { width: percentComplete }
					};
				} else if (report.status == reportQueue.status.QUEUED || report.status == reportQueue.status.ASSIGNED) {
					report.progress = {
						percent: '0%',
						countdown: $filter('l10n')(['pendingLabel', 'Pending']),
						style: { width: '0%' }
					};
				} else if (report.status == reportQueue.status.ERROR || report.status == reportQueue.status.ABNORMAL) {
					report.progress = {};
				}
			}

			$scope.confirmDeleteReport = function ($event, report) {
				$event.preventDefault();
				Dialog.confirm($filter('l10n')(['areYouSureDeleteReport', 'Are you sure you want to delete the report "%s"?'], report.reportDefinition.name)).then(function () {
					deleteReport(report);
				});
			};

			function deleteReport(report) {
				spinnerService.show('processingQueueSpinner');
				reportQueue.remove({ id: report.id }, function (json) {
					if (report.status == reportQueue.status.COMPLETED) {
						$scope.completedReports.splice($scope.completedReports.indexOf(report), 1);
					} else {
						$scope.queue.splice($scope.queue.indexOf(report), 1);
					}
					$scope.deletedReportIds.push(report.id);
					spinnerService.hide('processingQueueSpinner');
				});
			}

			// returns true if the report has a failed status, false otherwise
			$scope.isFailed = function (status) {
				var failedStatus = [reportQueue.status.ERROR, reportQueue.status.ABNORMAL, reportQueue.status.NO_DATA];
				return failedStatus.indexOf(status) != -1;
			};

			function trackQueue() {
				var numCompleted = $scope.completedReports.length,
				    numQueued = 0,
				    numProcessing = 0;

				if ($scope.queue) {
					for (var i = 0; i < $scope.queue.length; i++) {
						var report = $scope.queue[i];

						if (report.status == reportQueue.status.PROCESSING) {
							numProcessing++;
						} else if (report.status == reportQueue.status.QUEUED || report.status == reportQueue.status.ASSIGNED) {
							numQueued++;
						}
					}
				}

				trackService.trackAction($rootElement, 'Analysis Queue Opened', {
					numQueuedReports: numQueued,
					numProcessingReports: numProcessing,
					numCompletedReports: numCompleted
				});
			}
		}
	};
});
'use strict';

angular.module('common').factory('derivedMetricService', function ($http, scUrl, appModel) {
	return {
		getMetrics: function getMetrics(rsid) {
			return $http({
				'method': 'GET',
				'url': scUrl.suitej('Report.GetMetrics', {
					'rsid': rsid,
					'oid': appModel.omnitureUrl.oid
				})
			});
		}
	};
});
'use strict';

angular.module('common').factory('FunctionResource', function ($http, $resource, appModel, util) {
	var l10nConfig = analyticsui['core'].l10nConfig;


	function transformFunctionResponse(data) {
		var functions = JSON.parse(data);
		functions.forEach(function (fn) {
			fn.itemType = 'function';
		});
		return functions;
	}

	return $resource(appModel.appService.baseURL + '/calculatedmetrics/functions', {}, {
		'query': {
			method: 'GET',
			params: {
				locale: l10nConfig.currentLocale
			},
			isArray: true,
			transformResponse: transformFunctionResponse
		}
	});
});
'use strict';

(function ($) {
	angular.module('common').factory('GraphPopoverCoachmarks', ['util.cls', 'CoachmarkNamespace', '$filter', function (cls, CoachmarkNamespace, $filter) {

		var GraphPopoverCoachmarks = cls.extend(CoachmarkNamespace, {
			_constructor: function _constructor($scope) {
				this.super$();
				this.startWhen('graphPopoverOnPage', $scope);
				this.setNamespace('graphPopover');
				this.setSteps([{
					id: 'configureGraph',
					description: $filter('l10n')(['configureGraphDescription', 'Check out the new interface for configuring graph options.']),
					element: function element() {
						return $('#configure_graph_menu_btn');
					},
					position: 'left'
				}]);
			}
		});

		GraphPopoverCoachmarks.init = function ($scope) {
			new GraphPopoverCoachmarks($scope);
		};

		return GraphPopoverCoachmarks;
	}]);
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').factory('MetricSelectorCoachmarks', ['util.cls', 'CoachmarkNamespace', '$filter', function (cls, CoachmarkNamespace, $filter) {

		var MetricSelectorCoachmarks = cls.extend(CoachmarkNamespace, {
			_constructor: function _constructor($scope) {
				this.super$();
				this.startWhen('selectorRailOpened && doneLoading && params.railId == "metric-selector-rail"', $scope);
				this.setNamespace('metricSelector');
				this.setSteps([{
					id: 'createNewMetric',
					description: $filter('l10n')(['createNewMetricDescription', 'Create a new metric or Manage your metrics with these links.']),
					position: 'right'
				}, {
					id: 'searchMetrics',
					description: $filter('l10n')(['searchMetricsDescription', 'Search and sort are available to effectively navigate your metrics.']),
					position: 'right'
				}, {
					id: 'applyMetrics',
					description: $filter('l10n')(['applyMetricsDescription', 'Reorder and Apply the metrics you selected here.']),
					position: 'top'
				}]);
			}
		});

		MetricSelectorCoachmarks.init = function ($scope) {
			new MetricSelectorCoachmarks($scope);
		};

		return MetricSelectorCoachmarks;
	}]);
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').factory('ShowMetricsCoachmarks', ['util.cls', 'CoachmarkNamespace', '$filter', function (cls, CoachmarkNamespace, $filter) {

		var ShowMetricsCoachmarks = cls.extend(CoachmarkNamespace, {
			_constructor: function _constructor($scope) {
				this.super$();
				this.startWhen('metricsLoaded', $scope);
				this.setNamespace('showMetrics');
				this.setSteps([{
					id: 'showHideMetrics',
					description: $filter('l10n')(['showHideMetricsDescription', 'You can open or close the new Metric Selector rail on any metric-enabled report by clicking the metrics icon.']),
					element: function element() {
						return $('.metric-selector-rail-toggle').parent();
					},
					scrollTo: false
				}]);
			}
		});

		ShowMetricsCoachmarks.init = function ($scope) {
			new ShowMetricsCoachmarks($scope);
		};

		return ShowMetricsCoachmarks;
	}]);
})(jQuery);
'use strict';

angular.module('common').directive('anGraphPopover', function (_, $window, derivedMetricService, GraphPopoverCoachmarks, spinnerService, appModel, Keys) {
	var Popover = analyticsui['ui-core'].Popover;

	var $ = jQuery;
	return {
		templateUrl: 'analytics/derived-metrics/directives/an-graph-popover.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			percentsSupported: '@',
			trendsSupported: '@',
			showPercents: '@?',
			hideTrends: '@?',
			itemCount: '@?',
			itemCountMax: '@?',
			metricsEnabled: '@',
			selectedGraph: '@',
			graphSettings: '@',
			reportView: '@'
		},
		controller: function controller($scope, $element) {

			GraphPopoverCoachmarks.init($scope);

			// set graphPopoverOnPage for GraphPopoverCoachmarks to know when to start
			$(document).ready(function () {
				if ($('#configure_graph_menu_btn').is(':visible')) {
					$scope.graphPopoverOnPage = true;
				}
			});

			var ITEM_COUNT_MIN = 2;
			var REPORT_VIEW_RANKED = 1;
			var graphValues = {
				both: '3',
				right: '2',
				left: '1',
				none: '0'
			};
			var icons = {
				'gt_over_time': 'graphTrend',
				'gt_fill': 'graphArea',
				'gt_stacked_fill': 'graphAreaStacked',
				'gt_bar': 'graphBarVertical',
				'gt_stacked_bar': 'graphBarVerticalStacked',
				'gt_horiz_bar': 'graphBarHorizontal',
				'gt_stacked_horiz_bar': 'graphBarHorizontalStacked',
				'gt_pie': 'graphPie',
				'gt_scatter': 'graphScatter',
				'gt_bubble': 'graphBubble'
			};

			$scope.graphSettings = $scope.$eval($scope.graphSettings);
			$scope.percentages = { show: $scope.showPercents ? '1' : '0' };
			$scope.trends = { hide: $scope.hideTrends ? '1' : '0' };
			$scope.items = { count: $scope.itemCount };
			$scope.origParamCache = getParams(); // cache the values of the params before anything gets changed
			$scope.isRankedReport = Number($scope.reportView) == REPORT_VIEW_RANKED;

			$scope.load = function () {
				// convert graph settings object to an array so we can ng-repeat on it
				$scope.graphs = [];
				angular.forEach($scope.graphSettings, function (value, key) {
					this.push({
						key: key,
						name: value.name,
						enabled: value.enabled,
						icon: icons[key]
					});
				}, $scope.graphs);
			};

			$scope.loadMetrics = function () {
				// load the metrics - should only be called in metric-enabled reports, ie. Pages
				spinnerService.show('graphPopoverSpinner');
				derivedMetricService.getMetrics(appModel.reportSuite.rsid).then(function (result) {
					$scope.reportParamName = result.data.reportParamName;
					$scope.selectedMetrics = [];
					var metric,
					    i = 0;
					for (i = 0; i < result.data.selectedMetricIds.length; i++) {
						metric = _.find(result.data.metrics, { id: result.data.selectedMetricIds[i] });
						metric.selected = true;
						metric.eventOnGraph = result.data.eventOnGraph[metric.id] + ''; // make sure this value is a string.
						metric.rightGraph = [graphValues.both, graphValues.right].indexOf(metric.eventOnGraph) != -1;
						metric.leftGraph = [graphValues.both, graphValues.left].indexOf(metric.eventOnGraph) != -1;
						$scope.selectedMetrics.push(metric);
					}
					$scope.origMetricParamCache = getMetricParams(); // cache the original metrics before anything gets changed
					$scope.origGraphParamCache = getGraphParams(); // cache the original graph values before anything gets changed
					spinnerService.hide('graphPopoverSpinner');
				});
			};

			$scope.loadItemCount = function () {
				var itemRange = _.range(ITEM_COUNT_MIN, Number($scope.itemCountMax) + 1);
				$scope.itemCountOptions = _.map(itemRange, function (n) {
					return { value: n + '', label: n + '' };
				});
			};

			$scope.numMetricsSelected = function () {
				if (!$scope.selectedMetrics) {
					return 0;
				}
				return $scope.selectedMetrics.filter(function (metric) {
					return metric.selected;
				}).length;
			};

			$scope.run = function () {
				// once the user clicks Run, define the page controller for SC reports,
				// because its not available yet when the page loads, and it's only used in this one function anyway.
				// (if we ever wanted to abstract it, we could wrap it in a service that just returns $window['page_controller'])
				$scope.pageController = $window['page_controller'];

				// get the most current value of all parameters
				var updatedParams = getParams(),
				    updatedGraphParams = getGraphParams();

				// filter updated params so we're only looking at params that have been changed
				var changedParams = _.filter(updatedParams, function (param) {
					return paramChanged(param, $scope.origParamCache);
				});

				// if any graph params have been changed, add them all to the updated params list
				var graphsChanged = _.some($scope.origGraphParamCache, function (param) {
					return paramChanged(param, updatedGraphParams);
				});

				if (graphsChanged) {
					changedParams = changedParams.concat(updatedGraphParams);
				}

				// if any metrics params have been changed, add them to the updated params list
				if ($scope.metricsEnabled) {
					var updatedMetricParams = getMetricParams(); // get most current metric list

					var metricsChanged = _.some($scope.origMetricParamCache, function (param) {
						return paramChanged(param, updatedMetricParams);
					});

					if (metricsChanged) {
						changedParams = changedParams.concat(updatedMetricParams);
					}
				}

				// convert params object into string to pass into 'rp' query param in the url
				var settings = _.map(changedParams, function (param) {
					return param.key + '|' + param.value;
				}).join(';');

				$scope.pageController.changeSettings(settings); // reloads the page
				$scope.hidePopover();
			};

			$scope.hidePopover = function () {
				Popover.close($element.get(0));
			};

			function paramChanged(param, updatedParams) {
				var updatedParam = _.find(updatedParams, { key: param.key });
				return !updatedParam || updatedParam.value !== param.value;
			}

			function getParams() {
				return [{ key: 'chart_type', value: $scope.selectedGraph }, { key: 'frmt', value: $scope.percentages.show }, { key: 'hide_trends', value: $scope.trends.hide }, { key: 'chart_item_count', value: $scope.items.count }];
			}

			function getMetricParams() {
				return getParamsArrayFormat($scope.reportParamName, 'fragRelId'); // don't pass a custom 'key' argument because we just want to use the index
			}

			function getGraphParams() {
				return getParamsArrayFormat('event_on_graph', 'eventOnGraph', 'fragRelId');
			}

			function getParamsArrayFormat(paramName, valueAttr, customKey) {
				if (!$scope.selectedMetrics) {
					return [];
				}

				var selectedMetrics = $scope.selectedMetrics.filter(function (metric) {
					return metric.selected;
				}),
				    params = [];

				for (var i = 0; i < selectedMetrics.length; i++) {
					params.push({
						key: paramName + '[' + (customKey ? selectedMetrics[i][customKey] : i) + ']',
						value: selectedMetrics[i][valueAttr]
					});
				}

				return params;
			}

			$scope.setGraphValue = function (metric) {
				if (metric.rightGraph && metric.leftGraph) {
					metric.eventOnGraph = graphValues.both;
				} else if (metric.rightGraph) {
					metric.eventOnGraph = graphValues.right;
				} else if (metric.leftGraph) {
					metric.eventOnGraph = graphValues.left;
				} else {
					metric.eventOnGraph = graphValues.none;
				}
			};

			$scope.runDisabled = function () {
				if ($scope.numMetricsSelected() === 0) {
					return true;
				}
				var numGraphsEnabled = 0;
				$scope.selectedMetrics.forEach(function (metric) {
					if (metric.selected) {
						if (metric.rightGraph) {
							numGraphsEnabled++;
						}
						if (metric.leftGraph) {
							numGraphsEnabled++;
						}
					}
				});
				return numGraphsEnabled < 1;
			};

			$scope.$on('$destroy', function () {
				$scope.controlObj.isOpen = false;
			});
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('anMetricSelector', function (derivedMetricService, util, $filter, $location, $window, scUrl, ShowMetricsCoachmarks, appModel) {
		return {
			templateUrl: 'analytics/derived-metrics/directives/an-metric-selector.tpl.html',
			restrict: 'EA',
			replace: true,
			controller: function controller($scope, $element) {

				ShowMetricsCoachmarks.init($scope);

				$scope.metricLabel = $filter('l10n')(['metricsLabel', 'Metrics']);
				$scope.metricBuilderUrl = scUrl.spas('calculated-metric-builder');
				$scope.metricManagerUrl = scUrl.spas('component-manager', { 'componentType': 'metrics' });

				$scope.hasAddPermission = appModel.reportSuite.permissions.calculatedMetricCreation;

				$scope.loadMetrics = function (callback, rsid) {

					derivedMetricService.getMetrics(rsid).then(function (result) {

						$scope.reportParamName = result.data.reportParamName;
						$scope.maxMetrics = result.data.maxMetrics;

						callback(result.data.metrics, result.data.selectedMetricIds);

						$scope.metricsLoaded = true; // Set when metrics are loaded so coachmarks know when to start
					});
				};

				$scope.applyMetrics = function (selectedComponents) {

					var pageController = $window['page_controller'],
					    selectedFragRelIds = util.pluck(selectedComponents, 'fragRelId'),
					    settings = '';

					for (var i = 0; i < selectedFragRelIds.length; i++) {
						settings += $scope.reportParamName + '[' + i + ']';
						settings += '|' + selectedFragRelIds[i];
						settings += i === selectedFragRelIds.length - 1 ? '' : ';';
					}

					pageController.changeSettings(settings);
				};
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').factory('dimensionService', function ($q, $http, $timeout, appModel, _) {
	var SegmentUtilityService = analyticsui['model'].SegmentUtilityService;
	var l10nConfig = analyticsui['core'].l10nConfig;

	var segmentUtilityService = new SegmentUtilityService(appModel);

	return {
		loadAllDimensions: function loadAllDimensions(params) {
			return $http({
				method: 'GET',
				url: appModel.appService.baseURL + '/dimensions',
				cache: true,
				params: angular.extend({
					expansion: 'description',
					rsid: appModel.reportSuite.rsid,
					locale: l10nConfig.currentLocale
				}, params),
				transformResponse: $http.defaults.transformResponse.concat(function (res, headersGetter, status) {
					if (status < 400) {
						var dimensions = res;
						dimensions.forEach(function (dimension) {
							if (dimension.extraTitleInfo) {
								dimension.name += ' (' + dimension.extraTitleInfo + ')'; //ie, Membership (eVar2)
							}
							dimension.tooltip = dimension.description ? dimension.description : dimension.name;

							// give each item a type for display purposes
							dimension.itemType = 'dimension';
						});

						return dimensions;
					}
					return res;
				})
			});
		},

		hydrateNamesIntoConsumableDefinition: function hydrateNamesIntoConsumableDefinition(consumableDefinition) {
			var deferred = $q.defer();
			// convert to an angular promise in order to invoke a digist. 
			segmentUtilityService.hydrateNamesIntoConsumableDefinition(consumableDefinition).then(function () {
				deferred.resolve(consumableDefinition);
			}).catch(function (err) {
				deferred.reject(err);
			});
			return deferred.promise;
		},

		/**
   * The input should be an array of objects as follows:
   * [{"dimension":"variables/browsertype","itemId":4}]
   *
   * The output will look exactly the same except it will have a value for the item.
   * [[{"dimension":"variables/browsertype","itemId":4, "value":"Amazon"}]
   *
   * @param dimensions
   * @returns {*}
   */
		getItemValuesByDimension: function getItemValuesByDimension(dimensions) {
			var requestParams = {
				rsid: appModel.reportSuite.rsid,
				locale: l10nConfig.currentLocale
			};

			if (appModel.appService.disableOberonRemoteLoading) {
				requestParams.allowRemoteLoad = 'false'; // string-based; only
			}

			return $http({
				method: 'POST',
				url: appModel.appService.baseURL + '/dimensions/values',
				//url: 'http://kysmith-osx:2056/analytics/1.0/dimensions/values',
				cache: true,
				params: requestParams,
				data: dimensions
			});
		},

		getRangeTypeFromDimensionId: function getRangeTypeFromDimensionId(dimensionId) {
			var rangeType = '';

			switch (dimensionId) {
				case 'variables/daterangeminute':
					rangeType = 'minute';
					break;
				case 'variables/daterangehour':
					rangeType = 'hour';
					break;
				case 'variables/daterangeday':
					rangeType = 'day';
					break;
				case 'variables/daterangemonth':
					rangeType = 'month';
					break;
				case 'variables/daterangequarter':
					rangeType = 'quarter';
					break;
				case 'variables/daterangeweek':
					rangeType = 'week';
					break;
				case 'variables/daterangeyear':
					rangeType = 'year';
					break;
			}

			return rangeType;
		},

		isTimeDimension: function isTimeDimension(dimensionId) {
			return _.contains(['variables/daterangeminute', 'variables/daterangehour', 'variables/daterangeday', 'variables/daterangeweek', 'variables/daterangemonth', 'variables/daterangequarter', 'variables/daterangeyear'], dimensionId);
		}
	};
});
'use strict';

angular.module('common').factory('dimensionValuesService', function ($q, $http, appModel, $filter) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var NONE_VALUE = $filter('l10n')(['noneValue', 'None']);
	return {
		getValues: function getValues(dimensions) {
			var requestParams = {
				rsid: appModel.reportSuite.rsid,
				locale: l10nConfig.currentLocale
			};

			if (appModel.appService.disableOberonRemoteLoading) {
				requestParams.allowRemoteLoad = 'false'; // string-based; only
			}

			return $http({
				method: 'POST',
				url: appModel.appService.baseURL + '/dimensions/values',
				cache: true,
				params: requestParams,
				data: dimensions
			}).then(function (res) {
				// Replace null values with 'None' (so we match the way that rankedRequest returns null values)
				res.data.forEach(function (row) {
					row.value = row.value || NONE_VALUE;
				});
				return res;
			});
		}
	};
});
'use strict';

angular.module('common').factory('eventService', function ($q, $http, appModel, _) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	return {
		loadEvent: function loadEvent(id, params) {
			// Trim off 'metrics/'
			var isCalcMetric = !~id.indexOf('metrics/');
			var metricId = id.replace('metrics/', '');
			var endpoint = isCalcMetric ? 'calculatedmetrics' : 'metrics';
			return $http({
				method: 'GET',
				url: appModel.appService.baseURL + '/' + endpoint + '/' + metricId,
				cache: true,
				params: _.extend({
					rsid: appModel.reportSuite.rsid,
					locale: l10nConfig.currentLocale
				}, params),
				transformResponse: $http.defaults.transformResponse.concat(function (res, headersGetter, status) {
					if (status < 400) {
						transformEvent(res);
						return res;
					}
				})
			});
		},
		loadAllEvents: function loadAllEvents(params) {
			return $http({
				method: 'GET',
				url: appModel.appService.baseURL + '/metrics',
				cache: true,
				params: _.extend({
					rsid: appModel.reportSuite.rsid,
					locale: l10nConfig.currentLocale
				}, params),
				transformResponse: $http.defaults.transformResponse.concat(function (res, headersGetter, status) {
					if (status < 400) {
						var events = res;
						events.forEach(function (event) {
							transformEvent(event);
						});
						return events;
					}
					return res;
				})
			});
		}
	};

	function transformEvent(event) {
		event.tooltip = event.description ? event.description : event.name;

		// give each item a metric type for display purposes
		event.itemType = 'metric';
	}
});
'use strict';

angular.module('common').directive('anShareButton', function ($tartan, TartanChartUtils) {
	return {
		restrict: 'EA',
		scope: {
			shareOpts: '=',
			shareTitle: '@',
			shareSubtitle: '@',
			shareProduct: '@',
			shareImsorgid: '@',
			shareType: '@',
			shareData: '=',
			shareChartType: '@',
			success: '&',
			fail: '&',
			shareEnabled: '='
		},
		link: function link(scope, element, attrs) {
			if (!TartanChartUtils.isIMSSession()) {
				element.hide();
			}
			element.click(function (event) {
				event.stopPropagation(); // stop click event propagation

				if (!scope.shareEnabled) {
					return;
				}

				var opts = TartanChartUtils.getMockOpts();
				if (scope.shareOpts) {
					opts = scope.shareOpts || opts.shareOps;
				}
				if (attrs['shareUrl']) {
					opts.url = attrs['shareUrl'];
				}
				if (scope.shareTitle) {
					opts.title = scope.shareTitle;
				}
				if (scope.shareSubtitle) {
					opts.subtitle = scope.shareSubtitle;
				}
				if (scope.shareProduct) {
					opts.product = scope.shareProduct;
				}
				if (scope.shareImsorgid) {
					opts.imsOrgId = scope.shareImsorgid;
				}
				if (scope.shareType) {
					opts.type = scope.shareType;
				}
				if (!opts.data) {
					opts.data = {};
				}
				if (opts.type == 'asset') {
					if (attrs['shareAssetUrl']) {
						opts.data.url = attrs['shareAssetUrl'];
					} else {
						opts.data.url = opts.url;
					}
				} else if (scope.shareData) {
					//TODO enable sharing of dynamc data
					opts.data.dataURL = 'data:application/json,{\"data\":' + JSON.stringify(scope.shareData) + '}';
				}
				if (scope.shareChartType) {
					opts.data.chartType = scope.shareChartType;
				}
				$tartan.api.shareCard(opts);
				//                  TODO trackEvents('event20','Share Initiated');
			});

			scope.$watch('shareEnabled', function (enabled) {
				if (enabled) {
					element.removeAttr('disabled');
				} else {
					element.attr('disabled', 'disabled');
				}
			});
		}
	};
});
'use strict';

angular.module('common').factory('TartanChartUtils', function (appModel) {
	var chart = null,
	    typeToType = {
		'rank': {
			'gt_over_time': { 'type': 'line', 'opts': [] }, // maybe this should be bar?
			'gt_bar': { 'type': 'bar', 'opts': ['dodge', 'vertical'] },
			'gt_stacked_bar': { 'type': 'bar', 'opts': ['stack', 'vertical'] },
			'gt_horiz_bar': { 'type': 'bar', 'opts': ['dodge', 'flip'] },
			'gt_stacked_horiz_bar': { 'type': 'bar', 'opts': ['stack', 'flip'] },
			'gt_fill': { 'type': 'line', 'opts': ['fill'] },
			'gt_stacked_fill': { 'type': 'line', 'opts': ['fill', 'stack'] },
			'gt_pie': { 'type': 'bar', 'opts': ['polar'] },
			'gt_scatter': { 'type': 'point', 'opts': [] }, // scatter and bubble are the same
			'gt_bubble': { 'type': 'point', 'opts': [] }
		},
		'trend': {
			'gt_over_time': { 'type': 'line', 'opts': [] },
			'gt_bar': { 'type': 'bar', 'opts': ['dodge', 'vertical'] }, // we show the bar chart as a line chart - we may change this later
			'gt_fill': { 'type': 'line', 'opts': ['fill'] },
			'gt_stacked_fill': { 'type': 'line', 'opts': ['stack', 'fill'] }
		}
	},
	    category = 'rank',
	    // default to rank
	opts = {
		'url': 'http://marketing.adobe.com',
		'title': 'Share Title',
		'subtitle': 'Share Subtitle',
		'product': 'Sharing Product',
		'type': 'experiment-result',
		'data': {
			'dataURL': 'data:application/json,{"data":"random"}',
			'chartType': 'abntest'
		}
	};
	return {
		getChartTypeFromState: function getChartTypeFromState(state) {

			if (state.view === 0 || state.view === 3 || state.view === 17) {
				category = 'trend'; // overtime and trended and key metrics
			}
			if (typeToType[category].hasOwnProperty(state['chart_type'])) {
				chart = '/' + category + '/' + typeToType[category][state['chart_type']]['type'] + '/';
				if (typeToType[category][state['chart_type']]['opts'].length) {
					var opts = '';
					for (var i = 0; i < typeToType[category][state['chart_type']]['opts'].length; i++) {
						if (opts) {
							opts = opts + ',';
						}
						opts = opts + typeToType[category][state['chart_type']]['opts'][i];
					}
					if (opts) {
						chart = chart + opts;
					}
				}
			}
			if (!chart) {
				chart = '/rank/bar/vertical'; // default to ranked bar - this should show something reasonable with trend or rank data
			}
			return chart;
		},
		getMockOpts: function getMockOpts() {
			return opts;
		},
		isIMSSession: function isIMSSession() {
			// TODO Change to not use global this way
			return appModel.user.isIMSSession ? 1 : 0;
		}
	};
});
'use strict';

angular.module('common').factory('$tartan', function () {
	if (window.tartan) {
		return window.tartan;
	} else {
		return {};
	}
});
'use strict';

angular.module('common').constant('ANALYTICS_RAIL_ID', 'my-analytics-rail').controller('reportNavigationCtrl', function ($scope, $filter, favoriteService, shellService, eventBus, util, $window, trackService, $timeout, $rootScope, ANALYTICS_RAIL_ID, $log, omnitureService, spinnerService) {
	var Dialog = analyticsui['ui-core'].Dialog;
	var Rail = analyticsui['shell'].Rail;


	var currentFavorite = null;
	var $ = jQuery;

	$scope.rail = {
		browseAllReports: false,
		transitioning: false,
		openUsingHotkey: false,
		closeUsingHotkey: false,
		lazyLoadMenu: false,
		displayCloseX: false,
		disableClose: false
	};

	$scope.favoriteLabel = $filter('l10n')(['favoriteLabel', 'Favorite']);

	$scope.isFavorited = false;

	$scope.millerColumns = {
		excludeVrs: false
	};

	favoriteService.getIsFavorited().then(function (isFavorited) {
		$scope.isFavorited = isFavorited;
		$scope.favoriteLabel = isFavorited ? $filter('l10n')(['favoritedLabel', 'Favorited']) : $filter('l10n')(['favoriteLabel', 'Favorite']);
	});

	$($window.document).on('openGlobalSearch', toggleNavigationViewFromEvent);

	function toggleNavigationViewFromEvent(event) {
		$scope.toggleNavigationView(event);
		// Force a digest because this is a native dom event they probably didn't originate from angular.
		$scope.$evalAsync();
	}

	$scope.openAnalyticsRail = function () {
		var reportNavigation = document.querySelector('.report-navigation-view');
		Rail.updateProps({
			activePanelId: 'my-analytics-rail',
			isPinned: true,
			location: 'left'
		}, reportNavigation);

		Rail.updateProps({
			isPinned: false,
			location: 'right'
		}, reportNavigation);
	};

	$scope.toggleNavigationView = function ($event) {
		$scope.rail.browseAllReports = !$scope.rail.browseAllReports;
		$scope.rail.transitioning = true;
		if (!$scope.rail.browseAllReports) {
			$scope.searchText = '';
		}
		if ($event) {
			$($event.target).blur();
		}
		$scope.openAnalyticsRail();
	};

	$scope.onGlobalKeydown = function (evt) {
		if (evt.keyCode === 27 && $scope.rail.browseAllReports && !isInputField(evt.target) && !$scope.rail.disableClose) {
			//If escape is hit at a global level then close the navigation view.
			util.safeApply($scope, function () {
				$scope.rail.closeUsingHotkey = true;
				$scope.rail.browseAllReports = false;
				$scope.rail.transitioning = true;
				$scope.searchText = '';
			});
		}

		function isInputField(elm) {
			// Using the 'isContentEditable' property works better than .is('[contenteditable="true"]')
			// because it picks up inherited elements
			return $(elm).is('input,textarea') || elm.isContentEditable;
		}
	};

	$scope.$watch('rail.browseAllReports', function (browseAll) {
		if (browseAll) {
			hideSCDatePicker();
			//shellService.hideRightRailPanel();
		}
	});

	function hideSCDatePicker() {
		var scPageController = $window['page_controller'];
		if (scPageController && scPageController.cancelDate) {
			//Hide calendar within dashboards
			scPageController.cancelDate();
		} else if (scPageController && scPageController.widgets.calendar) {
			//Hide calendar within reports
			scPageController.widgets.calendar.hide();
		}
	}

	eventBus.subscribe('addFavorite', $scope, function (newFavorite) {
		var i,
		    duplicate = false;
		for (i = 0; i < $scope.bookmarkFavorites.length; i++) {
			if ($scope.bookmarkFavorites[i].name == newFavorite.name) {
				//Already a favorite with this name, Display option to replace
				duplicate = true;
				askToReplaceDuplicate(newFavorite, $scope.bookmarkFavorites[i]);
				break;
			}
		}
		if (!duplicate) {
			addFavorite(newFavorite);
		}
	});

	function askToReplaceDuplicate(newFavorite, oldFavorite) {
		var confirmMessage = util.sprintf($filter('l10n')(['wouldYouLikeToReplaceWarning', 'A favorite with the name \'%s\' already exists. Would you like to replace it?']), newFavorite.name);

		Dialog.confirm(confirmMessage).then(function () {
			_deleteFavorite(oldFavorite);
			addFavorite(newFavorite);
		}).catch(function () {});
	}

	function addFavorite(newFavorite) {
		$scope.openAnalyticsRail();
		$scope.updateFavoritesList(newFavorite); // update favorites display first
		$scope.isFavorited = true;
		$scope.favoriteLabel = $filter('l10n')(['favoritedLabel', 'Favorited']);
		shellService.setTitle(newFavorite.name);

		favoriteService.addFavorite(newFavorite, $rootScope.getBookmarkState ? $rootScope.getBookmarkState() : null).then(function (favorite) {
			$log.info('Successfully added the following favorite:', favorite.name);
			util.safeApply($scope, function () {
				//Even though we immediately update the list we need to change the url after the fact so
				//that it gives a valid clickable url.
				newFavorite.name = favorite.name;
				newFavorite.url = favorite.url;
				newFavorite.componentId = favorite.componentId;
				newFavorite.componentType = favorite.componentType;
			});
		}, function (err) {
			Dialog.alert($filter('l10n')(['unableToFavoriteBody', 'Unable to add a favorite for %s'], newFavorite.name) + '\n\n' + err, {
				variant: 'error',
				title: $filter('l10n')(['unableToFavoriteHeader', 'ERROR'])
			});
		});

		trackService.trackAction(null, 'Add Favorite', { favoriteName: newFavorite.name, favoriteUrl: newFavorite.url });
		currentFavorite = newFavorite;
	}

	$scope.deleteFavorite = function (event, favorite) {
		if (event) {
			event.preventDefault();
		}

		Dialog.confirm($filter('l10n')(['unFavoriteBody', 'Are you sure you want to Un-Favorite %s?'], favorite.name)).then(function () {
			_deleteFavorite(favorite);
		}).catch(function () {});
	};

	function _deleteFavorite(favorite, deleteFromStar) {
		if (favorite) {

			if (currentFavorite && currentFavorite.name == favorite.name || favorite.name == shellService.getTitle()) {
				$scope.isFavorited = false;
				$scope.favoriteLabel = $filter('l10n')(['favoriteLabel', 'Favorite']);
			}

			$scope.bookmarkFavorites.splice($scope.bookmarkFavorites.indexOf(favorite), 1);
			$scope.frequentlyViewed.forEach(function (report, index) {
				if (report.favoriteId && report.favoriteId === favorite.favoriteId) {
					$scope.frequentlyViewed.splice(index, 1);
				}
			});
			$scope.reportHistory.forEach(function (report, index) {
				if (report.favoriteId && report.favoriteId === favorite.favoriteId) {
					$scope.reportHistory.splice(index, 1);
				}
			});

			favoriteService.deleteFavorite(favorite).then(function () {
				$log.info('Successfully deleted the following favorite:', favorite.name);
			}, function (err) {
				Dialog.alert($filter('l10n')(['unableToDeleteFavoriteBody', 'Unable to delete %s'], favorite.name) + '\n\n' + err, {
					variant: 'error',
					title: $filter('l10n')(['unableToDeleteFavoriteHeader', 'ERROR'])
				});
			});

			trackService.trackAction(null, 'Delete Favorite', {
				favoriteName: favorite.name,
				favoriteUrl: favorite.url,
				deleteFromStar: deleteFromStar || false
			});
			currentFavorite = null;
		}
	}

	eventBus.subscribe('unfavoriteCurrentPage', $scope, function () {
		if ($scope.bookmarkFavorites && $scope.bookmarkFavorites.length) {
			var favoriteToRemove = currentFavorite;
			if (!favoriteToRemove) {
				var pageTitle = shellService.getTitle();
				for (var i = 0; i < $scope.bookmarkFavorites.length; i++) {
					if ($scope.bookmarkFavorites[i].name === pageTitle) {
						favoriteToRemove = $scope.bookmarkFavorites[i];
						favoriteToRemove.url = $window.location.href;
						break;
					}
				}
			}

			_deleteFavorite(favoriteToRemove, true);
		}
	});

	$scope.loadAnalyticsRailMenu = function () {
		spinnerService.show('analyticsRailSpinner');
		omnitureService.getMyAnalyticsMenu().then(function (menu) {
			$scope.bookmarkFavorites = menu.bookmarkFavorites;
			$scope.frequentlyViewed = menu.frequentlyViewed;
			$scope.reportHistory = menu.reportHistory;
			spinnerService.hide('analyticsRailSpinner');
			$scope.$applyAsync();
		}, function (errors) {
			if (errors.status !== 0) {
				$log.error('Unable to load the My Analytics menu:', errors);
			}
		});
	};

	$scope.updateFavoritesList = function (newFavorite) {
		spinnerService.hide('analyticsRailSpinner');
		newFavorite.new = true;
		$timeout(function () {
			// prevent other new list items from flashing again
			newFavorite.new = false;
		}, 2200); // the animation is 2 seconds, plus 200 ms of buffer time
		$scope.bookmarkFavorites.unshift(newFavorite);
	};

	//When the state changes let's make sure to remove the favorited state.
	var unwatchDirtyState = $scope.$watch('$$stateIsDirty', function (stateIsDirty) {
		if (stateIsDirty) {
			$scope.isFavorited = false;
			$scope.favoriteLabel = $filter('l10n')(['favoriteLabel', 'Favorite']);
			unwatchDirtyState();
		}
	});

	$scope.$on('$destroy', function () {
		$($window.document).off('openGlobalSearch', toggleNavigationViewFromEvent);
	});
});
'use strict';

(function ($) {
	angular.module('common').directive('anAnalyticsRail', function ($log, $window, util, ANALYTICS_RAIL_ID, user, eventBus, _) {
		return {
			templateUrl: 'analytics/report-navigation/directives/an-analytics-rail.tpl.html',
			restrict: 'EA',
			replace: true,
			controller: function controller($scope) {
				$scope.onFavoriteClick = function (favorite) {
					if ($window.location.href === favorite.url) {
						$window.location.reload();
					}
				};

				$scope.onInnerRailToggle = function (leftRailId) {
					if ($scope.rail.browseAllReports && leftRailId != ANALYTICS_RAIL_ID) {
						util.safeApply($scope, function () {
							$scope.rail.browseAllReports = false;
						});
					}
				};
			},
			link: function link(scope, element) {
				// Set initial state.
				_.set(scope, 'rail.activeAccordions', _.get(scope, 'rail.activeAccordions', {}));
				_.defaults(scope.rail.activeAccordions, { favorite: false, frequent: false, recent: false });

				user.getPersistentAttribute('analyticsRailActiveAccordions').then(function (active) {
					scope.rail.activeAccordions = {
						favorite: active ? active.favorite : true,
						frequent: active ? active.frequent : true,
						recent: active ? active.recent : true
					};
				});

				eventBus.subscribe('addFavorite', scope, function () {
					var favoriteAccordion = element.find('.js-favorite-accordion'),
					    maxHeight = (favoriteAccordion.get(0).scrollHeight < 36 ? 1000 : favoriteAccordion.get(0).scrollHeight) + 100;

					if (!scope.rail.activeAccordions.favorite) {
						toggleAccordion(favoriteAccordion, true);
					}

					favoriteAccordion.css('max-height', maxHeight + 'px');
				});

				element.on('click', '.coral3-Accordion-header', function () {
					var accordionItem = $(this).closest('.coral3-Accordion-item'),
					    isActive = !accordionItem.hasClass('is-active');

					toggleAccordion(accordionItem, isActive);
				});

				function toggleAccordion(accordionItem, isActive) {
					var maxHeight = isActive ? accordionItem.get(0).scrollHeight < 36 ? 1000 : accordionItem.get(0).scrollHeight : 36;
					accordionItem.css('max-height', maxHeight + 'px').toggleClass('is-active', isActive);

					// Record the state.
					scope.rail.activeAccordions[accordionItem.data().accordionId] = isActive;
					user.setPersistentAttribute('analyticsRailActiveAccordions', scope.rail.activeAccordions);
				}
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').directive('anFavoritePopover', function (shellService, $timeout, eventBus, $window) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		templateUrl: 'analytics/report-navigation/directives/an-favorite-popover.tpl.html',
		restrict: 'EA',
		replace: true,
		controller: function controller($scope, $element) {

			$scope.FAVORITE_TITLE_MAX_CHARS = 50;
			$scope.inputText = '';

			$element.on('show', function () {
				$scope.inputText = _getPageTitle();

				$timeout(function () {
					$element.find('.coral-Textfield').focus();
				});
			});

			$element.on('compositionend', function (event) {
				// AN-90909: get the close time of the IME,
				// the close time will be used to judge whether the enter event is triggered by composition end event
				$scope.imeCloseTime = Date.now();
			});

			$scope.onEnterPressed = function () {
				// AN-90909: If the enter pressed event is triggered after IME in 100 ms, we treat it as the result of the IME close event,
				// and the addFavorite action won't be invoked.
				if (typeof $scope.imeCloseTime !== 'undefined') {
					var currTime = Date.now();
					var closeTime = $scope.imeCloseTime;
					$scope.imeCloseTime = undefined;
					if (currTime - closeTime < 100) {
						return;
					}
				}

				$scope.addFavorite();
				$scope.hideFavoritePopover();
			};

			$scope.addFavorite = function () {
				if ($scope.inputText === '') {
					$scope.inputText = _getPageTitle();
				}

				eventBus.publish('addFavorite', { name: $scope.inputText, url: $window.location.href });
				$scope.hideFavoritePopover();
			};

			$scope.hideFavoritePopover = function () {
				Popover.close($element.get(0));
			};

			function _getPageTitle() {
				var pageTitle = shellService.getTitle();
				//Limit the page title to 50 chars due to limitations within the bookmark db.
				if (pageTitle.length > $scope.FAVORITE_TITLE_MAX_CHARS) {
					pageTitle = pageTitle.substring(0, $scope.FAVORITE_TITLE_MAX_CHARS);
				}
				return pageTitle;
			}
		},
		link: function link(scope, element) {
			//Reparent the popover so that it will display appropriately.
			element.appendTo(element.parents('.shell-ActionBar'));
		}
	};
});
'use strict';

angular.module('common').directive('anFavoriteTool', function (favoriteService, eventBus, shellService, $window) {
	return {
		restrict: 'EA',
		templateUrl: 'analytics/report-navigation/directives/an-favorite-tool.tpl.html',
		replace: true,
		link: function link(scope, element) {
			scope.onFavoriteToolClick = function (event) {
				var favoriteType = favoriteService.getComponentTypeFromUrl();
				if (scope.isFavorited) {
					event.stopPropagation();
					eventBus.publish('unfavoriteCurrentPage');
					//Fix for iPad. Stopping the propagation of an event does not stop a click event from getting
					//registered within coralui globally due to a change in event bubbling. Basically every click
					//event on an ipad is a global event with a target instead of using a targeting and bubbling
					//phase like we are used to with every other event. This ensures that even if the popover is
					//displayed it will eventually be hidden. There may be a blip but at least it is usable.
					if (scope.hidePopover) {
						scope.hidePopover();
					}
				} else if (favoriteType === 'dashboard') {
					event.stopPropagation();
					eventBus.publish('addFavorite', {
						name: shellService.getTitle(),
						url: $window.location.href
					});
				}
			};
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('anMillerColumnView', function ($window, $timeout) {
		return {
			templateUrl: 'analytics/report-navigation/directives/an-miller-column-view.tpl.html',
			restrict: 'EA',
			replace: true,
			scope: {
				adModel: '='
			},
			link: function link(scope, element) {
				var columnsContainer = element.find('.miller-columns-container');

				scope.scrollAllColumns = function () {
					//Scroll all columns in the next frame to make sure they have been created.
					$timeout(function () {
						for (var i = 0; i < scope.columns.length; i++) {
							scope.scrollColumn(scope.columns[i], i);
						}
					});
				};

				scope.scrollColumn = function (columnModel, columnIndex) {
					columnModel = columnModel || scope.activeColumn;

					if (isNaN(columnIndex) || columnIndex < 0) {
						columnIndex = scope.activeColumnIndex;
					}

					var column = element.find('.miller-column:eq(' + columnIndex + ')'),
					    selectedLi = column.find('.miller-column-item:eq(' + columnModel.selectedItemIndex + ')'),
					    selectedLiYPos = selectedLi.length ? selectedLi.position().top : 0,
					    currentScrollPos = column.scrollTop(),
					    newScrollPos = 0;

					// Check to see if the items postion plus its height is greater than the column's height.
					// If so then adjust the scroll position to account for the bottom most portion of the selected
					// item. When going up check to see if the position of the current item is less than 0. If so
					// then it is out of site and should be adjusted to be at the top of the list.
					if (selectedLiYPos + selectedLi.height() > column.height()) {
						//Set the new scroll position to the current scroll position.
						newScrollPos = currentScrollPos;
						//Add the position of the selected item accounting for its height.
						newScrollPos += selectedLiYPos + selectedLi.outerHeight();
						//Now subtract the height of the dropdown list.
						newScrollPos -= column.height();

						column.scrollTop(newScrollPos);
					} else if (selectedLiYPos < 0) {
						//Set the new scroll position to the current scroll position.
						newScrollPos = currentScrollPos;
						//Subtract the current y position.  NOTE it will be negative so we are actually going to add it.
						newScrollPos += selectedLiYPos;

						column.scrollTop(newScrollPos);
					}
				};

				scope.scrollHorizontally = function () {
					var newScrollWidth = scope.columns.length * 249,
					    activeColumnOffset = scope.activeColumnIndex * 249,
					    maxScroll = newScrollWidth - element.width(),
					    currentScrollPos = element.scrollLeft();

					if (maxScroll < activeColumnOffset) {
						activeColumnOffset = maxScroll;
					}

					if (activeColumnOffset < currentScrollPos) {
						element.animate({ scrollLeft: activeColumnOffset }, {
							duration: 100,
							complete: function complete() {
								columnsContainer.width(newScrollWidth);
							}
						});
					} else if (currentScrollPos < maxScroll) {
						columnsContainer.width(newScrollWidth);
						element.animate({ scrollLeft: maxScroll }, 100);
					}
				};
			},
			controller: function controller($scope, $element) {
				$scope.columns = [];
				$scope.activeColumn = null;
				$scope.activeColumnIndex = -1;
				$scope.hasFocus = false;

				//Track keyboard interactions to be sent in bulk when a user navigates.
				$scope.trackParams = {
					navigateType: 'Miller Columns',
					leftKeyPressed: 0,
					upKeyPressed: 0,
					rightKeyPressed: 0,
					downKeyPressed: 0
				};

				$scope.onItemClick = function (item, column) {
					if (column === $scope.activeColumn && item === column.selectedItem) {
						return;
					}

					setActiveColumn(column);
					setSelectedColumnItem(item, column);
				};

				$scope.onKeyDown = function (event) {
					if (!$scope.activeColumn) {
						return;
					}
					var activeColumn;

					switch (event.keyCode) {
						case 37:
							//left
							event.preventDefault();
							$scope.trackParams.leftKeyPressed += 1;
							if ($scope.activeColumnIndex > 0) {
								activeColumn = $scope.columns[$scope.activeColumnIndex - 1];
								setActiveColumn(activeColumn);
								setSelectedColumnItem(activeColumn.selectedItem, activeColumn);
							}
							break;
						case 38:
							//up
							event.preventDefault();
							$scope.trackParams.upKeyPressed += 1;
							if ($scope.activeColumn.selectedItemIndex - 1 >= 0) {
								setSelectedColumnItem($scope.activeColumn.children[$scope.activeColumn.selectedItemIndex - 1], $scope.activeColumn);
							}
							break;
						case 39:
							//right
							event.preventDefault();
							$scope.trackParams.rightKeyPressed += 1;
							if ($scope.activeColumnIndex + 1 < $scope.columns.length) {
								activeColumn = $scope.columns[$scope.activeColumnIndex + 1];
								setActiveColumn(activeColumn);
								setSelectedColumnItem(activeColumn.selectedItem || activeColumn.children[0], activeColumn);
							}
							break;
						case 40:
							//down
							event.preventDefault();
							$scope.trackParams.downKeyPressed += 1;
							if ($scope.activeColumn.selectedItemIndex + 1 < $scope.activeColumn.children.length) {
								setSelectedColumnItem($scope.activeColumn.children[$scope.activeColumn.selectedItemIndex + 1], $scope.activeColumn);
							}
							break;
						case 13:
							//enter
							if ($scope.activeColumn.selectedItem.url) {
								$element.trigger('navigateUsingEnter');
								// Give the navigateUsingEnter event time to propagate for tracking purposes before
								// navigating to the url.
								$timeout(function () {
									$window.location.href = $scope.activeColumn.selectedItem.url;
								}, 200);
							} else if ($scope.activeColumn.selectedItem.children) {
								activeColumn = $scope.columns[$scope.activeColumnIndex + 1];
								setActiveColumn(activeColumn);
								setSelectedColumnItem(activeColumn.selectedItem || activeColumn.children[0], activeColumn);
							}
							break;
					}
				};

				/**
     * Go through each of the columns after the column that was clicked on and deselect the
     * selected item.
     * @param currentColumnIndex
     * @param columns
     */
				function deselectItemsInInactiveColumns() {
					//Deselect all of the columns within the columns that will be removed
					for (var i = $scope.columns.length - 1; i > $scope.activeColumnIndex; i--) {
						var c = $scope.columns[i];
						if (c.selectedItem) {
							c.selectedItem.selected = false;
							c.selectedItem = null;
						}
					}
				}

				function setSelectedColumnItem(item, column) {
					//Unselect the currently selected item within the current column
					if (column.selectedItem) {
						column.selectedItem.selected = false;
					}

					//Now select the new item and set the selected item.
					item.selected = true;
					column.selectedItem = item;
					column.selectedItemIndex = $.inArray(item, column.children);

					deselectItemsInInactiveColumns();

					if (item.children) {
						$scope.columns.splice($scope.activeColumnIndex + 1, Number.MAX_VALUE, item);
					} else {
						$scope.columns.splice($scope.activeColumnIndex + 1, Number.MAX_VALUE);
					}

					$scope.scrollHorizontally();
					$scope.scrollColumn();
				}

				function setActiveColumn(column) {
					if ($scope.activeColumn) {
						$scope.activeColumn.active = false;
					}

					column.active = true;
					$scope.activeColumn = column;
					$scope.activeColumnIndex = $.inArray(column, $scope.columns);

					if (!column.selectedItemIndex || column.selectedItemIndex == -1) {
						column.selectedItemIndex = 0;
					}
				}

				var unwatchModel = $scope.$watch('adModel', function (adModel) {
					if (adModel) {

						//$scope.columns.push(adModel);
						findSelectedColumns(adModel);

						//If there is no selection then set the active column to the first column in the list.
						if (!$scope.columns.length) {
							$scope.columns.push(adModel);
							setActiveColumn(adModel);
							setSelectedColumnItem(adModel.children[0], adModel);
						} else {
							setActiveColumn($scope.columns[$scope.columns.length - 1]);
						}

						$scope.scrollHorizontally();
						$scope.scrollAllColumns();

						unwatchModel();
					}
				});

				function findSelectedColumns(menuItem) {
					var nestedMenuItem, selectedMenuItem, i;
					for (i = 0; i < menuItem.children.length; i++) {
						nestedMenuItem = menuItem.children[i];
						if (nestedMenuItem.children) {
							selectedMenuItem = findSelectedColumns(nestedMenuItem) ? nestedMenuItem : null;
						} else {
							selectedMenuItem = nestedMenuItem.selected ? nestedMenuItem : null;
						}

						if (selectedMenuItem) {
							if (menuItem.children) {
								menuItem.selectedItem = selectedMenuItem;
								menuItem.selectedItemIndex = $.inArray(selectedMenuItem, menuItem.children);
								selectedMenuItem.selected = true;
								$scope.columns.unshift(menuItem);
							}

							break;
						}
					}
					return selectedMenuItem;
				}
			}
		};
	});
})(jQuery);
'use strict';

(function ($) {
	angular.module('common').directive('anReportNavigationView', function ($q, _, omnitureService, eventBus, $log, $timeout, $window, $filter, guid, appModel, scUrl) {
		return {
			templateUrl: 'analytics/report-navigation/directives/an-report-navigation-view.tpl.html',
			restrict: 'EA',
			replace: true,
			controller: function controller($scope) {
				$scope.searchText = '';

				$scope.menu = {
					raw: null,
					loading: false,
					flattened: [],
					filtered: []
				};

				$scope.searchTrackParams = {
					navigateType: 'Search',
					searchText: '',
					upKeyPressed: 0,
					downKeyPressed: 0
				};

				$scope.searchCursorIndex = 0;
				$scope.initialReportSuite = appModel.reportSuite.name; // cache original report suite because workspace changes it without reload

				$scope.onInit = function () {
					if (!$scope.rail.lazyLoadMenu) {
						$scope.loadReportMenu();
					} else {
						var unwatch = $scope.$watch('rail.browseAllReports', function (browseAllReports) {
							if (browseAllReports) {
								$scope.loadReportMenu();
								unwatch();
							}
						});
					}
				};

				$scope.loadReportMenu = function () {
					$scope.menu.loading = true;

					omnitureService.getReportsMenu(appModel.shell.selectedMenuId).then(function (reportMenu) {

						//Set these variables in the next frame to make sure that binding fires.
						$scope.menu.raw = reportMenu;
						$scope.menu.loading = false;

						$scope.menu.flattened.splice(0);
						flattenMenu(reportMenu);
						addHiddenMenuItemsIfNotExists();

						if ($scope.rail.browseAllReports) {
							$scope.focusSearchField();
						}
					}, function (errors) {
						if (errors.status !== 0) {
							$log.error('Unable to load the report menu:', errors);
						}
						if (errors['access_denied'] || errors.status === 302) {
							$window.location.href = scUrl.switchpfs(scUrl.productIds.SITECATALYST, 'Main.AccessDenied');
						}
						$scope.menu.loading = false;
					});
				};

				function flattenMenu(menu) {
					var menuItem, i;
					for (i = 0; i < menu.children.length; i++) {
						menuItem = menu.children[i];
						if (menuItem.url) {
							menuItem.metaSearchName = getMetaSearchName(menuItem);
							menuItem.uniqueId = guid.create();
							$scope.menu.flattened.push(menuItem);
						} else if (menuItem.children) {
							//If the container is hidden remove it from the visible array but put it inside the
							//flattened array.
							if (menuItem.hidden) {
								menu.children.splice(i, 1);
								flattenHiddenMenu(menuItem);
							} else {
								flattenMenu(menuItem);
							}
						}
					}
				}

				function getMetaSearchName(menuItem) {
					var metaSearchName = menuItem.name;
					if (menuItem.extraTitleInfo) {
						metaSearchName += ' (' + menuItem.extraTitleInfo + ')';
					}
					return metaSearchName;
				}

				//Local Variables to add hidden items to the searchable array.
				var hiddenMenuItems = [];
				//var hiddenHiearchyBaseDir = [$filter('l10n')(['reportsAndAnalyticsMenuLabel', 'Reports & Analytics Menu'])];

				/**
     * Add hidden menu items to a separate array so that we can check for duplicates after going through
     * all items within the menu. Other menu items will take precedence over hidden menu items.
     * @param hiddenMenu
     */
				function flattenHiddenMenu(hiddenMenu) {
					var hiddenMenuItem, i;
					for (i = 0; i < hiddenMenu.children.length; i++) {
						hiddenMenuItem = hiddenMenu.children[i];
						if (hiddenMenuItem.url) {
							hiddenMenuItem.uniqueId = guid.create();
							hiddenMenuItem.metaSearchName = getMetaSearchName(hiddenMenuItem);
							//hiddenMenuItem.hierarchy.unshift(hiddenHiearchyBaseDir); // For now, we are removing this external menu item in the hierarchy.
							hiddenMenuItems.push(hiddenMenuItem);
						} else if (hiddenMenuItem.children) {
							flattenHiddenMenu(hiddenMenuItem);
						}
					}
				}

				/**
     * Add hidden menu items if a similar entry hasn't been added to the flattenedMenu yet. This is based
     * on an exact url match and not a name match.
     */
				function addHiddenMenuItemsIfNotExists() {
					var menuItem, hiddenItem, duplicateFound;
					for (var i = 0; i < hiddenMenuItems.length; i++) {
						hiddenItem = hiddenMenuItems[i];
						duplicateFound = false;
						for (var k = 0; k < $scope.menu.flattened.length; k++) {
							menuItem = $scope.menu.flattened[k];
							if (menuItem.url === hiddenItem.url) {
								duplicateFound = true;
								break;
							}
						}
						if (!duplicateFound) {
							$scope.menu.flattened.push(hiddenItem);
						}
					}
				}

				$scope.getBrowseAllReportsTrackParams = function () {
					var trackParams = {};
					if ($scope.rail.browseAllReports) {
						trackParams.openUsingHotkey = $scope.rail.openUsingHotkey;
					} else {
						trackParams.closeUsingHotkey = $scope.rail.closeUsingHotkey;
					}
					$scope.rail.openUsingHotkey = $scope.rail.closeUsingHotkey = false;

					return trackParams;
				};

				$scope.onAnimationComplete = function () {
					$scope.rail.transitioning = false;
					if (!$scope.rail.browseAllReports) {
						eventBus.publish('reportNavigationClosed');
					}
				};
			},
			link: function link(scope, element) {
				scope.searchField = element.find('.js-report-navigation-search-field');

				var millerColumnView, scrollableSearchContainer;

				eventBus.subscribe('focusReportsSearchField', scope, function () {
					scope.focusSearchField();
				});

				scope.focusSearchField = function (timeout) {
					timeout = timeout || 100;
					$timeout(function () {
						scope.searchField.focus();
					}, timeout);
				};

				scope.$watch('rail.browseAllReports', function (browseAll) {
					//Load the report
					if (browseAll && scope.menu.raw) {
						scope.focusSearchField(500);
					}
				});

				scope.$watch('searchText', function (searchText) {
					scrollableSearchContainer = scrollableSearchContainer || element.find('.js-shell-content');
					scrollableSearchContainer.scrollTop(0);
					scope.searchTrackParams.searchText = searchText;
				});

				scope.onKeyDown = function (event) {
					switch (event.keyCode) {
						case 38:
							//up
							event.preventDefault();
							scope.searchTrackParams.upKeyPressed += 1;
							handleUpKey();
							break;
						case 40:
							//down
							event.preventDefault();
							scope.searchTrackParams.downKeyPressed += 1;
							handleDownKey();
							break;
						case 13:
							//enter
							handleEnterKey();
							break;
						case 27:
							//escape
							if (scope.searchText.length) {
								scope.searchText = '';
							} else if (!scope.rail.disableClose) {
								scope.searchField.blur();
								scope.searchText = '';

								if (scope.rail.browseAllReports) {
									scope.rail.closeUsingHotkey = true;
									scope.rail.browseAllReports = false;
									scope.rail.transitioning = true;
								}
							}
							break;
						case 191:
							//forward slash
							//Close the rail if command or ctrl is pressed in combination with the forward slash.
							if (event.ctrlKey || event.metaKey) {
								scope.searchField.blur();
								scope.searchText = '';
								scope.rail.browseAllReports = false;
								scope.rail.transitioning = true;
							}
							break;
						default:
							scope.searchCursorIndex = 0;
							break;
					}
				};

				function handleDownKey() {
					if (scope.searchText === '') {
						$timeout(function () {
							millerColumnView = millerColumnView || element.find('.miller-column-view');
							millerColumnView.focus();
						});
					} else if (scope.searchCursorIndex + 1 < scope.menu.filtered.length) {
						scope.searchCursorIndex += 1;
						scrollSearchResults();
					}
				}

				function handleUpKey() {
					if (scope.searchCursorIndex > 0) {
						scope.searchCursorIndex -= 1;
						scrollSearchResults();
					}
				}

				function handleEnterKey() {
					if (scope.menu.filtered.length > scope.searchCursorIndex) {
						var selectedItem = scope.menu.filtered[scope.searchCursorIndex];
						element.find('.grouped-search-results').trigger('navigateSearchUsingEnter');
						$timeout(function () {
							$window.location.href = selectedItem.url;
						}, 200);
					}
				}

				function scrollSearchResults() {
					scrollableSearchContainer = scrollableSearchContainer || element.find('.js-shell-content');

					var selectedGrouping = element.find('.search-grouping:eq(' + scope.searchCursorIndex + ')'),
					    groupingYPos = selectedGrouping.position().top,
					    currentScrollPos = scrollableSearchContainer.scrollTop(),
					    newScrollPos = 0;

					// Check to see if the items postion plus its height is greater than the column's height.
					// If so then adjust the scroll position to account for the bottom most portion of the selected
					// item. When going up check to see if the position of the current item is less than 0. If so
					// then it is out of site and should be adjusted to be at the top of the list.
					if (groupingYPos + selectedGrouping.outerHeight() > scrollableSearchContainer.height()) {
						//Set the new scroll position to the current scroll position.
						newScrollPos = currentScrollPos;
						//Add the position of the selected item accounting for its height.
						newScrollPos += groupingYPos + selectedGrouping.outerHeight();
						//Now subtract the height of the dropdown list.
						newScrollPos -= scrollableSearchContainer.height();

						scrollableSearchContainer.scrollTop(newScrollPos);
					} else if (groupingYPos < 0) {
						//Set the new scroll position to the current scroll position.
						newScrollPos = currentScrollPos;
						//Subtract the current y position.  NOTE it will be negative so we are actually going to add it.
						newScrollPos += groupingYPos;

						scrollableSearchContainer.scrollTop(newScrollPos);
					}
				}

				/*
     --------------------------------------------------------------------------------------------------------
     Infinite scroll logic.
     --------------------------------------------------------------------------------------------------------
     */
				var startingLimit = scope.limit = 40;

				scope.$watch('menu.filtered.length', function () {
					scope.resetLimit();
				});

				scope.resetLimit = function resetLimit() {
					scope.limit = startingLimit;
				};

				scope.increaseLimit = function increaseLimit() {
					scope.limit += 20;
					scope.$digest();
				};
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').factory('favoriteService', function ($window, $q, $http, util, simpleAttributeService, scUrl, scBookmarkService, cls, favoriteRepository, appModel) {
	var Project = analyticsui['model'].Project;


	function _favoriteDashboard(componentType, componentId) {
		var deferred = $q.defer();

		simpleAttributeService.save('favorites', {
			'componentType': componentType,
			'componentId': componentId
		}, true, function () {
			deferred.resolve(true);
		});

		return deferred.promise;
	}

	function _unfavoriteDashboard(componentType, componentId) {
		var deferred = $q.defer();

		simpleAttributeService.save('favorites', {
			'componentType': componentType,
			'componentId': componentId
		}, false, function () {
			deferred.resolve(true);
		});

		return deferred.promise;
	}

	return {
		getIsFavorited: function getIsFavorited(url) {
			var deferred = $q.defer(),
			    componentId = this.getComponentIdFromUrl(url),
			    componentType = this.getComponentTypeFromUrl(url);

			if (componentId && componentType) {
				favoriteRepository.query({
					componentType: componentType,
					componentIds: componentId
				}).then(function (result) {
					if (result.length > 0) {
						deferred.resolve(true);
					} else {
						deferred.resolve(false);
					}
				}, function () {
					deferred.resolve(false);
				});
			} else {
				deferred.resolve(false);
			}

			return deferred.promise;
		},

		getComponentIdFromUrl: function getComponentIdFromUrl(url) {
			var params = util.getQueryParams(url);
			return params['bookmark'] || params['dashboard'] || null;
		},

		getComponentTypeFromUrl: function getComponentTypeFromUrl(url) {
			var params = util.getQueryParams(url);
			if (params['bookmark']) {
				return 'bookmark';
			} else if (params['dashboard']) {
				return 'dashboard';
			}
			return null;
		},

		addFavorite: function addFavorite(newFavorite, state) {
			if (cls.instanceOf(newFavorite, Project)) {
				return $http({
					method: 'POST',
					url: appModel.appService.baseURL + '/favorites',
					data: [{
						componentId: newFavorite.id,
						componentType: 'project'
					}]
				});
			} else {
				var deferred = $q.defer(),
				    componentType = this.getComponentTypeFromUrl(newFavorite.url) || 'bookmark';

				if (componentType === 'dashboard') {
					//Call the favorite api directly.
					_favoriteDashboard(componentType, this.getComponentIdFromUrl(newFavorite.url)).then(function () {
						newFavorite.componentId = this.getComponentIdFromUrl(newFavorite.url);
						newFavorite.componentType = componentType;

						deferred.resolve(newFavorite);
					}.bind(this));
				} else {
					var bookmarkData = {
						'bookmark_name': newFavorite.name,
						'favorite': 1
					};

					if (state) {
						bookmarkData['spa_view_state'] = state;
						bookmarkData.json = 1;
					}

					scBookmarkService.createBookmark(bookmarkData).then(function (result) {
						//Give the url the bookmarked url and then resolve the newFavorite;
						newFavorite.url = result.data.bookmark.url;
						newFavorite.componentId = this.getComponentIdFromUrl(newFavorite.url);
						newFavorite.componentType = componentType;

						deferred.resolve(newFavorite);
					}.bind(this), function (err) {
						deferred.reject(err);
					});
				}

				return deferred.promise;
			}
		},

		deleteFavorite: function deleteFavorite(favorite) {
			if (cls.instanceOf(favorite, Project)) {
				return $http({
					method: 'DELETE',
					url: appModel.appService.baseURL + '/favorites',
					params: {
						componentType: 'project',
						componentIds: favorite.id
					}
				});
			} else {
				var deferred = $q.defer();

				if (favorite.componentType == 'dashboard') {
					_unfavoriteDashboard(favorite.componentType, favorite.componentId).then(function (result) {
						deferred.resolve(result);
					}, function (err) {
						deferred.reject(err);
					});
				} else {
					scBookmarkService.deleteBookmark(favorite.componentId).then(function () {
						deferred.resolve(true);
					}, function (err) {
						deferred.reject(err);
					});
				}

				return deferred.promise;
			}
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').factory('NewNavCoachmarks', ['util.cls', 'CoachmarkNamespace', '$filter', function (cls, CoachmarkNamespace, $filter) {

		var NewNavCoachmarks = cls.extend(CoachmarkNamespace, {
			_constructor: function _constructor($scope) {
				this.super$();
				this.setNamespace('new-nav-shell3');
				var steps = [{
					id: 'fiveSectionsIntroText',
					title: $filter('l10n')(['adobeAnalyticsNavigation', 'Welcome to the new Adobe Analytics navigation!']),
					description: $filter('l10n')(['workspacesIntroText', 'Adobe Analytics is now divided into 5 sections. Clicking on a tab will bring you to a new launch page for the section. ']),
					element: function element() {
						return $('.coral-Shell-workspaces');
					}
				}, {
					id: 'hoverMenus',
					title: $filter('l10n')(['welcomeToNewNavigation', 'Welcome to the new Adobe Analytics navigation!']),
					description: $filter('l10n')(['hoverMenusIntroText', 'Hovering over "Components", "Admin", and "Tools" will display a list of popular links.']),
					element: function element() {
						return $('#components');
					}
				}, {
					id: 'globalSearch',
					title: $filter('l10n')(['welcomeToNewNavigation', 'Welcome to the new Adobe Analytics navigation!']),
					description: $filter('l10n')(['globalSearchIntroText', 'You can search for any page (including projects, reports, admin pages, etc.) by clicking this icon or using the keyboard shortcut \'/\'.']),
					element: function element() {
						return $('#globalSearch');
					},
					scrollTo: false,
					position: 'left'
				}];

				this.setSteps(steps);
			}
		});

		NewNavCoachmarks.init = function ($scope) {
			var newNavCoachmarks = new NewNavCoachmarks($scope);
			newNavCoachmarks.start();
		};

		return NewNavCoachmarks;
	}]);
})(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('omnitureService', function (user, $q, scUrl) {
	var OmnitureService = analyticsui['model'].OmnitureService;

	var AngularOmnitureService = function (_OmnitureService) {
		_inherits(AngularOmnitureService, _OmnitureService);

		function AngularOmnitureService() {
			_classCallCheck(this, AngularOmnitureService);

			return _possibleConstructorReturn(this, (AngularOmnitureService.__proto__ || Object.getPrototypeOf(AngularOmnitureService)).apply(this, arguments));
		}

		_createClass(AngularOmnitureService, [{
			key: 'get',

			/*
    Wrap all get requests within an angular promise to invoke a digest. 
   */
			value: function get(url, config) {
				var deferred = $q.defer();

				_get(AngularOmnitureService.prototype.__proto__ || Object.getPrototypeOf(AngularOmnitureService.prototype), 'get', this).call(this, url, config).then(function (result) {
					deferred.resolve(result);
				}).catch(function (err) {
					deferred.reject(err);
				});

				return deferred.promise;
			}

			/*
    Wrap all post requests within an angular promise to invoke a digest. 
   */

		}, {
			key: 'post',
			value: function post(url, data, config) {
				var deferred = $q.defer();

				_get(AngularOmnitureService.prototype.__proto__ || Object.getPrototypeOf(AngularOmnitureService.prototype), 'post', this).call(this, url, data, config).then(function (result) {
					deferred.resolve(result);
				}).catch(function (err) {
					deferred.reject(err);
				});

				return deferred.promise;
			}

			/*
   Support backwards compatibility by automatically pulling the selectedMenuId from user. 
   */

		}, {
			key: 'getReportsMenu',
			value: function getReportsMenu(selectedMenuId) {
				selectedMenuId = selectedMenuId || user.selectedMenuId;
				return _get(AngularOmnitureService.prototype.__proto__ || Object.getPrototypeOf(AngularOmnitureService.prototype), 'getReportsMenu', this).call(this, selectedMenuId);
			}
		}]);

		return AngularOmnitureService;
	}(OmnitureService);

	return new AngularOmnitureService(scUrl);
});
'use strict';

angular.module('common').constant('BOOKMARK_TITLE_MAX_CHARS', 50).directive('anBookmarkPopover', function (shellService, BOOKMARK_TITLE_MAX_CHARS, scBookmarkService, $timeout, eventBus, $filter, scUrl, $window, $rootScope) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		templateUrl: 'analytics/sc/directives/an-bookmark-popover.tpl.html',
		restrict: 'EA',
		replace: true,
		controller: function controller($scope, $element) {
			var nameInput = $element.find('.js-bookmark-input');
			$scope.folders = [];
			$scope.sharedFolders = [];

			$scope.manageBookmarkLink = scUrl.switchpfs(scUrl.productIds.SUITE, 'Bookmark.Manager');

			$element.on('show', function () {
				$timeout(function () {
					$scope.bookmarkName = _getPageTitle();
					$scope.bookmarkFolderName = '';
					$scope.sharedBookmarkFolderName = '';
					$scope.makePublic = false;
					$scope.displayOnLogin = false;

					if (!$scope.folders.length) {
						_loadFolders();
					}

					nameInput.focus();
				});
			});

			function _loadFolders() {
				scBookmarkService.getFolders().then(function (result) {
					$scope.folders = result.data.standard;
					$scope.sharedFolders = result.data.shared;
					_setDefaultFolder();
				});
			}

			function _setDefaultFolder() {
				$timeout(function () {
					$scope.folder = $scope.folders[0]; //Set the default folder to the first in the list.
					$scope.sharedFolder = $scope.sharedFolders[0];
				});
			}

			function _getPageTitle() {
				var pageTitle = shellService.getTitle();
				//Limit the page title to 50 chars due to limitations within the bookmark db.
				if (pageTitle.length > BOOKMARK_TITLE_MAX_CHARS) {
					pageTitle = pageTitle.substring(0, BOOKMARK_TITLE_MAX_CHARS);
				}
				return pageTitle;
			}

			function _hide() {
				Popover.close($element.get(0));
			}

			$scope.onFolderChange = function (folder) {
				$scope.folder = folder;
				if ($scope.folder && $scope.folder.id === '-1') {
					$timeout(function () {
						$element.find('.js-bookmarkname-input').focus();
					}, 100);
				}
			};

			$scope.onSharedFolderChange = function (sharedFolder) {
				$scope.sharedFolder = sharedFolder;
				if ($scope.sharedFolder && $scope.sharedFolder.id === '-1') {
					$timeout(function () {
						$element.find('.js-sharedbookmarkname-input').focus();
					}, 100);
				}
			};

			$scope.createNewBookmark = function () {
				if ($scope.folder) {

					var bookmarkData = {
						'bookmark_name': $scope.bookmarkName,
						'share': $scope.makePublic ? 1 : 0,
						'is_default': $scope.displayOnLogin ? 1 : 0
					};

					if ($scope.folder.id === '-1') {
						bookmarkData['folder_name'] = $scope.bookmarkFolderName;
					} else {
						bookmarkData['folder_id'] = $scope.folder.id;
					}

					if ($scope.makePublic && $scope.sharedFolder) {
						if ($scope.sharedFolder.id === '-1') {
							bookmarkData['shared_folder_name'] = $scope.sharedBookmarkFolderName;
						} else {
							bookmarkData['shared_folder_id'] = $scope.sharedFolder.id;
						}
					}

					//getSpaViewState is an optional method that can be passed into this directive. However, no matter
					//what we will have an event handler so I am checking to see if it has been defined on the attrs
					//object before calling it on the scope.
					if ($rootScope.getBookmarkState) {
						bookmarkData['spa_view_state'] = $rootScope.getBookmarkState();
						bookmarkData.json = 1;
					}

					scBookmarkService.createBookmark(bookmarkData).then(function () {
						eventBus.publish('displayAlert', {
							type: 'success',
							text: $filter('l10n')(['successfullyCreatedBookmark', 'Bookmark successfully created.']),
							autoHide: true
						});

						//Clear out the current folders so that it will reload them the next time we attempt to bookmark
						//something.
						if ($scope.folder.id === '-1' || $scope.sharedFolder && $scope.sharedFolder.id === '-1') {
							$scope.folders = [];
							$scope.sharedFolder = null;
						}
					}, function (error) {
						eventBus.publish('displayAlert', {
							type: 'error',
							text: $filter('l10n')(['failedToCreateBookmark', 'Failed to create bookmark.'])
						});
					});
				} else {
					eventBus.publish('displayAlert', {
						type: 'error',
						text: $filter('l10n')(['unableToSaveBookmarkWithoutFolder', 'Unable to create a bookmark without selecting a folder.'])
					});
				}

				_hide();
			};

			$scope.cancelCreateNewBookmark = function () {
				_hide();
			};
		},
		link: function link(scope, element) {
			//Reparent the popover so that it will display appropriately.
			element.appendTo(element.parents('.shell-ActionBar'));
		}
	};
});
'use strict';

angular.module('common').directive('anBookmarkTool', function () {
	return {
		templateUrl: 'analytics/sc/directives/an-bookmark-tool.tpl.html',
		restrict: 'EA',
		replace: true
	};
});
'use strict';

angular.module('common').directive('anSelectorRail', function (_, spinnerService, $timeout, $filter, ComponentListService, eventBus, appModel, user, usageService, trackService, MetricSelectorCoachmarks, $compile, $parse) {
	var _analyticsui$model = analyticsui['model'],
	    Segment = _analyticsui$model.Segment,
	    Metric = _analyticsui$model.Metric,
	    CalculatedMetric = _analyticsui$model.CalculatedMetric;
	var Preview = analyticsui['ui'].Preview;

	return {
		templateUrl: 'analytics/sc/directives/an-selector-rail.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			loadComponents: '&',
			apply: '&',
			maxComponents: '=?',
			registerCallback: '@?',
			selectedComponents: '=?',
			params: '=?', // object of static values: { builderUrl, managerUrl, headerIconClass, railId, componentLabel,
			// togglePreviewEventBusName, hidePreviewEventBusName, [componentsDraggable], [canApplyZeroComponents],
			// hasAddPermission }
			showIcons: '='
		},
		controller: function controller($scope, $element, $attrs) {

			var $ = window.jQuery;

			MetricSelectorCoachmarks.init($scope);

			var sortOptionPersistentAttribute = 'sc://rail-sort-option/' + $scope.params.railId,
			    fullComponentListLoaded = $scope.params.lazyLoadComponents ? false : true;

			$scope.sortOptions = [{ attribute: 'name', name: $filter('l10n')(['alphabeticalLabel', 'Alphabetical']) }, { attribute: 'usage.relevancyScore', name: $filter('l10n')(['recommendedLabel', 'Recommended']), reverse: true, default: true }, { attribute: 'usage.count', name: $filter('l10n')(['frequentlyUsedLabel', 'Frequently Used']), reverse: true }, { attribute: 'usage.mostRecentTimestamp', name: $filter('l10n')(['recentlyUsedLabel', 'Recently Used']), reverse: true }];
			$scope.componentListService = new ComponentListService();
			$scope.currentReportSuiteName = appModel.reportSuite.name;
			$scope.reportSuiteFilterChecked = true;
			$scope.params.canApplyZeroComponents = $scope.params.canApplyZeroComponents === false ? false : true; // defaults to true

			user.getPersistentAttribute(sortOptionPersistentAttribute).then(function (sortOptionAttr) {
				if (sortOptionAttr && ~sortOptionAttr.indexOf('\"')) {
					sortOptionAttr = JSON.parse(sortOptionAttr);
				}
				var predicate = sortOptionAttr ? { attribute: sortOptionAttr } : { default: true };
				$scope.selectedSortOption = _.find($scope.sortOptions, predicate);
				$scope.selectedSortOption.initialSelected = true; // this is just so the radio input group knows what to have selected first
			});

			$scope.$watch('params', function (newValue) {
				$scope.hasAddPermission = $scope.params.hasAddPermission;
			});

			var advancedFilterModalInitialized = false;
			$scope.showAdvancedModal = function () {
				$scope.filterByReportSuite(true); // pass 'true' to indicate the advanced modal has been clicked
				// send the modal a copy of what's selected
				$scope.modalComponents = JSON.parse(JSON.stringify($scope.selectedComponents));
				$scope.showModal = true;

				if (!advancedFilterModalInitialized) {
					$element.append($compile(['<an-component-filter-modal ', 'selected-components="modalComponents" ', 'onapply="trackAndApply(selectedComponents)" ', 'on-info-click="onInfoClick($event, $item)" ', 'show-modal="showModal" ', 'rail-id="{{ params.railId }}"', 'component-label="{{ params.componentLabel }}" ', 'component-list-service="componentListService">', '</an-component-filter-modal>'].join(''))($scope));

					advancedFilterModalInitialized = true;
				}
			};

			$scope.load = function (loadFullComponentList) {
				spinnerService.show('selectorRailSpinner-' + $scope.params.railId);
				spinnerService.show('componentFilterModalSpinner-' + $scope.params.railId);

				$scope.loadComponents({
					callback: function callback(components, selectedIds) {

						// if load() has already been called, the selectedComponents should already be set.
						// use these to set selected components so it doesnt wipe out any changes made to the selection.
						if ($scope.selectedComponents) {
							selectedIds = _.pluck($scope.selectedComponents, 'id');
						}

						var i,
						    component,
						    selectedComponents = [];
						for (i = 0; i < selectedIds.length; i++) {
							component = _.find(components, { id: selectedIds[i] });
							if (component) {
								component.selected = true;
								selectedComponents.push(component);
							}
						}

						$scope.components = components;
						$scope.selectedComponents = selectedComponents;

						if (loadFullComponentList) {
							fullComponentListLoaded = true;
						}
						$scope.filterByReportSuite();

						// we want the modal's copy of the components list to be unbound to rail's components, so that
						// checking/unchecking components in the modal doesn't mess up the state of the rail.
						// Do not use angular copy. It hangs the javascript.
						var copiedComponents = JSON.parse(JSON.stringify($scope.components));
						$scope.componentListService.setFullComponentList(copiedComponents);

						// save original component order to check if its been modified. compare joined string
						// because it's easier than comparing arrays
						if (!$scope.originalComponentOrder) {
							$scope.originalComponentOrder = _.pluck(selectedComponents, 'id').join('');
						}

						spinnerService.hide('selectorRailSpinner-' + $scope.params.railId);
						spinnerService.hide('componentFilterModalSpinner-' + $scope.params.railId);
						$scope.doneLoading = true; // set doneLoading for MetricSelectorCoachmarks to know when to start

						return selectedComponents; // segment selector needs to tell it's parent controller which are selected
					},
					rsid: loadFullComponentList ? undefined : appModel.reportSuite.rsid // optionally pass rsid to filter by
				});
			};

			$scope.onInfoClick = function ($event, $item) {
				var $trigger = $($event.currentTarget);
				$trigger.blur(); //Get rid of the focus rect
				var component = void 0;
				if ($item.itemType === 'segment') {
					component = new Segment($item, { parseJSON: true });
				} else if ($item.calculated === true) {
					component = new CalculatedMetric($item, { parseJSON: true });
				} else {
					component = new Metric($item, { parseJSON: true });
					if ($item.supportsPreview) {
						component.support.push('oberon', 'dataWarehouse');
					}
				}
				Preview.show(component, $event, {
					callbackParams: $attrs.callbackParams ? $parse($attrs.callbackParams)($scope) : null,
					pointFrom: 'right'
				});
			};

			// infinite scroll constants
			var PIXELS_FROM_BOTTOM = 50,
			    // pixel threshold (from the bottom of the scrolling area) in which to increment the amount of items shown
			ITEM_INCREMENT = 20,
			    // number of items that get added each time you reach the bottom of the scrolling area
			INITIAL_ITEM_LIMIT = 40; // number of items to load initially into the scrolling area

			$scope.onScroll = function (e) {
				// Infinite scroll. Show 20 more items when they get to the bottom of the list.
				var ul = e.target,
				    $ul = angular.element(ul);
				var sh = ul.scrollHeight,
				    st = $ul.scrollTop(),
				    oh = $ul.outerHeight();
				var pixelsFromBottom = sh - (st + oh);
				if (pixelsFromBottom < PIXELS_FROM_BOTTOM) {
					$scope.limit += ITEM_INCREMENT;
				} // add 20 more items

				eventBus.publish($scope.params.hidePreviewEventBusName || '');
			};

			// When filters change, reset to only show 40 items
			$scope.$watch('componentList.length', function () {
				$scope.limit = INITIAL_ITEM_LIMIT;
			});

			$scope.updateSortOption = function (option) {
				$scope.selectedSortOption = option;
				$scope.sortByPopover.hide();
				user.setPersistentAttribute(sortOptionPersistentAttribute, $scope.selectedSortOption.attribute);
				clearIndexesOfSelected(); // when the sort option changes, the indexes tracked aren't relevant anymore, so start over
			};

			var $searchInput = $element.find('.selector-rail-search-bar input');
			$scope.onInnerRailToggle = function (leftRailId) {
				if (leftRailId == $scope.params.railId) {
					$scope.hasAddPermission = $scope.params.hasAddPermission;
					$scope.selectorRailOpened = true; // set selectorRilOpened for MetricSelectorCoachmarks to know when to start
					$searchInput.focus();
					trackService.trackAction($element, 'Selector Rail Opened', {
						componentType: $scope.params.componentType
					});
				}
			};

			$scope.$watch('componentSearch', function (newSearch, oldSearch) {
				if (newSearch !== oldSearch) {
					// we only want to track this if we are starting to search, not every time the search changes
					if (!oldSearch) {
						trackService.trackAction(null, 'Searched Components', {
							componentType: $scope.params.componentType
						});
					}
					// hide the preview on search. if you happen to mouseup outside the browser when highlighting search text, the hide call doesn't get triggered.
					eventBus.publish($scope.params.hidePreviewEventBusName || '');
				}
			});

			$scope.filterByReportSuite = function (advancedModalClicked) {
				var loadFullComponentList = advancedModalClicked ? true : !$scope.reportSuiteFilterChecked;
				if (loadFullComponentList && !fullComponentListLoaded) {
					$scope.load(true);
				} else {
					$scope.filteredComponents = $scope.components.filter(function (component) {
						return $scope.reportSuiteFilterChecked ? component.rsid == appModel.reportSuite.rsid : true;
					});
				}
			};

			$scope.canApply = function () {
				if (!$scope.selectedComponents) {
					return false;
				}
				if ($scope.params.canApplyZeroComponents === false && $scope.selectedComponents.length === 0) {
					return false;
				} else {
					return selectionChanged();
				}
			};

			$scope.trackAndApply = function (selectedComponents) {
				var selectedIds = _.pluck(selectedComponents, 'id');
				if ($scope.params.trackUsageKey) {
					usageService[$scope.params.trackUsageKey](selectedIds).finally(function () {
						$scope.apply({ 'selectedComponents': selectedComponents });
					});
				} else {
					$scope.apply({ 'selectedComponents': selectedComponents });
				}
				// update which components are selected. this is mostly for dashboards and anomaly detection,
				// because the page doesnt reload when segments are applied.
				$scope.components.forEach(function (component) {
					component.changed = false;
					component.selected = _.indexOf(selectedIds, component.id) != -1;
				});
				// find each selected component in the full list so we don't lose reference to it.
				var newSelectedComponents = [];
				selectedComponents.forEach(function (selectedComponent) {
					selectedComponent = _.find($scope.components, { id: selectedComponent.id });
					if (selectedComponent) {
						newSelectedComponents.push(selectedComponent);
					}
				});
				$scope.selectedComponents = newSelectedComponents;
			};

			// if a component in the selectedComponents array ever gets unselected but not removed from the array, reset
			// the selectedComponents array. this happens when you remove segments by using the tag list.
			$scope.$watch('selectedComponents', function (selectedComponents) {
				if (selectedComponents) {
					var uncheckedComponents = $scope.selectedComponents.filter(function (component) {
						return !component.selected;
					});
					if (uncheckedComponents.length) {
						$scope.selectedComponents = $scope.selectedComponents.filter(function (component) {
							return component.selected;
						});
					}
				}
			}, true);

			// returns true if the user has selected/unselected any component - used to enable/disable the Apply button
			function selectionChanged() {
				if (!$scope.components) {
					return false;
				}
				if ($scope.params.componentsDraggable) {
					return $scope.originalComponentOrder != _.pluck($scope.selectedComponents, 'id').join('');
				} else {
					return $scope.components.some(function (component) {
						return component.changed;
					});
				}
			}

			$scope.changeSelection = function (component, index) {
				component.changed = !component.changed;
				component.indexSelectedAt = $scope.componentSearch ? null : index;
				updateComponentSelection(component);
			};

			function updateComponentSelection(component) {
				// add or remove the component from the selectedComponents array
				if (component.selected) {
					$scope.selectedComponents.push(component);
				} else {
					$scope.selectedComponents.splice(_.findIndex($scope.selectedComponents, { id: component.id }), 1);
				}
			}

			$scope.getIndexesOfSelected = function () {
				var index,
				    indexes = [];
				$scope.selectedComponents.forEach(function (selectedComponent) {
					if (selectedComponent.indexSelectedAt || selectedComponent.indexSelectedAt === 0) {
						indexes.push(selectedComponent.indexSelectedAt);
					} else {
						index = _.findIndex($scope.componentList, { id: selectedComponent.id });
						if (index >= 0) {
							indexes.push(index);
						}
					}
				});
				return indexes.join(':');
			};

			function clearIndexesOfSelected() {
				$scope.selectedComponents.forEach(function (selectedComponent) {
					selectedComponent.indexSelectedAt = null;
				});
			}

			$scope.onDragOver = function ($event, $localPt, $draggableModel) {
				$scope.draggingComponentId = $draggableModel.id; // keeps track of which model to hide while dragging

				var listItemHeight = $($event.target).height() / $scope.selectedComponents.length,
				    fromIndex = _.findIndex($scope.selectedComponents, { id: $draggableModel.id }),
				    // current array index of component being dragged
				toIndex = Math.floor($localPt.y / listItemHeight); // index of spot the dragging component is currently hovering over

				// if the component is hovering over a different component's spot, change it's index in the array
				if (fromIndex !== toIndex) {
					$scope.selectedComponents.splice(fromIndex, 1);
					$scope.selectedComponents.splice(toIndex, 0, $draggableModel);
				}
			};
		}
	};
});
'use strict';

angular.module('common').service('scBookmarkService', function (appModel, $window, $location, scUrl, $http, $filter) {
	return {
		createBookmark: function createBookmark(options) {
			return $http({
				method: 'POST',
				url: scUrl.suitej('Bookmark.Save'),
				data: angular.extend({
					'rsid': appModel.reportSuite.rsid,
					'oid': appModel.omnitureUrl.oid
				}, options || {})
			});
		},

		deleteBookmark: function deleteBookmark(bookmarkId) {
			return $http({
				method: 'POST',
				url: scUrl.suitej('Bookmark.Manager', {
					'cmd': 'Delete',
					'bids': [bookmarkId],
					'unfavorite': 1
				})
			});
		},

		getSpaViewState: function getSpaViewState(bookmarkId) {
			return $http({
				'method': 'GET',
				'cache': true,
				'url': scUrl.suitej('Bookmark.GetSpaViewState', {
					'bookmark_id': bookmarkId,
					'json': 1
				})
			});
		},

		getFolders: function getFolders() {
			return $http({
				'method': 'GET',
				'url': scUrl.suitej('Bookmark.GetFolders'),
				'transformResponse': function transformResponse(value) {
					// The response given by this service includes 4 objects including shared, standard,
					// and vertical. Furthermore they are added by id. This method is transforming the response to
					// something usable for a select list.
					var foldersByType = JSON.parse(value),
					    foldersById,
					    folders = {},
					    folder;

					Object.keys(foldersByType).forEach(function (folderType) {
						folders[folderType] = [];
						foldersById = foldersByType[folderType];

						//Turn the hash map into a consumable array that can be used within a select list.
						Object.keys(foldersById).forEach(function (folderId) {
							folder = foldersById[folderId];
							folder.id = folderId;
							folders[folderType].push(folder);
						});

						folders[folderType].push({
							name: $filter('l10n')(['bookmarkNewFolder', '--New Folder--']),
							id: '-1'
						});
					});

					return folders;
				}
			});
		}
	};
});
'use strict';

angular.module('common').controller('segmentSelectorBaseCtrl', function ($scope, eventBus, $location, util, $window, _) {
	var Segment = analyticsui['model'].Segment;
	var Preview = analyticsui['ui'].Preview;

	var callbackTypeLookup = {
		'AnomalyDetection': 'anomaly-detection',
		'AnomalyDetection.Index': 'anomaly-detection',
		'Report.Standard': 'sc-report',
		'Dashboard.Explore': 'dashboard'
	};
	$scope.currentReportType = callbackTypeLookup[util.getQueryParam('a')];

	$scope.loadSegments = function (segments) {
		$scope.segments = segments.slice(); // create shallow clone so that checking/unchecking in selector doesnt change tag list
		$scope.selectedIds = $scope.selectedSegmentIds = segments.map(function (s) {
			return s.id;
		});
	};

	$scope.unselectSegments = function (segments) {
		for (var i = 0; i < segments.length; i++) {
			segments[i].selected = false;
			var index = $scope.segments.indexOf(segments[i]);
			$scope.segments.splice(index, 1);
		}
		$scope.applySegments($scope.segments);
	};

	$scope.onSegmentInfoClick = function (event, segment) {
		event.stopPropagation();
		event.preventDefault();

		var $trigger = jQuery(event.currentTarget);
		//Get rid of the focus rect
		$trigger.blur();

		var component = Segment.fromJSON(segment);
		Preview.show(component, event, {
			callbackParams: {
				type: $scope.currentReportType,
				existingSegments: $scope.selectedIds || []
			}
		});
	};
});
'use strict';

angular.module('common').controller('SegmentSummaryCtrl', function ($scope, $filter, segmentSummaryViewState, _) {
	$scope.updateAfterDataLoad = false;

	$scope.compatibleWith = [];
	$scope.supportedEngines = [];

	// function to calculate and round into a percent
	$scope.percent = function (value, total) {
		return total === 0 ? 0 : Math.round(value / total * 100);
	};

	var lastSegmentSummaryRequest = void 0;

	$scope.loadData = function (consumableDefinition, dateRange) {
		$scope.loadingData = true;
		segmentSummaryViewState.loadingSegmentSummary = true;
		$scope.spinnerService.show('validationChartSpinner');

		var segmentDefinitionToPost = $scope.definitionParser.isDataModelEmpty(consumableDefinition) ? {} : $scope.definitionParser.dataModelToDefinition(consumableDefinition);

		// Run the validator right away so they can save a segment without waiting for the summary report to finish
		// - apparently for large data-sets, it can take a while for the summary report to come back
		$scope.segmentSummaryService.validate(segmentDefinitionToPost).then(function (isValid) {
			_.set($scope, 'controlObject.isValid', isValid);
		});

		if (lastSegmentSummaryRequest) {
			lastSegmentSummaryRequest.cancel();
		}
		lastSegmentSummaryRequest = $scope.segmentSummaryService.getSegmentSummary(segmentDefinitionToPost, dateRange);

		// Run the full summary report
		lastSegmentSummaryRequest.then(function (result) {
			return $scope.onDataLoaded(result, dateRange);
		}, $scope.onDataLoadError);
	};

	$scope.onDataLoaded = function (result, dateRange) {
		$scope.spinnerService.hide('validationChartSpinner');

		var jsonData = result.data;
		$scope.metrics = jsonData.metrics;
		$scope.compatibleWith = jsonData.compatibility;
		$scope.supportedEngines = jsonData.supportedEngines;

		$scope.loadingData = false;
		segmentSummaryViewState.loadingSegmentSummary = false;

		//preview is technically invalid only when oberon is not supported, but because of the "none" case, we do not want the preview to be disabled
		if ($scope.supportedEngines.indexOf('data_warehouse') !== -1 && $scope.supportedEngines.length == 1) {
			$scope.previewNotSupported = true;
		} else {
			$scope.previewNotSupported = false;
		}

		_.set($scope, 'controlObject.isValid', jsonData.compatibility.length > 0 && !$scope.definitionParser.isDataModelEmpty($scope.segment.consumableDefinition)); // update segment validity (two-way bound to controller); segment definition cannot be empty
		_.set($scope, 'controlObject.axleSupported', jsonData.supportedEngines.indexOf('oberon') != -1);

		//Call another update (consumableDefinition may not be fully initialized on the client yet)
		if ($scope.updateAfterDataLoad && $scope.segment.consumableDefinition) {
			$scope.updateAfterDataLoad = false;
			$scope.loadData($scope.segment.consumableDefinition, dateRange);
		}
	};

	$scope.onDataLoadError = function (errors) {
		$scope.loadingData = false;
		segmentSummaryViewState.loadingSegmentSummary = false;
		$scope.spinnerService.hide('validationChartSpinner');
		if (console) {
			console.log('unable to pull segment summary', errors);
		}
	};
});
'use strict';

angular.module('common').directive('anComponentFilterModal', function (_, trackService, $filter) {
	var Popover = analyticsui['ui-core'].Popover;

	return {
		templateUrl: 'analytics/segmentation/directives/an-component-filter-modal.tpl.html',
		restrict: 'E',
		scope: {
			selectedComponents: '=',
			onapply: '&',
			oncancel: '&',
			reportlet: '@?',
			onInfoClick: '&',
			componentLabel: '@',
			componentListService: '=',
			railId: '@?',
			showModal: '='
		},
		link: function link(scope, element) {

			scope.updateComponentSelection = function (component) {
				// add or remove the component from the selectedComponents array
				if (component.selected) {
					scope.selectedComponents.push(component);
				} else {
					scope.selectedComponents.splice(_.findIndex(scope.selectedComponents, { id: component.id }), 1);
				}
			};

			scope.$watch('showModal', function (showModal) {
				if (showModal === true) {
					// when the modal is opened, the selected components are passed from the rail. but the modal's full list of components
					// doesn't keep track of what's selected, so we need to go through and set the "selected" attribute
					// so they'll appear checked in the list.
					var selectedIds = _.pluck(scope.selectedComponents, 'id');
					scope.componentListService.components.forEach(function (component) {
						component.selected = _.indexOf(selectedIds, component.id) != -1;
					});

					Popover.show({
						isModal: true,
						ref: 'anComponentFilterModal',
						dialog: {
							header: $filter('l10n')(['advancedSelectionLabel', 'Advanced Selection']),
							padded: false,
							closable: true,
							onClose: function onClose() {
								scope.cancel();
								return true;
							},
							className: 'an-componentFilterModal-outer'
						},
						closeOnClickOutside: false,
						selector: element.get(0)
					});
				} else if (showModal === false) {
					// un-filter the components list, so that next time the modal gets opened, we can loop through the entire
					// components list to set which ones are selected.
					scope.componentListService.filters.forEach(function (filter) {
						filter.selected = false;
					});
					scope.componentListService.updateFilteredLists();
				}
			});

			scope.apply = function () {
				scope.showModal = false;
				scope.onapply({ selectedComponents: scope.selectedComponents });
			};

			scope.cancel = function () {
				scope.showModal = false;
				scope.oncancel();
			};

			scope.countSelected = function () {
				return scope.selectedComponents ? scope.selectedComponents.length : 0;
			};

			// infinite scroll constants
			var PIXELS_FROM_BOTTOM = 50,
			    // pixel threshold (from the bottom of the scrolling area) in which to increment the amount of items shown
			ITEM_INCREMENT = 20,
			    // number of items that get added each time you reach the bottom of the scrolling area
			INITIAL_ITEM_LIMIT = 40; // number of items to load initially into the scrolling area

			scope.limit = INITIAL_ITEM_LIMIT;

			scope.$watch('componentSearch', function (newSearch, oldSearch) {
				if (newSearch !== oldSearch) {
					// we only want to track this if we are starting to search, not every time the search changes
					if (!oldSearch) {
						trackService.trackAction(null, 'Searched Components In Modal', {});
					}

					scope.limit = INITIAL_ITEM_LIMIT;
				}
			});

			scope.$watch('selectedComponents', function (newSearch, oldSearch) {
				_.eachRight(scope.selectedComponents, function (o) {
					if (!o.selected) {
						_.pull(scope.selectedComponents, o);
					}
				});
			}, true);

			scope.onScroll = function (e) {
				// Infinite scroll. Show 20 more items when they get to the bottom of the list.
				var ul = e.target,
				    $ul = angular.element(ul);
				var sh = ul.scrollHeight,
				    st = $ul.scrollTop(),
				    oh = $ul.outerHeight();
				var pixelsFromBottom = sh - (st + oh);
				if (pixelsFromBottom < PIXELS_FROM_BOTTOM) {
					scope.limit += ITEM_INCREMENT;
				} // add 20 more items
			};
		}
	};
});
'use strict';

angular.module('common').directive('anComponentTagList', function (eventBus, _, $filter) {
	return {
		template: '<ad-react-component props="props" type="TagList"/>',
		restrict: 'EA',
		replace: true,
		scope: {
			components: '=',
			unselectComponents: '=?',
			whenInfoClick: '&',
			readonly: '=?',
			noComponentsMessage: '@'
		},
		controller: function controller($scope, $element, $attrs) {
			$scope.clearAllComponents = function () {
				if ($scope.unselectComponents) {
					var selectedComponents = $scope.components.filter(function (s) {
						return s.selected;
					});
					$scope.unselectComponents(selectedComponents);
				} else {
					for (var i = 0; i < $scope.components.length; i++) {
						$scope.components[i].selected = false;
					}
				}
			};

			$scope.removeComponent = function (component) {
				if ($scope.unselectComponents) {
					$scope.unselectComponents([component]);
				} else {
					component.selected = false;
				}
			};

			$scope.numSelectedComponents = function () {
				if (!$scope.components) {
					return 0;
				}
				var i = 0,
				    numSelected = 0;
				for (i = 0; i < $scope.components.length; i++) {
					if ($scope.components[i].selected) {
						numSelected++;
					}
				}
				return numSelected;
			};

			$scope.props = {
				onRemoveAll: function onRemoveAll() {
					$scope.clearAllComponents();$scope.$apply();
				},
				noTagsMessage: _.has($attrs, 'noComponentsMessage') ? $attrs.noComponentsMessage : $filter('l10n')(['there-are-no-selected-items-pe-b5345', 'There are no selected items.'])
			};

			function updateTags() {
				$scope.props.tags = _.map(_.where($scope.components, { selected: true }), function (component) {

					var tag = {
						label: component.name,
						id: component.id,
						onRemove: function onRemove() {
							$scope.removeComponent(component);
							$scope.$apply();
						}
					};

					if ($scope.whenInfoClick) {
						tag.rightIcon = {
							icon: 'infoCircle',
							onClick: function onClick(tag, e) {
								$scope.whenInfoClick({ $event: e, $item: component });
							}
						};
					}

					return tag;
				});
			}

			$scope.$watch('components', function () {
				updateTags();
			}, true);

			updateTags();
		}
	};
});
'use strict';

angular.module('common').run(function ($http, appModel) {
	// set a custom authorization header (with the analytics services token) for ALL http requests
	$http.defaults.headers.common['Authorization'] = appModel.appService.token;
}).directive('anSegmentSelector', function (segmentRepository, scUrl, $filter, segmentSelectionUtil, $rootScope, trackService, usageService, appModel) {
	return {
		templateUrl: 'analytics/segmentation/directives/an-segment-selector.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			onapply: '&',
			onload: '&',
			currentReportType: '@?',
			initialSelected: '=selectedIds'
		},
		controller: function controller($scope, $element) {

			$scope.segmentsLabel = $filter('l10n')(['segmentsLabel', 'Segments']);
			$scope.segmentBuilderUrl = scUrl.spas('segment-builder');
			$scope.segmentManagerUrl = scUrl.spas('component-manager', { 'componentType': 'segments' });

			$scope.hasAddPermission = appModel.reportSuite.permissions.segmentCreation;

			$scope.loadSegments = function (callback) {

				// Load the users list of segments
				segmentRepository.query({
					dataType: 'oberon', /* only get segments that are oberon-compatible (we don't want to make available DW-only compatible segments in R&A) */
					includeType: 'shared', /* only get segments that you own or have been shared with you */
					expansion: 'ownerFullName,favorite,approved,tags,shares,reportSuiteName'
				}).then(function (segments) {

					// make sure $scope.initialSelected exists before using it.
					// (sometimes segment selector wants to use $scope.initialSelected before state manager has finished populating it in Anomaly Detection)
					var unbindWatch = $scope.$watch('initialSelected', function (initialSelected) {

						if (initialSelected) {

							// Get ids of segments that should be selected in the report, but are not present in the users segments
							// (i.e. private segments, deleted segments, or old preconfigured segments)
							var unknownIds = segmentSelectionUtil.unknownSegmentIds($scope.initialSelected, segments);

							if (unknownIds.length > 0) {
								// Load the unknown segments and add them to the current ones
								segmentSelectionUtil.loadUnknownSegments(unknownIds, function (unknownSegments) {
									populateSegments(segments.concat(unknownSegments), callback);
								});
							} else {
								populateSegments(segments, callback);
							}

							unbindWatch();
						}
					});
				});
			};

			function populateSegments(segments, callback) {
				// manually retrieve usage data because usage data doesn't come back with the segment service call
				usageService.getSegmentUsage().then(function (result) {
					segments.forEach(function (segment) {
						segment.itemType = 'segment';
						segment.usage = result.data[segment.id] || usageService.defaultUsage;
					});
				});

				var selectedSegments = callback(segments, $scope.initialSelected);

				// attach the segments array to the segment-selector element so that reportlets can retrieve segments
				$element.data('segments', segments);
				$rootScope.$emit('dashboard:segmentsLoaded', segments);

				// notify onload about selected segments
				$scope.onload({ selectedSegments: selectedSegments });
			}

			$scope.applySegments = function (selectedComponents) {
				selectedComponents = selectedComponents.filter(function (segment) {
					delete segment.changed;
					return segment;
				});
				$scope.onapply({ selectedSegments: selectedComponents });
			};

			$scope.$watch('segmentSearch', function (newSearch, oldSearch) {
				if (newSearch !== oldSearch) {
					// we only want to track this if we are starting to search, not every time the search changes
					if (!oldSearch) {
						trackService.trackAction(null, 'Searched Segments', {});
					}
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('anSegmentSummaryGraph', function (dv) {
	return {
		restrict: 'EA',
		replace: true,
		template: '<div class="segment-summary-graph"></div>',
		link: function link(scope, element, attrs) {
			scope.percent = function (value, total) {
				return total === 0 ? 0 : Math.floor(value / total * 100);
			};

			scope.$watch('metrics', function (metrics) {
				if (metrics && metrics.length) {
					var dvData = { x: [], count: [], metric: [], colors: ['#ccc'] },
					    chartWidth = attrs.chartWidth ? parseFloat(attrs.chartWidth) : 120,
					    chartHeight = attrs.chartHeight ? parseFloat(attrs.chartHeight) : 120,
					    duration = attrs.duration ? parseFloat(attrs.duration) : 500,
					    n = metrics.length > 3 ? 3 : metrics.length;

					// need to loop in reverse because the legend list is opposite order that dv draws donuts
					for (var i = 0; i < n; i++) {
						//
						// Add control data (the gray part of the circle)
						dvData.x.push(i);
						dvData.count.push(100);
						dvData.metric.push('control');

						//
						// Add metric data if it exists (the colored part of the circle)
						if (metrics[i].value > 0) {
							dvData.count.push(scope.percent(metrics[i].value, metrics[i].total)); //need to calculate the percent because the total of each donut must be the same (ie. 100)
							dvData.x.push(i);
							dvData.metric.push(metrics[i].title);
							dvData.colors.push(metrics[i].color);
						}
					}

					scope.chart = dv.chart().layers([dv.geom.bar()]).coord(dv.coord.polar().flip(true).innerRadius('30%')).data(dvData).width(chartWidth).height(chartHeight).map('x', 'x', dv.scale.ordinal().padding(0.2)).map('y', 'count', dv.scale.linear()).map('fill', 'metric', dv.scale.color().values(dvData.colors)).duration(duration).parent(element.get(0)).render();
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('anSegmentSummaryLegend', function () {
	return {
		restrict: 'EA',
		replace: true,
		templateUrl: 'analytics/segmentation/directives/an-segment-summary-legend.tpl.html',
		link: function link(scope) {
			scope.percent = function (value, total) {
				return total === 0 ? 0 : Math.round(value / total * 100);
			};
		}
	};
});
'use strict';

angular.module('common').directive('anSegmentSummaryLite', function (segmentSummaryService, spinnerService, definitionParser, segmentDefinitionService, util, eventBus) {
	return {
		restrict: 'EA',
		replace: true,
		templateUrl: 'analytics/segmentation/directives/an-segment-summary-lite.tpl.html',
		scope: {
			segment: '=',
			dateRange: '=?',
			controlObject: '=?'
		},
		controller: 'SegmentSummaryCtrl',
		link: function link(scope) {
			scope.segmentSummaryService = segmentSummaryService;
			scope.spinnerService = spinnerService;
			scope.definitionParser = definitionParser;

			//Set up the segment summary with default values.
			scope.metrics = segmentSummaryService.defaultSummary.metrics;

			eventBus.subscribe('loadSegmentSummary', scope, util.debounce(function () {
				scope.loadData(scope.segment.consumableDefinition, scope.dateRange);
			}));
		}
	};
});
'use strict';

angular.module('common').directive('anSegmentSummary', function (eventBus, segmentSummaryService, spinnerService, definitionParser, util, $filter, DateService, user) {
	return {
		restrict: 'E',
		replace: true,
		templateUrl: 'analytics/segmentation/directives/an-segment-summary.tpl.html',
		scope: {
			segment: '=',
			dateRange: '=?',
			controlObject: '=?'
		},
		controller: 'SegmentSummaryCtrl',
		link: function link(scope) {
			scope.isIMSSession = user.isIMSSession;
			scope.initialized = false;
			scope.metrics = segmentSummaryService.defaultSummary.metrics;
			scope.segmentSummaryService = segmentSummaryService;
			scope.spinnerService = spinnerService;
			scope.definitionParser = definitionParser;

			scope.timePeriod = scope.dateRange ? DateService.instance().formatRange(scope.dateRange) : $filter('l10n')(['last-90-days-label', 'Last 90 days']);

			eventBus.subscribe('updateValidationArea', scope, util.debounce(function () {
				if (scope.initialized && scope.segment && scope.segment.consumableDefinition) {
					if (scope.loadingData) {
						scope.updateAfterDataLoad = true;
						return;
					}

					scope.loadData(scope.segment.consumableDefinition, scope.dateRange);
				}
			}, 200));

			var unbindWatch = scope.$watch('segment.consumableDefinition', function (consumableDefinition) {
				if (consumableDefinition && !scope.initialized) {
					scope.initialized = true;

					scope.loadData(consumableDefinition, scope.dateRange);
					//Stop watching for a change in the segment definition.
					unbindWatch();
				}
			});
		}
	};
});
'use strict';

angular.module('common').filter('ruleValueFilter', function () {
	var ruleValueFilter = analyticsui['model'].ruleValueFilter;

	return ruleValueFilter;
});
'use strict';

angular.module('common').filter('segmentListFilter', function ($filter, appModel) {
	return function (segments, filterByReportSuite, name) {
		name = name || '';

		if (segments) {
			var newList = segments.filter(function (segment) {
				if (filterByReportSuite) {
					return segment.rsid == appModel.reportSuite.rsid;
				}
				return true;
			});

			return $filter('fuzzySearchFilter')(newList, name);
		}
		return segments;
	};
});
'use strict';

angular.module('common').factory('comparisonTypes', function () {
	var comparisonTypes = analyticsui['model'].comparisonTypes;

	return comparisonTypes;
});
'use strict';

angular.module('common').service('contextList', function () {
	var contextList = analyticsui['model'].contextList;

	return contextList;
});
'use strict';

angular.module('common').constant('LOGICAL_OPERATOR_AND', 'and').constant('LOGICAL_OPERATOR_OR', 'or').constant('LOGICAL_OPERATOR_SEQUENCE', 'sequence').constant('CONTEXT_PAGE_VIEW', 'hits').constant('CONTEXT_VISITS', 'visits').constant('CONTEXT_VISITORS', 'visitors').constant('CONTEXT_LOGIC_GROUP', 'logicgroup').constant('GEAR_NEW_SUB_GROUP', 'newsubgroup').constant('GEAR_NEW_SUB_GROUP_FROM_SELECTION', 'newsubgroupfromselection').constant('GEAR_SET_TIME_FRAME', 'settimeframe').constant('GEAR_EXCLUDE', 'exclude').constant('GEAR_INCLUDE', 'include').constant('GEAR_DELETE', 'delete').constant('GEAR_NAME', 'name').constant('EQUALS', 'equals').constant('DOES_NOT_EQUAL', 'doesnotequal').constant('CONTAINS', 'contains').constant('CONTAINS_ALL_OF', 'containsallof').constant('CONTAINS_ONE_OF', 'containsoneof').constant('DOES_NOT_CONTAIN', 'doesnotcontain').constant('IS_NULL', 'isnull').constant('IS_NOT_NULL', 'isnotnull').constant('STARTS_WITH', 'startswith').constant('DOES_NOT_START_WITH', 'doesnotstartwith').constant('ENDS_WITH', 'endswith').constant('DOES_NOT_END_WITH', 'doesnotendwith').constant('POLARITY', { POSITIVE: 'positive', NEGATIVE: 'negative' });
'use strict';

angular.module('common').factory('definitionParser', function () {
	var definitionParser = analyticsui['model'].definitionParser;

	return definitionParser;
});
'use strict';

angular.module('common').factory('logicalOperators', function () {
	var logicalOperators = analyticsui['model'].logicalOperators;

	return logicalOperators;
});
'use strict';

angular.module('common').factory('pasteBinService', function ($http, appModel) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	return {
		get: function get(pasteId) {
			return $http({
				method: 'GET',
				url: appModel.appService.baseURL + '/pastebin/' + pasteId,
				params: {
					locale: l10nConfig.currentLocale
				}
			});
		},

		save: function save(payload) {
			return $http({
				method: 'POST',
				url: appModel.appService.baseURL + '/pastebin',
				headers: {
					'Content-Type': 'text/plain'
				},
				data: payload
			});
		}
	};
});
'use strict';

angular.module('common').factory('ruleParser', function () {
	var ruleParser = analyticsui['model'].ruleParser;

	return ruleParser;
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

angular.module('common').factory('segmentDefinitionService', function ($q, appModel) {
	var SegmentDefinitionService = analyticsui['model'].SegmentDefinitionService;

	var AngularSegmentDefinitionService = function (_SegmentDefinitionSer) {
		_inherits(AngularSegmentDefinitionService, _SegmentDefinitionSer);

		function AngularSegmentDefinitionService() {
			_classCallCheck(this, AngularSegmentDefinitionService);

			return _possibleConstructorReturn(this, (AngularSegmentDefinitionService.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService)).apply(this, arguments));
		}

		_createClass(AngularSegmentDefinitionService, [{
			key: '_wrapInAngularPromise',
			value: function _wrapInAngularPromise(request) {
				var deferred = $q.defer();
				request.then(function (result) {
					deferred.resolve(result);
				}, function (err) {
					deferred.reject(err);
				});
				return deferred.promise;
			}
		}, {
			key: 'loadSegment',
			value: function loadSegment(segmentId, pasteIdOrDefinition, expansion) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'loadSegment', this).call(this, segmentId, pasteIdOrDefinition, expansion));
			}
		}, {
			key: 'newSegment',
			value: function newSegment(pasteIdOrDefinition) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'newSegment', this).call(this, pasteIdOrDefinition));
			}
		}, {
			key: 'loadConsumableDefinition',
			value: function loadConsumableDefinition(segment) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'loadConsumableDefinition', this).call(this, segment));
			}
		}, {
			key: 'loadAllSegmentIdsIntoModel',
			value: function loadAllSegmentIdsIntoModel(segmentModel, segmentIds) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'loadAllSegmentIdsIntoModel', this).call(this, segmentModel, segmentIds));
			}
		}, {
			key: 'createInverseSegment',
			value: function createInverseSegment(segmentId, newSegmentName) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'createInverseSegment', this).call(this, segmentId, newSegmentName));
			}
		}, {
			key: 'createOverlapSegment',
			value: function createOverlapSegment(segments, newSegmentName) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'createOverlapSegment', this).call(this, segments, newSegmentName));
			}
		}, {
			key: 'saveSegment',
			value: function saveSegment(segmentModel, newSegmentName) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'saveSegment', this).call(this, segmentModel, newSegmentName));
			}
		}, {
			key: 'createRuleFromComponent',
			value: function createRuleFromComponent(component, containerOpts) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'createRuleFromComponent', this).call(this, component, containerOpts));
			}
		}, {
			key: 'createRuleObject',
			value: function createRuleObject(component) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'createRuleObject', this).call(this, component));
			}
		}, {
			key: 'createRuleObjectFromSegment',
			value: function createRuleObjectFromSegment(segment) {
				return this._wrapInAngularPromise(_get(AngularSegmentDefinitionService.prototype.__proto__ || Object.getPrototypeOf(AngularSegmentDefinitionService.prototype), 'createRuleObjectFromSegment', this).call(this, segment));
			}
		}]);

		return AngularSegmentDefinitionService;
	}(SegmentDefinitionService);

	return new AngularSegmentDefinitionService({ app: appModel, reportSuite: appModel.reportSuite });
});
'use strict';

angular.module('common').factory('segmentSummaryService', function (appModel, $filter, $sce, cancelableQ, $q, $http, util, moment, DateService, segmentDefinitionService) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	var colors = ['#1CBED6', '#596DAA', '#D855A3', '#FAFAFA'],
	    valueOfLabel = $filter('l10n')(['valueOfLabel', '<td class="metric-value">%1$s</td><td class="metric-total">of %2$s</td>']);

	function getMetricHtml(metric) {
		// if no argument was passed, the chart is in loading state, so it displays all zeros
		if (!metric) {
			return $sce.trustAsHtml(util.sprintf(valueOfLabel, [0, 0]));
		}
		return $sce.trustAsHtml(util.sprintf(valueOfLabel, [$filter('number')(metric.value), $filter('number')(metric.total)]));
	}

	var defaultMetrics = [{ title: $filter('l10n')(['pageViews', 'Hits']), value: 0, total: 0, html: getMetricHtml(), color: colors[0] }, { title: $filter('l10n')(['visits', 'Visits']), value: 0, total: 0, html: getMetricHtml(), color: colors[1] }, { title: $filter('l10n')(['uniqueVisitors', 'Unique Visitors']), value: 0, total: 0, html: getMetricHtml(), color: colors[2] }];
	if (appModel.user.isIMSSession) {
		defaultMetrics.push({ title: $filter('l10n')(['visitorsWithMCID', 'Visitors with Marketing Cloud ID']), value: 0, total: 0, html: getMetricHtml(), color: colors[3] });
	}
	return {
		defaultSummary: {
			metrics: defaultMetrics,
			compatibility: ['None']
		},

		validate: function validate(segmentDefinition) {

			var validateRequest = $http({
				method: 'POST',
				url: appModel.appService.baseURL + '/segments/validate',
				params: {
					'rsid': appModel.reportSuite.rsid
				},
				data: segmentDefinition
			});

			return validateRequest.then(function (results) {
				return results.data.valid;
			});
		},

		validateSegment: function validateSegment(segment) {
			var _this = this;

			return segmentDefinitionService.loadSegment(segment.id).then(function (segmentWithDef) {
				return _this.validate(segmentWithDef.definition);
			});
		},

		getSegmentSummary: function getSegmentSummary(segmentDefinition, dateRange) {
			if (dateRange) {
				dateRange = DateService.instance().getRangeStringFromRange(dateRange, true);
			}

			var requestParams = {
				'rsid': appModel.reportSuite.rsid,
				'locale': l10nConfig.currentLocale
			};

			dateRange = dateRange || DateService.instance().deprecatedGetPageDateRangeString();

			if (dateRange) {
				requestParams.dateRange = dateRange;
			}
			if (appModel.appService.disableOberonRemoteLoading) {
				requestParams.allowRemoteLoad = 'false'; // string-based; only 
			}
			if (appModel.user.isIMSSession) {
				requestParams.includeVisitorsMcvisid = true;
			}
			return cancelableQ.wrap($http({
				method: 'POST',
				url: appModel.appService.baseURL + '/reports/segmentSummary',
				cache: true,
				params: requestParams,
				transformResponse: $http.defaults.transformResponse.concat(function (res, headersGetter, status) {
					if (status < 400) {
						try {
							var jsonData = res,
							    metrics = [],
							    numMetrics = jsonData.report.columns.length / 2,
							    // half the columns are full totals, half the columns are segmented columns
							i,
							    metric;

							for (i = 0; i < numMetrics; i++) {
								metric = {
									id: jsonData.report.columns[i].id,
									title: jsonData.report.columns[i].title,
									value: Number(jsonData.report.totals[i].value), // on the initial load, each value is the total
									total: Number(jsonData.report.totals[i + numMetrics].value),
									color: colors[i]
								};
								metric.html = getMetricHtml(metric);
								if (metric.id === 'metrics/visitorsmcvisid') {
									metrics.unshift(metric);
								} else {
									metrics.push(metric);
								}
							}

							return {
								metrics: metrics.reverse(),
								supportedEngines: jsonData.supportedEngines,
								compatibility: jsonData.compatibility
							};
						} catch (e) {
							console.log('inside the catch');
							return this.defaultSummary;
						}
					}
					return res;
				}),
				data: segmentDefinition
			}));
		}
	};
});
'use strict';

angular.module('common').factory('segmentSummaryViewState', function () {
	return {
		loadingSegmentSummary: false
	};
});
'use strict';

angular.module('common').factory('Segment', function ($http, $resource, appModel, util) {
	var l10nConfig = analyticsui['core'].l10nConfig;

	function transformSegmentsResponse(res, headersGetter, status) {
		if (status < 400) {
			var segments = res;
			for (var i = 0; i < segments.length; i++) {
				transformSegmentResponse(segments[i]);
			}
			return segments;
		}
		return res;
	}

	/**
  * @param res
  * @param headersGetter {object=}
  * @param status {number=}
  */
	function transformSegmentResponse(res, headersGetter, status) {
		if (isNaN(status) || status < 400) {
			var segment = res;

			if (segment.tags) {
				segment.tags = transformTagsResponse(segment.tags);
			}

			if (segment.shares) {
				segment.shares = transformSharesResponse(segment.shares);
			}

			return segment;
		}
		return res;
	}

	function transformTagsResponse(originalTags) {
		return util.pluckMap(originalTags, { id: 'id', name: 'name' });
	}

	function transformSharesResponse(originalShares) {
		return util.pluckMap(originalShares, { id: 'shareToId', type: 'shareToType', name: 'shareToDisplayName' });
	}

	return $resource(appModel.appService.baseURL + '/segments/:id', { id: '@id' }, {
		'query': {
			method: 'GET',
			params: {
				locale: l10nConfig.currentLocale
			},
			isArray: true,
			transformResponse: $http.defaults.transformResponse.concat(transformSegmentsResponse)
		},
		'get': {
			method: 'GET',
			params: {
				locale: l10nConfig.currentLocale
			},
			transformResponse: $http.defaults.transformResponse.concat(transformSegmentResponse)
		},
		'save': {
			method: 'PUT', // override the default save operation to be a PUT request
			params: {
				locale: l10nConfig.currentLocale
			},
			transformResponse: $http.defaults.transformResponse.concat(transformSegmentResponse)
		},
		'create': {
			method: 'POST',
			params: {
				locale: l10nConfig.currentLocale
			},
			transformResponse: $http.defaults.transformResponse.concat(transformSegmentResponse)
		}
	});
});
'use strict';

angular.module('common').factory('timeRestrictionsOperators', function () {
	var timeRestrictionsOperators = analyticsui['model'].timeRestrictionsOperators;

	return timeRestrictionsOperators;
});
'use strict';

angular.module('common').factory('timeRuleParser', function () {
	var timeRuleParser = analyticsui['model'].timeRuleParser;

	return timeRuleParser;
});
'use strict';

angular.module('common').factory('segmentSelectionUtil', function ($filter, segmentRepository, util) {
	return {
		// set segment.selected = true on each segment in 'selectedIds'
		selectSegments: function selectSegments(selectedIds, segments) {
			function isSegmentSelected(segment) {
				return selectedIds.indexOf(segment.id) != -1;
			}
			segments.forEach(function (segment) {
				segment.selected = isSegmentSelected(segment);
			});
		},
		// Load segments that are unknown because they aren't returned by the original query (i.e. private segments, deleted segments, or old preconfigured segments)
		loadUnknownSegments: function loadUnknownSegments(unknownIds, callback) {
			function renameDeletedSegments(unknownSegments) {
				unknownSegments.forEach(function (segment) {
					if (segment.isDeleted) {
						var input = $filter('l10n')(['deletedSegment', '%s (Deleted)']);
						segment.name = $filter('sprintf')(input, segment.name);
					}
				});
			}
			segmentRepository.query({
				expansion: 'ownerFullName,favorite,approved,tags,shares',
				segmentFilter: unknownIds.join(','),
				includeDeleted: 1
			}).then(function (unknownSegments) {
				renameDeletedSegments(unknownSegments);
				callback(unknownSegments);
			});
		},
		// Returns the ids in 'segmentIds' that do not have a corresponding segment in 'segments'
		unknownSegmentIds: function unknownSegmentIds(segmentIds, segments) {
			var foundSegments = segments.filter(function (segment) {
				return segmentIds.indexOf(segment.id) > -1;
			});
			var foundIds = util.pluck(foundSegments, 'id');
			return segmentIds.filter(function (id) {
				return foundIds.indexOf(id) == -1;
			});
		},
		getSegmentName: function getSegmentName(selectedSegments) {
			if (selectedSegments.length === 0) {
				return $filter('l10n')(['allVisitsNoSegments', 'All Visits (No Segment)']);
			} else if (selectedSegments.length == 1) {
				return selectedSegments[0].name;
			} else {
				return $filter('l10n')(['multipleSegmentsLabel', '(Multiple Segments)']);
			}
		}
	};
});
'use strict';

(function ($) {
	angular.module('common').directive('anReportSuiteSelector', function (analyticsConfig, _, scUrl, suitesRepository) {
		return {
			restrict: 'EA',
			template: '<ad-react-component props="props" type="ReportSuiteSelector"/>',
			//templateUrl: 'analytics/shell/directives/an-report-suite-selector.tpl.html',
			replace: true,
			scope: {
				change: '&?',
				params: '=?',
				rsid: '=?'
			},
			link: function link(scope, element, attrs) {

				scope.params = scope.params || {};

				function updateProps() {
					var props = _.defaults({}, scope.params, {
						rsid: scope.rsid,
						confirm: false, // if set to true, opens 'are you sure?' modal before changing report suites
						excludeVrs: false, // if set to true, only base report suites will load into the selector
						variant: !scope.params.isLocal ? 'reload' : 'app',
						// Support legacy behavior. Note: The React code base shouldn't be reliant on any of this.
						onChange: function onChange(reportSuite) {
							scope.change({
								$rsid: reportSuite.rsid,
								$reportSuiteName: reportSuite.name
							});
							element.get(0).dispatchEvent(new CustomEvent('jq:report-suite-changed', {
								bubbles: true,
								cancelable: true,
								detail: {
									rsid: reportSuite.rsid,
									reportSuiteName: reportSuite.name
								}
							}));
						}
					});

					scope.props = props;
				}

				scope.$watch('rsid + params', updateProps);
			}
		};
	});
})(jQuery);
'use strict';

angular.module('common').controller('bookmarkCtrl', function ($q, $scope, scBookmarkService, util, $log, $location, $parse, $rootScope) {

	util.extendController($scope, 'stateManagerCtrl');

	/** We want to load the bookmark state before anything else, so it is available for other ajax requests, etc... **/
	$scope.preinitializers.unshift(_loadBookmarkState);

	/**
  * This is the first method to be called within the route flow controller in order to load the state of the route
  * into the scope. It will be called regardless of whether there is a bookmark id or not. If no bookmark id is
  * passed in the promise will be resolved in the next frame to ensure that the child controller and all other
  * extended controllers are initialized before the rest of the initialization process occurs.
  */
	function _loadBookmarkState() {
		var deferred = $q.defer(),
		    bookmarkId = util.getQueryParam('bookmark');

		if (bookmarkId) {
			scBookmarkService.getSpaViewState(bookmarkId).then(function (result) {

				// Add the params back to the URL
				if (result.data && result.data.params) {
					var currentSearch = $location.search();
					// if there are params in the url, they should take precedence over bookmark
					var search = angular.extend({}, result.data.params, currentSearch);
					$location.search(search);
				}

				// Add params back onto the scope that were returned by getAdditionalBookmarkVars
				if (result.data && result.data.scopeParams) {
					Object.keys(result.data.params).forEach(function (key) {
						var set = $parse('key').assign;
						set($scope, result.data.scopeParams[key]);
					});
				}

				if (result.data && result.data.path && result.data.path.indexOf($location.path()) !== -1) {
					$location.path(result.data.path);
				}

				deferred.resolve();
			}, function (err) {
				$log.warn('Unable to get bookmark due to:', err);
				deferred.resolve();
			});
		} else {
			//Resolve the promise immediately because there is no bookmark.
			deferred.resolve();
		}

		return deferred.promise;
	}

	/**
  * This method is here to retrieve a specific state when a user attempts to bookmark a SPA.
  *
  * By default this method will return a hash with the path and the query params that are in the URL. However,
  * it is possible that specific SPA's will want to do their own state management. For example, they may want to
  * store scope variables that are not a part of the URL onto the bookmark state.
  */
	$rootScope.getBookmarkState = function () {
		var bookmarkState = {
			path: $location.path(),
			params: $location.search(),
			scopeParams: {}
		};

		//If a user passed in additional scope parameters that are not defined on the URL then we can reference them
		//here.
		if ($scope.getAdditionalBookmarkVars) {
			$scope.getAdditionalBookmarkVars().forEach(function (key) {
				bookmarkState.scopeParams[key] = $parse('key')($scope);
			});
		}

		return bookmarkState;
	};
});
'use strict';

angular.module('common').controller('flowCtrl', function ($scope, $timeout, $q) {
	$scope.preinitialized = false;
	$scope.initialized = false;
	$scope.initializationCompleted = false;

	/**
  * This method is meant as a way to setup any internal scope variables before calling initialize. If you return a
  * promise then initialize will not be called until the promise is resolved.
  */
	$scope.preinitialize = function () {};

	/**
  * This method is meant for retrieving the data or initializing scope variables. If you return a promise then
  * initializationComplete won't be called until the promise is resolved.
  */
	$scope.initialize = function () {};

	/**
  * This method is here to notify the controller when everything has been fully initialized. It is important
  * to note that if you don't return a promise from initialize this method will be called immediately after
  * calling initialize. If you are performing ajax requests within the initialize function make sure that all
  * data has been resolved before notifiying the controller that initialization is complete. You can do this by
  * returning a promise.
  */
	$scope.initializationComplete = function () {};

	$scope._initFlowController = function () {
		// Step 1 - Call the preinitialize method and force the return value to be a promise. NOTE: If you call $q.when
		// with a null or NaN value you will still be able to resolve the promise. If you have any questions refer to
		// the documentation at https://docs.angularjs.org/api/ng/service/$q.
		$q.when($scope.preinitialize()).then(function () {
			$scope.preinitialized = true;
			// Step 2 - Call initialize and force the return value to be a promise.
			$q.when($scope.initialize()).then(function () {
				$scope.initialized = true;
				// Step 3 - Call the initializationComplete method to notify the controller that all initialization
				// has completed.
				$scope.initializationComplete();
				$scope.initializationCompleted = true;
			});
		});
	};

	//Initialize the flow controller in the next frame to allow the child controller to initialize itself before
	//calling this method.
	$timeout(function () {
		$scope._initFlowController();
	});
});
'use strict';

angular.module('common').controller('initCtrl', function ($scope, $timeout, $q, util) {

	$scope.preinitialized = false;
	$scope.initialized = false;

	/**
  * This is a list of functions that will be run sequentially
  * before initialize is called.  These functions will be
  * run using util.executeSerially - which runs each function and waits
  * for a promise to complete before running the next one.
  *
  * If you have multiple items you want to run before initialize, but you want to run them
  * in parallel, you can simply add a function that calls all the parallel functions and 
  * returns $q.when(parallelPromises) where parallelPromises would be an array of promises 
  * returned from the parallel calls.
  */
	$scope.preinitializers = [];

	/**
  * This method is meant for retrieving the data or initializing scope variables. If you return a promise then
  * initializationComplete won't be called until the promise is resolved.
  */
	$scope.initialize = function () {};

	$scope._doInit = function () {

		function mark(step) {
			return function () {
				$scope[step] = true;
			};
		}

		var initializers = $scope.preinitializers.concat([mark('preinitialized'), $scope.initialize, mark('initialized')]);

		util.executeSerially(initializers);
	};

	function isInitCtlr(scope) {
		return scope && angular.isDefined(scope.preinitializers);
	}

	// If there is a parent scope that has initializers that haven't completed, we should make
	// add init to that list
	if (isInitCtlr($scope.$parent) && !$scope.$parent.preinitialized) {

		$scope.$parent.preinitializers.push($scope._doInit);
	} else {

		//Initialize the flow controller in the next frame to allow the child controller to initialize itself before
		//calling this method.
		$timeout(function () {
			$scope._doInit();
		});
	}
});
'use strict';

angular.module('common').controller('routeFlowCtrl', function ($q, $scope, scBookmarkService, util, $log, $route, $location, stateManager, $rootScope) {

	//Extend the flow controller through mixin inheritance.
	util.extendController($scope, 'flowCtrl');

	/**
  * This is the first method to be called within the route flow controller in order to load the state of the route
  * into the scope. It will be called regardless of whether there is a bookmark id or not. If no bookmark id is
  * passed in the promise will be resolved in the next frame to ensure that the child controller and all other
  * extended controllers are initialized before the rest of the initialization process occurs.
  */
	function _loadBookmarkState() {
		var deferred = $q.defer(),
		    bookmarkId = util.getQueryParam('bookmark');

		if (bookmarkId) {
			scBookmarkService.getSpaViewState(bookmarkId).then(function (result) {
				//Put each variable within the params hash into the scope. Some of these variables might be url
				//params and others may just be scope params. This will be determined by the scopeVars that you have
				//defined in your controller. NOTE: If you didn't define a
				if (result.data && result.data.params) {
					Object.keys(result.data.params).forEach(function (key) {
						var value;
						try {
							value = JSON.parse(result.data.params[key]);
						} catch (e) {
							value = result.data.params[key];
						}

						$scope[key] = value;
					});
				}

				if (result.data && result.data.path && result.data.path.indexOf($location.path()) !== -1) {
					$location.path(result.data.path);
				}

				deferred.resolve();
			}, function (err) {
				$log.warn('Unable to get bookmark due to:', err);
				deferred.resolve();
			});
		} else {
			//Resolve the promise immediately because there is no bookmark.
			deferred.resolve();
		}

		return deferred.promise;
	}

	/**
  * Private method for registering this controller with the StateManager. This method will only setup state
  * management if the controller has defined a hashmap of key/value pairs to be tracked in a scope variable
  * called stateVars.
  * @private
  */
	function _setupStateManagement() {
		if ($scope.getStateVars) {
			//Set reloadOnSearch to false so that users don't have to do this within their route configuration.
			$route.current.$$route.reloadOnSearch = false;
			stateManager.register($scope, $scope.getStateVars());
		}
	}

	/**
  * This method is here to retrieve a specific state when a user attempts to bookmark a SPA.
  *
  * By default this method will return a hash with the path and the query params that are in the URL. However,
  * it is possible that specific SPA's will want to do their own state management. For example, they may want to
  * store scope variables that are not a part of the URL onto the bookmark state.
  */
	$rootScope.getBookmarkState = function () {
		var bookmarkState = {
			path: $location.path(),
			params: $location.search()
		};

		//If a user passed in additional scope parameters that are not defined on the URL then we can reference them
		//here.
		if ($scope.getAdditionalBookmarkVars) {
			$scope.getAdditionalBookmarkVars().forEach(function (key) {
				bookmarkState.params[key] = $scope[key];
			});
		}

		return bookmarkState;
	};

	/**
  * Override the initialization of the flow controller to account for bookmark and stateManagement.
  * @private
  */
	$scope._initFlowController = function () {
		// Step 1 - Load the current state from a bookmark if there is one.
		_loadBookmarkState().then(function () {
			// Step 2 - Call the preinitialize method and force the return value to be a promise. NOTE: If you call $q.when
			// with a null or NaN value you will still be able to resolve the promise. If you have any questions refer to
			// the documentation at https://docs.angularjs.org/api/ng/service/$q.
			$q.when($scope.preinitialize()).then(function () {
				$scope.preinitialized = true;
				// Step 3 - Setup state manager.
				_setupStateManagement();

				// Step 4 - Call initialize and force the return value to be a promise.
				$q.when($scope.initialize()).then(function () {
					$scope.initialized = true;

					// Step 5 - Call the initializationComplete method to notify the controller that all initialization
					// has completed.
					$scope.initializationComplete();
					$scope.initializationCompleted = true;
				});
			});
		});
	};
});
'use strict';

(function ($) {
	angular.module('common').config(function ($httpProvider) {
		//Add a generic http error interceptor for all errors within the UI.
		$httpProvider.interceptors.push('genericHttpErrorhandler');
	}).controller('spaCtrl', function ($scope, $http, appModel, _, $filter, $window, app, $rootScope, $timeout, $location, util, eventBus, NewNavCoachmarks) {

		NewNavCoachmarks.init($scope);
		// Extend the report navigation controller.
		util.extendController($scope, 'reportNavigationCtrl');

		app.start();

		var $body = $('body');
		var debouncedResizeHandler = _.debounce(function () {
			$window.document.body.dispatchEvent(new CustomEvent('content:resize'));
		}, 600); // Wait 600 ms for the 500 ms animations to finish.
		$body.on('leftRailPinnedStateChange rightRailPinnedStateChange', debouncedResizeHandler);
		$(window).resize(debouncedResizeHandler);

		//Display a confirmation dialog if users attempt to navigate away from any adobe products by clicking on a link.
		var hostEndsWithWhitelistedDomain = function hostEndsWithWhitelistedDomain(host) {
			var domainWhitelist = ['adobe.com', 'adobe.net', 'omniture.com', 'acrobat.com', 'macromedia.com'],
			    endsWithDomain = false;

			for (var i = 0; i < domainWhitelist.length; i++) {
				var domain = domainWhitelist[i];
				//Make sure that the host ends with the domain and doesn't just contain it.
				if (~host.indexOf(domain, host.length - domain.length)) {
					endsWithDomain = true;
					break;
				}
			}

			return endsWithDomain;
		};

		$('.js-endor-page').on('click', 'a', function (e) {
			// If we are doing local dev, we don't want the secure domain warning
			if (appModel.settings.localDev) {
				return;
			}

			var link = e.target;
			if (link.protocol && link.host && !(link.protocol === 'https:' && hostEndsWithWhitelistedDomain(link.host)) && !$window.confirm($filter('l10n')(['secureDomainWarning', 'You are navigating away from Adobe\'s secure domain. Do you want to continue?']))) {
				e.preventDefault();
			}
		});
	}).run(function (spaTrackService) {
		spaTrackService.configureSPATracking();
	});
})(jQuery);
'use strict';

angular.module('common').controller('stateManagerCtrl', function ($q, $scope, util, $log, stateManager, $timeout) {

	/** Mixin initCtrl if it hasn't already been mixed in **/
	util.extendController($scope, 'initCtrl');

	// Add state management to the list of preinitializers
	$scope.preinitializers.push(_setupStateManagement);

	/**
  * Private method for registering this controller with the StateManager. This method will only setup state
  * management if the controller has defined a hashmap of key/value pairs to be tracked in a scope variable
  * called stateVars.
  * @private
  */
	function _setupStateManagement() {
		if ($scope.getStateVars) {
			//Set reloadOnSearch to false so that users don't have to do this within their route configuration.
			// $route.current.$$route.reloadOnSearch = false;
			// $state.current.reloadOnSearch = false;
			stateManager.register($scope, $scope.getStateVars());
		}

		// Continue after next frame, so we make sure state is settled
		return $timeout(function () {});
	}
});
'use strict';

angular.module('common').directive('adSref', function (_, $state, $timeout, $location, $rootScope, util, $parse) {

	/*  This directive defines the following attributes:
 	 - ad-include-params
 	 - ad-exclude-params
 	 - ad-include-all
 	 - ad-extra-params
 */

	function getStateQueryParams(scope, attrs) {
		var params = {};

		if (attrs.adIncludeAll) {

			params = $location.search();
		} else if (attrs.adIncludeParams) {

			var includeParams = attrs.adIncludeParams.split(',');
			params = util.includeKeys(includeParams, $location.search());
		} else if (attrs.adExcludeParams) {

			var excludeParams = attrs.adExcludeParams.split(',');
			params = util.excludeKeys(excludeParams, $location.search());
		}

		if (attrs.adExtraParams) {
			var extraParams = $parse(attrs.adExtraParams)(scope);
			_.extend(params, extraParams);
		}

		var search = util.encodeQueryParams(params);

		return search ? '?' + search : '';
	}

	function initWatchers(scope, element, attrs, update) {

		// Register with location change so we can update the url when query parameters change
		var unregisterLocationChange = $rootScope.$on('$locationChangeSuccess', function () {
			update();
		});
		// Remove locationChange registration
		element.on('$destroy', function () {
			unregisterLocationChange();
		});
		// If the extra params change, we should update the url
		if (attrs.adExtraParams) {
			scope.$watch(attrs.adExtraParams, function () {
				update();
			});
		}
	}

	/* These methods are from angular-ui-router, needed to generate the href */
	function parseStateRef(ref, current) {
		var preparsed = ref.match(/^\s*({[^}]*})\s*$/),
		    parsed;
		if (preparsed) {
			ref = current + '(' + preparsed[1] + ')';
		}
		parsed = ref.replace(/\n/g, ' ').match(/^([^(]+?)\s*(\((.*)\))?$/);
		if (!parsed || parsed.length !== 4) {
			throw new Error('Invalid state ref \'' + ref + '\'');
		}
		return { state: parsed[1], paramExpr: parsed[3] || null };
	}

	function stateContext(el) {
		var stateData = el.parent().inheritedData('$uiView');

		if (stateData && stateData.state && stateData.state.name) {
			return stateData.state;
		}
	}

	var allowedOptions = ['location', 'inherit', 'reload'];

	return {
		restrict: 'A',
		require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		link: function link(scope, element, attrs, uiSrefActive) {

			var ref = parseStateRef(attrs.adSref, $state.current.name);
			var params = null,
			    base = stateContext(element) || $state.$current;
			var nav = true;

			var options = { relative: base, inherit: true };
			var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

			angular.forEach(allowedOptions, function (option) {
				if (option in optionsOverride) {
					options[option] = optionsOverride[option];
				}
			});

			var update = function update(newVal) {
				if (newVal) {
					params = newVal;
				}

				if (!nav) {
					return;
				}

				var newHref = $state.href(ref.state, params, options);

				var activeDirective = uiSrefActive[1] || uiSrefActive[0];
				if (activeDirective) {
					activeDirective.$$setStateInfo(ref.state, params);
				}
				if (newHref === null) {
					nav = false;
					return false;
				}
				element[0].href = newHref + getStateQueryParams(scope, attrs);
			};

			if (ref.paramExpr) {
				scope.$watch(ref.paramExpr, function (newVal, oldVal) {
					if (newVal !== params) {
						update(newVal);
					}
				}, true);
				params = scope.$eval(ref.paramExpr);
			}
			update();

			initWatchers(scope, element, attrs, update);
		}
	};
});
'use strict';

angular.module('common').directive('anFeature', function (featureAccess, $timeout, $animate) {

	return {
		transclude: 'element',
		restrict: 'A',
		priority: 600,
		replace: false,
		terminal: true,
		compile: function compile(element, attrs, $transclude) {
			return function ($scope, $element, $attr) {

				/*
     * You can indicate that you want an element to show if a feature
     * is not supported by prepending the 'bang' character (boolean NOT,
     * or exclamation mark) to the featuer name.
     *
     * E.G. <div an-feature="!appName.featureInQuestion">
     *
     * In the future this could be expanded if needed, even to the point
     * of supporting full expressions.
     */

				var bangRegex, hasBang, appName, feature, childElement;

				bangRegex = /^!/;
				hasBang = bangRegex.test(attrs.anFeature);
				attrs.anFeature = attrs.anFeature.replace(bangRegex, '');

				attrs.anFeature = attrs.anFeature.split('.');
				appName = attrs.anFeature[0];
				feature = attrs.anFeature[1];

				// Check for access after featureAccess has loaded
				featureAccess.onLoad(appName, function () {
					$scope.hasAccess = featureAccess.isFeatureSupported(appName, feature);

					if (hasBang) {
						$scope.hasAccess = !$scope.hasAccess;
					}

					if (childElement) {
						$animate.leave(childElement);
						childElement = undefined;
					}
					if ($scope.hasAccess) {
						$transclude($scope, function (clone) {
							childElement = clone;
							$animate.enter(clone, $element.parent(), $element);
						});
					}
				});
			};
		}
	};
});
'use strict';

angular.module('common').directive('anSpinner', function (spinnerService, _) {
	return {
		restrict: 'AE',
		template: '' + '<div style="display:none;" class="spinnerContainer" >' + '	<div class="coral-Wait" ></div>' + '</div>',
		replace: true,
		scope: {},
		compile: function compile() {
			return {
				pre: function pre(scope, element, attrs) {
					// Get the spinner ID, either manually specified or
					var spinnerId = typeof attrs.id !== 'undefined' ? attrs.id : spinnerService.count,
					    $spinner = element.find('.coral-Wait'),
					    debouncedRender = _.debounce(render, 10);

					scope._visible = Boolean(attrs.visible);
					scope._center = Boolean(attrs.center);
					scope._large = Boolean(attrs.large);
					scope._backdrop = Boolean(!attrs.backdrop);

					// Set isolate scope variables - typecast to hard boolean.
					Object.defineProperties(scope, {
						visible: {
							get: function get() {
								return scope._visible;
							},
							set: function set(value) {
								scope._visible = value;
								debouncedRender();
							}
						},
						center: {
							get: function get() {
								return scope._center;
							},
							set: function set(value) {
								scope._center = value;
								debouncedRender();
							}
						},

						large: {
							get: function get() {
								return scope._large;
							},
							set: function set(value) {
								scope._large = value;
								debouncedRender();
							}
						},
						backdrop: {
							get: function get() {
								return scope._backdrop;
							},
							set: function set(value) {
								scope._backdrop = value;
								debouncedRender();
							}
						}
					});

					function render() {
						$spinner.toggleClass('coral-Wait--center', scope.center).toggleClass('coral-Wait--large', scope.large);

						element.toggleClass('spinnerBackdrop', scope.backdrop).toggle(scope.visible);
					}

					render();

					// Add the spinner to the spinner service.
					// The service stores a simple hash with the spinnerId as
					// the key and that spinner's isolate scope as the value.
					spinnerService.register(spinnerId, scope);
				}
			};
		}
	};
});
'use strict';

angular.module('common').factory('featureAccess', function ($http, $q, appModel, $window, scUrl) {
	return {
		features: {},
		loaded: {},
		cbFns: {},
		SESSION_KEY: 'an://feature-access/',
		CONTRIBUTION_ANALYSIS: 'contributionAnalysis',
		FREEFORM_ANALYSIS: 'freeformAnalysis',

		/**
   * load - load the respective features accessible for the active user, for the specified appName
   * @param appName which app you want to request features for
   */
		load: function load(appName) {
			var self = this,
			    SESSION_KEY_APP = this.SESSION_KEY + appName,
			    deferred = $q.defer();

			if (this.features[appName]) {
				deferred.resolve();
			} else if ($window.sessionStorage[SESSION_KEY_APP]) {
				var sessionData = JSON.parse($window.sessionStorage[SESSION_KEY_APP]);
				this._populateFeatures(appName, sessionData);
				deferred.resolve();
			} else {
				$http({
					method: 'GET',
					url: appModel.appService.baseURL + '/featureaccess/' + appName
				}).then(function (response) {
					$window.sessionStorage[SESSION_KEY_APP] = JSON.stringify(response.data);

					self._populateFeatures(appName, response.data);

					deferred.resolve();
				}, function (error) {
					deferred.reject(error);
				});
			}
			return deferred.promise;
		},

		_populateFeatures: function _populateFeatures(appName, data) {

			this.features[appName] = data;
			this.loaded[appName] = true;

			// Run all of the callback functions
			if (this.cbFns[appName]) {
				while (this.cbFns[appName].length > 0) {
					this.cbFns[appName].shift()();
				}
			}
		},

		// Add a callback function to be run after feature-access has loaded
		onLoad: function onLoad(appName, fn) {
			if (this.loaded[appName]) {
				// Execute the function immediately
				fn();
			} else {
				// Add it to a queue to be run after feature-access loads
				this.cbFns[appName] = this.cbFns[appName] || [];
				this.cbFns[appName].push(fn);
			}
		},

		/**
   * getFeatureData - retrieve feature data for the specified featureName (must call this.load() first)
   * @param featureName which feature you want data for
   * @return (mixed) feature data
   */
		getFeatureData: function getFeatureData(appName, featureName) {
			featureName = featureName || 'enabled';
			return this.features[appName] ? this.features[appName][featureName] : null;
		},

		/**
   * isFeatureSupported - shortcut method which returns a boolean type for the specified featureName
   * @param featureName which feature you want to know if it is supported
   * @return (boolean) whether or not the feature is supported
   */
		isFeatureSupported: function isFeatureSupported(appName, featureName) {
			featureName = featureName || 'enabled';
			return this.getFeatureData(appName, featureName) === true;
		},

		/**
  * redirectToAccessDeniedPage - redirects the user to the access denied page
  * useful if the user has no access to the entire app
  */
		redirectToAccessDeniedPage: function redirectToAccessDeniedPage() {
			setTimeout(function () {
				location.href = scUrl.fs('Main.AccessDenied');
			});
		}
	};
});
'use strict';

angular.module('common').factory('genericHttpErrorhandler', function ($q, appModel, $filter, eventBus, spinnerService, util, sessionManager, _) {
	var _analyticsui$model = analyticsui['model'],
	    progressReporter = _analyticsui$model.progressReporter,
	    errorCodes = _analyticsui$model.errorCodes,
	    addGlobalIdToRequest = _analyticsui$model.addGlobalIdToRequest,
	    FeatureFlag = _analyticsui$model.FeatureFlag;

	return {
		request: function request(config) {
			if (FeatureFlag.isActive('globalRequestId')) {
				addGlobalIdToRequest(config);
			}

			if (appModel.settings.enableXHRLogging) {

				var req = Object.assign({}, config);
				req.headers = _.omit(config.headers, 'Authorization');
				req.headers = _.omit(req.headers, 'authorization');
				progressReporter.progress(progressReporter.XHR_REQUEST_START, req);
			}
			return config;
		},
		response: function response(_response) {
			if (appModel.settings.enableXHRLogging) {
				var res = _.omit(_response, 'data');
				res.config.headers = _.omit(res.config.headers, 'Authorization');
				progressReporter.progress(progressReporter.XHR_REQUEST_END, _.omit(_response, 'data'));
			}
			return _response;
		},
		responseError: function responseError(rejection) {
			if (rejection.status !== 0) {

				// App-service returns 401 and PHP returns 403 for invalid/expired sessions
				if (rejection.status === 401 && rejection.data.errorCode == 'invalid_token' || rejection.status === 403 && !rejection.data) {

					sessionManager.triggerSessionExpired();
				} else if (rejection.data && rejection.data.errorCode) {

					if (rejection.data.errorDescription.match(/Oberon request failed with code/)) {
						rejection.data.errorCode = 'oberon_failure';
					}

					if (!_.get(rejection, 'config.bypassErrorsInterceptor')) {
						appModel.addAlert({
							variant: 'error',
							contents: util.sprintf($filter('l10n')(['genericErrorHandlerMessageWithId', '%1$s Please submit this error id to Adobe Client Care for further diagnosis: %2$s']), [errorCodes.getMessageByCode(rejection.data.errorCode), rejection.data.errorId]),
							clearOtherAlerts: true
						});
					}

					progressReporter.error(rejection);
				} else if (rejection && rejection.config) {

					var config = rejection.config,
					    endpoint;

					if (config.params && config.params.a) {
						//Handle mohavi (PHP) endpoints.
						endpoint = config.params.a;
					} else {
						//Display the path to appservice endpoints.
						//Display the path without the rest of the url.
						endpoint = config.url.substring(config.url.indexOf('/', 8));
					}

					appModel.addAlert({
						variant: 'error',
						contents: util.sprintf($filter('l10n')(['genericErrorMessageNoWithPath', 'An unknown error occurred in retrieving some or all of your data from %1$s. This endpoint returned with a status code of %2$s. Please submit this error to Adobe Client Care for further diagnosis']), [endpoint, rejection.status]),
						clearOtherAlerts: true
					});

					progressReporter.error(rejection);
				} else {
					appModel.addAlert({
						variant: 'error',
						contents: $filter('l10n')(['genericErrorHandlerMessageWithoutId', 'An unknown error occurred in retrieving some or all of your data.']),
						clearOtherAlerts: true
					});

					progressReporter.error(rejection);
				}

				// A global http error has occurred. Hide all unhandled spinners.
				spinnerService.hideAll();
			}

			return $q.reject(rejection);
		}
	};
});
'use strict';

angular.module('common').service('spaTrackService', function ($window, $rootElement, trackService, appModel) {
	var Track = analyticsui['ui-core'].Track;

	return {

		configureSPATracking: function configureSPATracking() {

			//Most likely we will get the angular application through the ng-app attribute. However, we often manually
			//bootstrap angular for old-school site catalyst so in that instance we are going to pull the attribute off
			var angularApp = appModel.settings.angularApp;

			Track.actionPrefix = trackService.actionPrefix = 'SPA::' + angularApp + '::';
			Track.customNamespace = trackService.customNamespace = 'spa.';
			Track.featureName = trackService.angularApp = angularApp;
			Track.suites = trackService.suites = [
			// obue.analytics.spa
			{
				name: 'obuet_spa',
				linkTrackVars: '',
				linkTrackEvents: ''
			}];
		}
	};
});
'use strict';

angular.module('common')
// Simple service for easy spinner control.
.factory('spinnerService', function () {
	var spinnerCache = {};
	var queue = {};
	return {
		// All spinners are stored here.
		// Ex: { spinnerId: isolateScope }
		spinnerCache: spinnerCache,

		// Registers a spinner with the spinner service.
		// This method is only ever really used by the directive itself, but
		// the service could be used elsewhere if necessary.
		register: function register(spinnerId, spinnerData) {

			// Add the spinner to the collection.
			this.spinnerCache[spinnerId] = spinnerData;

			// Increase the spinner count.
			this.count++;

			// Check if spinnerId was in the queue, if so then fire the
			// queued function.
			if (queue[spinnerId]) {
				this[queue[spinnerId]](spinnerId);
				delete queue[spinnerId];
			}
		},

		// Removes a spinner from the collection.
		unregister: function unregister(spinnerId) {
			if (!this.spinnerCache[spinnerId]) {
				throw new Error('Spinner "' + spinnerId + '" does not exist.');
			}
			delete this.spinnerCache[spinnerId];
		},

		// Show a spinner with the specified spinnerId.
		show: function show(spinnerId) {
			if (!this.spinnerCache[spinnerId]) {
				queue[spinnerId] = 'show';
				return;
			}
			this.spinnerCache[spinnerId].visible = true;
		},

		// Hide a spinner with the specified spinnerId.
		hide: function hide(spinnerId) {
			if (!this.spinnerCache[spinnerId]) {
				queue[spinnerId] = 'hide';
				return;
			}
			this.spinnerCache[spinnerId].visible = false;
		},

		// Hide/show a spinner with the specified spinnerId.
		toggle: function toggle(spinnerId) {
			if (!this.spinnerCache[spinnerId]) {
				queue[spinnerId] = 'toggle';
				return;
			}
			this.spinnerCache[spinnerId].visible = !this.spinnerCache[spinnerId].visible;
		},

		// Show all spinners tracked by the service.
		showAll: function showAll() {
			/* jshint forin:false */
			for (var key in this.spinnerCache) {
				this.show(key);
			}
		},

		// Hide all spinners tracked by the service.
		hideAll: function hideAll() {
			/* jshint forin:false */
			for (var key in this.spinnerCache) {
				this.hide(key);
			}
		},

		// Hide/show all spinners tracked by the service.
		toggleAll: function toggleAll() {
			/* jshint forin:false */
			for (var key in this.spinnerCache) {
				this.spinnerCache[key].visible = !this.spinnerCache[key].visible;
			}
		},

		// The number of spinners currently tracked by the service.
		count: 0
	};
});
'use strict';

angular.module('common').factory('stateManager', function (_, $location, $parse, $rootScope, $timeout) {

	/* TODO: Legacy Implementation: We can remove this once we convert everything to use the new approach */
	function _watchScopeChange($scope, param, defaultVal) {
		// Update the URL with the new $scope value
		$scope.$watch(param, function (newVal, oldVal) {
			if (angular.equals(newVal, oldVal)) {
				return;
			}
			if (angular.equals(newVal, defaultVal)) {
				// Remove it (we don't need the defaultVal in the URL)
				newVal = null;
			}

			//Set the state to dirty to indicate that it has changed from the initial state. This is important for
			//bookmarks that do things at a given time.
			$scope['$$stateIsDirty'] = true;

			// Update the URL
			$location.search(param, _encode(newVal));
		}, true);
	}

	function _watchUrlChange($scope, paramHash) {
		// Update $scope with the new URL params
		$scope.$on('$routeUpdate', function () {
			var urlParams = $location.search();

			// Check each item in paramHash to see if it changed in the URL
			Object.keys(paramHash).forEach(function (param) {
				var urlParam = urlParams[param],
				    scopeParam = $scope[param];

				if (!urlParam) {
					//If there is no parameter defined then reset things back to the
					//initial parameter.
					$scope[param] = paramHash[param];
					return;
				}

				var newVal = _decode(urlParam);
				if (!angular.equals(scopeParam, newVal)) {
					if (typeof newVal == 'undefined') {
						// Set to the default
						newVal = paramHash[param];
					}
					// Update the scope
					$scope[param] = newVal;
				}
			});
		});
	}

	function _legacyRegister($scope, paramHash) {
		// Initialize and setup a watch on all the $scope params
		Object.keys(paramHash).forEach(function (param) {
			var defaultVal = angular.copy(paramHash[param]),
			    initialVal;

			if ($scope[param]) {
				initialVal = $scope[param];
			} else if ($location.search()[param]) {
				var urlVal = $location.search()[param];
				initialVal = _decode(urlVal);
			} else {
				// Set to the default
				// (use a deep copy so the defaultVal is maintained)
				initialVal = angular.copy(defaultVal);
			}

			// Add to the $scope
			$scope[param] = initialVal;

			if (initialVal != defaultVal) {
				// Update the URL
				$location.search(param, _encode(initialVal));
			}
			_watchScopeChange($scope, param, defaultVal);
		});

		_watchUrlChange($scope, paramHash);
	}

	/* New Implementation */
	function _registerStateVars($scope, stateVars) {
		stateVars = stateVars.map(function (stateVar) {
			var exp = $parse(stateVar.key);

			return _.extend({}, stateVar, {
				name: stateVar.name || stateVar.key, // If you don't specificy the name, we'll just use the key as the name (this is useful for simple keys (e.g. no dots))
				get: exp,
				set: exp.assign
			});
		});

		stateVars.forEach(function (stateVar) {
			_setInitialValue($scope, stateVar);
		});

		// Set up watchers after our state updates have settled
		$timeout(function () {
			stateVars.forEach(function (stateVar) {
				_watchStateVar($scope, stateVar);
			});
			_watchLocationChange($scope, stateVars);
		});
	}

	function _queryStringValue(name) {
		var value = $location.search()[name];
		if (value) {
			return _decode(value);
		} else {
			return undefined;
		}
	}

	function _setQueryStringValue(name, value) {
		$location.search(name, _encode(value));
	}

	function _setInitialValue($scope, stateVar) {
		var defaultVal = angular.copy(stateVar.default),
		    initialVal = _queryStringValue(stateVar.name);

		if (initialVal === null || typeof initialVal === 'undefined') {
			initialVal = stateVar.get($scope) || defaultVal;
		}

		// Add to the $scope
		stateVar.set($scope, initialVal);

		if (initialVal != defaultVal) {
			_setQueryStringValue(stateVar.name, initialVal);
		}
	}

	function _watchStateVar($scope, stateVar) {
		// Update the URL with the new $scope value
		$scope.$watch(stateVar.key, function (newVal, oldVal) {

			if (angular.equals(newVal, oldVal)) {
				return;
			} else if (angular.equals(newVal, stateVar.default)) {
				// Remove it (we don't need the defaultVal in the URL)
				newVal = null;
			}

			//Set the state to dirty to indicate that it has changed from the initial state. This is important for
			//bookmarks that do things at a given time.
			$scope['$$stateIsDirty'] = true;

			_setQueryStringValue(stateVar.name, newVal);
		}, true);
	}

	function _watchLocationChange($scope, stateVars) {
		// Update $scope with the new URL params
		var unregister = $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {

			var urlParams = $location.search();

			// Check each stateVar to see if it changed in the URL
			stateVars.forEach(function (stateVar) {
				var urlParam = urlParams[stateVar.name],
				    scopeParam = stateVar.get($scope);

				if (urlParam === null || typeof urlParam === 'undefined') {
					stateVar.set($scope, stateVar.default);
					return;
				}

				var newVal = _decode(urlParam);
				if (!angular.equals(scopeParam, newVal)) {
					if (typeof newVal == 'undefined') {
						newVal = stateVar.default;
					}
					// Update the scope
					stateVar.set($scope, newVal);
				}
			});
		});

		$scope.$on('$destroy', function () {
			unregister();
		});
	}

	function _decode(item) {
		try {
			return JSON.parse(item);
		} catch (e) {
			return item;
		}
	}

	function _encode(item) {
		if (item === null || typeof item === 'undefined') {
			// If something is null then don't encode it
			// (we don't want to return the string "null")
			return null;
		}

		//Angular is turning objects and arrays into strings. This code simply turns them into the stringified
		//version of an array before it puts them into the url.
		if (angular.isObject(item)) {
			item = JSON.stringify(item);
		}

		return item;
	}

	return {
		register: function register($scope, paramHash) {
			if (angular.isArray(paramHash)) {
				_registerStateVars($scope, paramHash);
			} else {
				_legacyRegister($scope, paramHash);
			}
		}
	};
});
'use strict';

angular.module('common').directive('adTagWell', function (tagRepository, util, $filter) {
	return {
		templateUrl: 'analytics/widgets/directives/ad-tag-well.tpl.html',
		restrict: 'E',
		replace: true,
		scope: {
			tags: '='
		},
		controller: function controller($scope, $element, $attrs, $parse) {

			$scope.clickToAddNewItemLabel = $filter('l10n')(['atwClickToAddNewItemLabel', 'Click to add tag \'%s\'']);

			$scope.loadTags = function () {
				$scope.loadingTags = true;
				tagRepository.query({}).then(function (tags) {
					$scope.tags = tags;
					$scope.loadingTags = false;
				});
			};
		}
	};
});
'use strict';

angular.module('common').directive('anChangeIndicator', ['$parse', '$window', '$filter', 'ChangeIndicatorService', function ($parse, $window, $filter, ChangeIndicatorService) {
	return {
		templateUrl: 'analytics/widgets/directives/an-change-indicator.tpl.html',
		restrict: 'EA',
		replace: true,
		scope: {
			sourceValue: '=',
			targetValue: '=',
			polarity: '=?',
			timeInterval: '=?'
		},
		controller: function controller($scope, $element, $attrs) {
			var changeService = new ChangeIndicatorService();

			$scope.$watch('polarity', function (newVal) {
				if (!newVal) {
					return;
				}
				changeService.polarity = $scope.polarity;

				newVal = newVal.toLowerCase();
				$scope.polarityClass = newVal == ChangeIndicatorService.NEGATIVE ? 'down-is-good' : 'up-is-good';
			});

			render();
			$scope.$watchGroup(['sourceValue', 'targetValue', 'timeInterval'], function (newVal, oldVal) {

				if (newVal !== oldVal) {
					changeService.sourceValue = parseFloat($scope.sourceValue);
					changeService.targetValue = parseFloat($scope.targetValue);
					changeService.timeInterval = $scope.timeInterval;
					render();
				}
			});

			function render() {
				var changeServiceProperties = changeService.calculateChangeValues(); //calcSummary('change');
				$scope.direction = changeServiceProperties.direction;
				$scope.arrowIconClass = 'coral-Icon--arrow' + ($scope.direction == ChangeIndicatorService.UP ? 'Up' : 'Down');
				$scope.percentChanged = changeServiceProperties.percentChanged;
				$scope.timeIntervalLabel = changeServiceProperties.timeIntervalLabel;
			}
		}
	};
}]);
'use strict';

angular.module('common').directive('anMetricTween', function ($filter) {
	return {
		templateUrl: 'analytics/widgets/directives/an-metric-tween.tpl.html',
		restrict: 'EA',
		scope: {
			metric: '=',
			type: '=',
			precision: '=',
			duration: '=',
			update: '&?',
			complete: '&?'
		},
		link: function link(scope, element) {

			var defaults = {
				precision: 0,
				duration: 3000
			};

			var metricEl = element.find('.metric');

			function format(val) {
				return $filter('metric')(val, scope.type, scope.precision || defaults.precision) || '';
			}

			function update(val) {
				var formatted = format(val);
				metricEl.text(formatted);
				scope.update({ val: val, formatted: formatted });
			}

			function complete() {
				update(scope.metric);
				scope.complete();
			}

			scope.$watch('metric', function (newVal, oldVal) {
				if (!oldVal) {
					oldVal = 0;
				}

				$({ value: oldVal }).animate({
					value: newVal
				}, {
					step: update,
					complete: complete,
					easing: 'swing',
					duration: scope.duration || defaults.duration
				});
			});
		}
	};
});
'use strict';

angular.module('common').filter('l10n', function (_) {
	var l10n = analyticsui['core'].l10n;


	return function (input, replace) {
		if (angular.isArray(input)) {
			var key = input[0],
			    value = input[1];

			if (replace && !_.isArray(replace)) {
				replace = [replace];
			}

			return l10n(value, key, replace);
		} else {
			return input;
		}
	};
});
'use strict';

angular.module('common').directive('adInfoPopover', function () {
	return {
		templateUrl: 'ui/calculated-metrics/directives/ad-info-popover.tpl.html',
		restrict: 'E',
		transclude: true,
		scope: {
			toggleVisibilityCommand: '@',
			hideCommand: '@',
			updateModel: '=?',
			component: '=?', //provide a component if you want to use default parts of this template, ie header or description section
			popoverControl: '=?'
		},
		controller: function controller($scope, $element, $attrs, $timeout, $q, eventBus) {

			// assign dummy updateModel function if one is not provided
			$scope.updateModel = $scope.updateModel || function (componentInfo) {
				$scope.component = componentInfo;
			};

			$scope.toggleVisibilityCommand = $scope.toggleVisibilityCommand || 'genericComponentPreview:toggleVisibility';
			$scope.hideCommand = $scope.hideCommand || 'genericComponentPreview:hide';

			var lastTarget = null;
			$scope.popoverControl = {};

			$scope.popoverHidden = function () {
				if (lastTarget) {
					jQuery(lastTarget).removeClass('is-active');
				}
			};

			$scope.popoverControl.onClose = $scope.popoverHidden;

			function toggleVisibility(currentTarget, model, pointFrom) {
				var visible = $scope.popoverControl.isOpen;

				// Hide popup it if is currently showing
				if (visible) {
					hide();
				}

				// We want to show the popup if
				// - It was hidden
				// - If the popup that was showing was for a different item than the current item
				if (!visible || lastTarget !== currentTarget[0]) {
					$q.when($scope.updateModel(model)).then(function () {
						show(currentTarget, pointFrom);
					});
				}

				lastTarget = currentTarget[0];
			}

			function hide() {
				$scope.popoverControl.hide();
			}

			function show(target, pointFrom) {
				if (lastTarget) {
					jQuery(lastTarget).removeClass('is-active');
				}
				pointFrom = pointFrom || 'right';
				target.addClass('is-active');
				$scope.popoverControl.show(target, { pointFrom: pointFrom });
			}

			// Listen for eventBus messages for toggling visibility and hiding
			eventBus.subscribe($scope.toggleVisibilityCommand, $scope, toggleVisibility);
			eventBus.subscribe($scope.hideCommand, $scope, hide);
		}
	};
});
'use strict';

angular.module('common').directive('anFunctionInfo', function () {
	var l10nConfig = analyticsui['core'].l10nConfig;

	return {
		templateUrl: 'ui/calculated-metrics/directives/an-function-info.tpl.html',
		restrict: 'E',
		scope: {},
		controller: function controller($scope) {

			$scope.updateModel = function (functionInfo) {
				$scope.function = functionInfo;
			};

			$scope.baseUrl = 'https://marketing.adobe.com/resources/help/' + l10nConfig.currentLocale + '/analytics/calcmetrics';
		}
	};
});
'use strict';

angular.module('common').directive('anMetricExpressionSummary', function (RecursionHelper) {
	return {
		templateUrl: 'ui/calculated-metrics/directives/an-metric-expression-summary.tpl.html',
		restrict: 'E',
		scope: {
			expression: '='
		},
		compile: function compile(element) {
			return RecursionHelper.compile(element);
		},
		controller: function controller($scope, $element, $attrs) {}
	};
});
'use strict';

angular.module('common').directive('anMetricSummary', function (RecursionHelper) {
	return {
		templateUrl: 'ui/calculated-metrics/directives/an-metric-summary.tpl.html',
		restrict: 'E',
		scope: {
			expression: '='
		},
		controller: function controller($scope, $element, $attrs, $window, util, $timeout) {

			// The number of items (segments, functions, metrics) after which this 
			// metric will be considered complex enough to show abbreviated names
			var COMPLEX_LENGTH = 6;

			$scope.isComplex = false;

			$scope.item = [];

			var wordCount = 0;

			function updateSummary() {

				wordCount = 0;

				$scope.items = [];

				// Visit gets called for each item in the tree
				// For containers, functions, and parameters it gets called twice:
				// once with 'start' before the children have been visited and 
				// once with 'end' after the children have been visited
				$scope.expression.visit(function (item, visitType) {

					// Only do these if visiting an item or the 'start' visit of a container/function/parameter					
					if (visitType === 'start' || !visitType) {
						// Add metric or function 'words'
						if (isWordType(item) && !isCompareOperator(item.id)) {
							addWord(item);
						}
						// Add standard operators
						else if (isOperator(item)) {
								addOperator(item);
								// Add comparison operators (e.g. >, >=, !=, etc...)
							} else if (isParameter(item) && isCompareOperator(item.function.id) && paramIndex(item) == 1) {
								addCompareOperator(item);
								// Add parameter names
							} else if (isParameter(item) && hasMultipleParameters(item) && !isCompareOperator(item.function.id)) {
								addSmallWord(item);
								// Add static numbers
							} else if (isStaticNumber(item)) {
								addValue('static-number', item);
								// Add boolean value
							} else if (isBooleanValue(item)) {
								addValue('boolean', item);
							}
					}

					// Add segments
					if (isContainer(item) && hasSegments(item)) {
						item.segments.forEach(function (segment) {
							if (visitType === 'start') {
								addWord(segment);
							}
							addParen(visitType);
						});

						// Add parenthesis for functions and non-root containers
					} else if (isFunction(item) || isContainer(item) && item.expression) {
						addParen(visitType);
					}
				});

				$scope.isComplex = wordCount > COMPLEX_LENGTH;
			}

			function isCompareOperator(id) {
				return angular.isDefined(compareOperator(id));
			}

			function isParameter(item) {
				return item.itemType === 'cmParameter' || item.itemType === 'cmArrayParameter';
			}

			function isOperator(item) {
				return item.itemType === 'cmOperator';
			}

			function isContainer(item) {
				return item.itemType === 'cmExpression';
			}

			function isFunction(item) {
				return item.itemType === 'cmFunctionRef';
			}

			function isStaticNumber(item) {
				return item.itemType === 'cmNumericValue';
			}

			function isBooleanValue(item) {
				return item.itemType === 'cmBooleanValue';
			}

			function hasMultipleParameters(item) {
				return item.function.parameters.length > 1;
			}

			function hasSegments(item) {
				return item.segments && item.segments.length > 0;
			}

			function addWord(item) {
				wordCount += 1;
				$scope.items.push({
					type: 'word',
					name: item.name,
					icon: icon(item),
					wordType: wordType(item)
				});
			}

			function addSmallWord(item) {
				$scope.items.push({ type: 'small-word', name: item.name });
			}

			function addParen(visitType) {
				if (visitType === 'start') {
					$scope.items.push({ type: 'paren', name: '(' });
				} else if (visitType === 'end') {
					$scope.items.push({ type: 'paren', name: ')' });
				}
			}

			function addCompareOperator(item) {
				$scope.items.push({
					type: 'compare-operator',
					name: compareOperator(item.function.id)
				});
			}

			function addOperator(item) {
				$scope.items.push({
					type: 'operator',
					icon: item.operatorIcon
				});
			}

			function addValue(valueType, item) {
				$scope.items.push({
					type: 'value',
					value: item.value,
					valueType: valueType
				});
			}

			function icon(item) {
				switch (item.itemType) {
					case 'cmMetricRef':
						return 'event';
					case 'cmSegmentRef':
						return 'users';
					case 'cmFunctionRef':
						return 'effects';
					case 'cmDimensionRef':
						return 'dimension';
				}
			}

			function wordType(item) {
				switch (item.itemType) {
					case 'cmMetricRef':
						return 'metric';
					case 'cmSegmentRef':
						return 'segment';
					case 'cmFunctionRef':
						return 'function';
					case 'cmDimensionRef':
						return 'dimension';
				}
			}

			function isWordType(item) {
				return angular.isDefined(wordType(item));
			}

			function compareOperator(id) {
				switch (id) {
					case 'gt':
						return '>';
					case 'ge':
						return '>=';
					case 'lt':
						return '<';
					case 'le':
						return '<=';
					case 'eq':
						return '=';
					case 'ne':
						return '!=';
				}
			}

			function paramIndex(item) {
				return item.function.parameters.indexOf(item);
			}

			$scope.abbreviate = function (text) {
				if (!text) {
					return text;
				}
				var words = text.split(' ');
				if (words.length === 1) {
					return words[0].substr(0, 2);
				} else {
					var firstLetters = words.map(function (word) {
						return word[0];
					});
					return firstLetters.join('.') + '.';
				}
			};

			function updateNextTick() {
				$timeout(function () {
					updateSummary();
				});
			}

			function unbind(expression) {
				if (expression) {
					expression.off('change', updateNextTick);
				}
			}

			// Free up handlers
			$scope.$on('$destroy', function () {
				unbind($scope.expression);
			});

			// Update the first time			
			$scope.$watch('expression', function (newValue, oldValue) {

				if (oldValue) {
					unbind(oldValue);
				}

				updateNextTick();

				if (newValue) {
					newValue.on('change', updateNextTick);
				}
			});
		}
	};
});
'use strict';

angular.module('common').directive('adDraggable', ['$compile', '$parse', 'ieUtil', 'util', '_', function ($compile, $parse, ieUtil, util, _) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var $ = jQuery;
			var originalParams = scope.$eval(attrs.adDraggable),
			    params = $.extend({}, originalParams),
			    ieVersion = ieUtil.ieVersion();

			params.preventNativeSelection = ieVersion == 9 || util.browser().isSafari;

			params.draggableModel = function () {
				if (_.has(originalParams, 'draggableModel')) {
					return scope.$eval(attrs.adDraggable).draggableModel;
				}
				return undefined;
			};

			params.customDragProxy = function () {
				if (!originalParams.customDragProxy) {
					return undefined;
				}

				var templateScope = scope,
				    currentParams = scope.$eval(attrs.adDraggable);

				if (currentParams.customDragProxyObj) {
					templateScope = scope.$new(true); // Create a new isolate scope so that the original element can be used by another directive.
					templateScope.dragProxy = currentParams.customDragProxyObj;
				}

				//Grab the selected items on drag start. This will be the dataModel that is passed in if it is not
				//null and the array is greater than 0.
				return $compile(currentParams.customDragProxy)(templateScope);
			};

			params.disableDrag = function (event) {
				if (originalParams.hasOwnProperty('disableDrag')) {
					return originalParams.disableDrag(event);
				}
				return false;
			};

			element.adDraggable(params);
		}
	};
}]);
'use strict';

angular.module('common').directive('adDropTarget', function () {
	return {
		retrict: 'A',
		link: function link(scope, element, attrs) {
			element.adDropTarget(scope.$eval(attrs['adDropTarget']));
		}
	};
});
'use strict';

(function () {
	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g,
	    dropTargetEventDirectives = {};

	'drag-enter drag-over drag-leave drag-drop drag-drop-outside drag-drop-outside-invalid'.split(' ').forEach(function (name) {
		//Append the ad- (adobe) prefix to every single directive.
		var directiveName = 'ad-' + name;

		//Camelize the directive name.
		directiveName = directiveName.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
			return offset ? letter.toUpperCase() : letter;
		});

		dropTargetEventDirectives[directiveName] = ['$parse', 'DragManager', function ($parse, DragManager) {
			return {
				restrict: 'A',
				link: function link(scope, elem, attr) {
					//Register this elem as a drop target within the drag manager class.
					DragManager.registerDropTarget(elem);

					function dropTargetEventHandler(event, draggableElement, draggableModel, globalPt) {
						scope.$apply(function () {
							//Stop the event from propagating so that parent handlers don't get this
							event.stopPropagation();
							//if a $digest is not already in progress then call the associated method.
							var fn = $parse(attr[directiveName]);
							fn(scope, {
								$event: event,
								$draggableElement: draggableElement,
								$draggableModel: draggableModel,
								$globalPt: globalPt,
								$localPt: elem.globalToLocal(globalPt)
							});
						});
					}

					//Add dragDrop event listener
					elem.on(directiveName, dropTargetEventHandler);
					scope.$on('$destroy', function () {
						elem.off(directiveName, dropTargetEventHandler);
						DragManager.removeDropTarget(elem);
					});
				}
			};
		}];
	});

	angular.module('common').directive(dropTargetEventDirectives);
})();
'use strict';

angular.module('common').directive('isDraggingClass', function ($parse) {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var $ = jQuery;
			var params = scope.$eval(attrs.isDraggingClass);
			if ($.isPlainObject(params) && params.hasOwnProperty('disabled')) {
				params.disabled = function () {
					// Re-parse the angular expression to get the current disabled value.
					var currentParams = scope.$eval(attrs.isDraggingClass);
					return currentParams.disabled;
				};
			}

			element.isDraggingClass(params);
		}
	};
});
'use strict';

angular.module('common').factory('DragManager', function () {
	var DragManager = analyticsui['ui'].DragManager;

	return DragManager;
});
'use strict';

angular.module('common').factory('DragProxy', function () {
	var DragProxy = analyticsui['ui'].DragProxy;

	return DragProxy;
});
'use strict';

angular.module('common').factory('drag-drop.dropTargetBehaviors', function () {
	var dropTargetBehaviors = analyticsui['ui'].dropTargetBehaviors;

	return dropTargetBehaviors;
});
'use strict';

angular.module('common').factory('drag-drop.DropTarget', function (cls) {

	var DropTarget = cls.create({

		_constructor: function _constructor() {
			cls.bind(this, ['onEnter', 'onLeave', 'onOver', 'onDrop']);
		},

		onEnter: function onEnter(e) {},

		onLeave: function onLeave(e) {},

		onOver: function onOver(e) {},

		onDrop: function onDrop(e) {}

	});

	return DropTarget;
});
'use strict';

angular.module('common').service('virtualDropTargetService', function () {
	var virtualDropTarget = analyticsui['ui'].virtualDropTarget;

	return virtualDropTarget;
});
"use strict";

(function ($) {
	$.fn.localToGlobal = function (localPt) {
		var offset = this.offset();
		return {
			x: offset.left + localPt.x,
			y: offset.top + localPt.y
		};
	};

	$.fn.globalToLocal = function (globalPt) {
		var offset = this.offset();
		return {
			x: globalPt.x - offset.left,
			y: globalPt.y - offset.top
		};
	};

	$.fn.containsGlobalPoint = function (globalPt) {
		var offset = this.offset();
		return offset.left < globalPt.x && offset.top < globalPt.y && offset.left + this.outerWidth() > globalPt.x && offset.top + this.outerHeight() > globalPt.y;
	};
})(jQuery);
angular.module("common").run(["$templateCache", function($templateCache) {$templateCache.put("adobe/base/directives/ad-stats.tpl.html","<span class=\"ad-Stats\"> - \n	<span title=\'Last Clicked Element Watch Count\' class=\"last-element-watch-count\"></span> /\n	<span title=\'Total Watch Count\' class=\"watch-count\"></span> watches\n	( <span class=\"digest-length\"></span> )\n</span>");
$templateCache.put("adobe/charts/directives/ad-chart-text-display.tpl.html","<div class=\"text-display-chart\">\n	<ad-content-editable-block class=\"an-chart-text-display-content grid-stack-not-handle\" ad-content-editable-block-params=\"displayTextParams\"></ad-content-editable>\n</div>\n");
$templateCache.put("adobe/charts/directives/ad-chart.tpl.html","<div class=\"ad-chart\" ng-class=\"vizFactory.vizType\"></div>");
$templateCache.put("adobe/charts/directives/ad-spark-bar.tpl.html","<div class=\"spark-bar-wrap\">\n	<div class=\"spark-bar-container\">\n		<div class=\"spark-bar\" ng-style=\"{ width: getWidth() }\" ng-class=\"{ animate: animate }\"></div>\n		<div class=\"spark-bar-value\" ng-transclude></div>\n	</div>\n</div>\n");
$templateCache.put("adobe/shell/directives/ad-action-bar-button.tpl.html","<a class=\"coral-ButtonGroup-item coral-Button coral-Button--secondary coral-Button--quiet\" type=\"button\" >\n	<i class=\"shell-ActionButton-icon coral-Icon {{ ::icon }} {{ getIcon() }}\"></i>\n	<span class=\"shell-ActionButton-label\" ng-transclude></span>\n</a>");
$templateCache.put("adobe/shell/directives/ad-rail-tab-navigator.tpl.html","<div class=\"rail-tab-navigator\">\n	<div ng-transclude class=\"rail-tab-content\"></div>\n	<div class=\"rail-tab-bar\">\n		<a class=\"withLabel\" ng-class=\"railIconClass\" ng-show=\"railTabs.length == 0\">{{railTitle}}</a>\n		<!-- Tabs -->\n		<i ng-repeat=\"tab in railTabs\"\n		   class=\"icon-tab coral-Icon {{tab.tabClass}}\"\n		   ng-class=\"{active:tabIndex == $index}\"\n		   ng-click=\"onTabClick(tab, $index)\"\n		   title=\"{{tab.tooltip}}\"></i>\n	</div>\n</div>\n");
$templateCache.put("adobe/widgets/directives/ad-alert.tpl.html","<ad-react-component props=\"props\" type=\"Alert\" class-name=\"coral3-Alert-content\">\n	<span>{{ text }}</span>\n	<a ng-if=\"link.linkText && !link.isAction\" class=\"coral-Link\" href=\"{{link.href}}\" target=\"{{ link.newTab ? \'_blank\' : \'_self\' }}\">{{link.linkText}}</a>\n\n	<span>\n		<span ng-if=\"link.linkText && link.isAction\" ng-click=\"executeAction()\" class=\"coral-Link\">{{link.linkText}}</span>\n	</span>\n</ad-react-component>\n");
$templateCache.put("adobe/widgets/directives/ad-alerts-box.tpl.html","<div class=\"alerts-box\">\n	<ad-alert\n		ng-repeat=\"alert in alerts\"\n		variant=\"alert.type\"\n		heading=\"alert.heading\"\n		text=\"alert.text\"\n		link=\"alert.link\"\n		item-index=\"$index\"\n		remove-item=\"removeAlert(itemIndex)\">\n	</ad-alert>\n</div>\n");
$templateCache.put("adobe/widgets/directives/ad-autocomplete.tpl.html","<div class=\"coral-Autocomplete ad-autocomplete-list\" ad-click-outside=\"list.onClickOutside()\">\n	<div class=\"coral-InputGroup coral-InputGroup--block js-coral-Autocomplete-inputGroup\">\n        <span class=\"coral-DecoratedTextfield coral-InputGroup-input\">\n          <i class=\"coral-DecoratedTextfield-icon coral-Icon coral-Icon--sizeXS\" ng-class=\"iconClassName\" tabindex=\"-1\" ng-click=\"input.focus();\"></i>\n          <input placeholder=\"{{adPlaceholderText}}\"\n				 ng-keydown=\"input.keydown($event)\"\n				 ng-model=\"search.name\"\n				 ng-focus=\"list.visible = true\"\n				 class=\"coral-DecoratedTextfield-input coral-Textfield js-coral-Autocomplete-textfield\"\n				 ng-class=\"{\'autocomplete-has-suggestion-btn\': !loadingData}\"\n				 type=\"text\" >\n			<button type=\"button\" class=\"coral-DecoratedTextfield-button coral-MinimalButton\" tabindex=\"-1\"\n				ng-show=\"search.name!=\'\' && !loadingData\" ng-click=\"search.name=\'\'; selectedItem = null; input.focus();\">\n				<i class=\"coral-MinimalButton-icon coral-Icon coral-Icon--sizeXS coral-Icon--close\"></i>\n			</button>\n        </span>\n        <span class=\"coral-InputGroup-button\" ng-if=\"!loadingData\">\n          <button class=\"coral-Button coral-Button--secondary coral-Button--square js-coral-Autocomplete-toggleButton\" type=\"button\"\n				 ng-click=\"onSelectBtnClick($event)\" tabindex=\"-1\">\n			  <i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--triangleDown\"></i>\n		  </button>\n        </span>\n		<div class=\"coral-Wait\" ng-if=\"loadingData\" ></div>\n	</div>\n\n	<ul class=\"coral3-SelectList js-coral-Autocomplete-selectList\" ng-class=\"{\'is-visible\': list.visible}\"\n		role=\"listbox\" aria-controls=\"\" aria-hidden=\"false\" aria-multiselectable=\"false\" ng-if=\"list.visible && showSelectList()\" >\n		<li class=\"coral3-SelectList-item coral3-SelectList-item--option add-item-label\"\n			data-value=\"addNewItem\"\n			ng-if=\"showAddNewItem()\"\n			ng-click=\"onAddNewClick()\">\n			<span><a>{{ addNewItemTextKey | sprintf:search.name }}</a></span>\n		</li>\n		<li ng-repeat=\"item in (list.filtered = (dataProvider | fuzzyOrNormalFilter:tryRemoveHashTag(search.name):useFuzzySearch | orderBy:orderBy | groupBy:\'type\':itemTypePriority))\"\n			class=\"coral3-SelectList-item coral3-SelectList-item--option js-coral-Autocomplete-selectListItem\"\n			data-value=\"{{:: item.id}}\"\n			data-index=\"{{:: $index}}\"\n			ng-if=\"::!hideSelectedListItem(item)\"\n			ng-class=\"::{\'first-in-item-type\':firstInItemType(item, $index)}\"\n			ng-click=\"list.setCurrentItem($index, $event)\"\n			ng-init=\"openingList()\">\n			<div class=\"item-type-header\" >{{ ::titleLookupByType[item.type] }}</div>\n			<i ng-class=\"::{\'coral-Icon--{{::item.icon}}\' : item.icon, \'coral-Icon--tag\': !item.icon}\" class=\"coral-Icon  coral-Icon--sizeXS\" ng-if=\"::listItemIconClassName\"></i>\n			<span class=\"item-name\">{{::item.name}}</span>\n		</li>\n		<li class=\"noResultsContainer coral3-SelectList-item coral3-SelectList-item--option\"\n			ng-if=\"displayNoResultsMessage && list.filtered.length === 0\">\n			<span class=\"noResultsMessage\">\n				{{ [\'adAutocompleteNoResults\', \'No results match your search\'] | l10n }}\n			</span>\n		</li>\n		<li class=\"coral3-SelectList-item coral3-SelectList-item--option\"\n			data-value=\"viewAllBtn\"\n			ng-show=\"displayViewAllBtn\"\n			ng-mousedown=\"onViewAllClick($event)\">\n			<span><a>{{ [\'adAutocompleteViewAll\', \'View All\'] | l10n }}</a></span>\n		</li>\n	</ul>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-button-group-button.tpl.html","<label class=\"coral-Selector-option\">\n	\n	<input ng-if=\"group.multiple\" class=\"coral-Selector-input\" title=\"{{ title || text }}\" type=\"checkbox\" name=\"{{ group.name }}\" value=\"{{value}}\" ng-checked=\"isSelected(value)\" ng-click=\"toggleSelection(value)\">\n	\n	<input ng-if=\"!group.multiple\" class=\"coral-Selector-input\" title=\"{{ title || text }}\" type=\"radio\" name=\"{{ group.name }}\" value=\"{{value}}\" ng-model=\"group.model\">\n\n	<span class=\"coral-Selector-description\">\n		<i ng-if=\"icon\" class=\"coral-Icon coral-Icon--{{ icon }} coral-Selector-icon\"></i>\n		<span ng-transclude class=\"button-text button-group-button-text\" data-title></span>\n	</span>\n\n</label>\n");
$templateCache.put("adobe/widgets/directives/ad-button-group.tpl.html","<div class=\"coral-Selector\" ng-transclude></div>");
$templateCache.put("adobe/widgets/directives/ad-calendar-formula.tpl.html","<span class=\"ad-CalendarFormula\">\n	<ad-select\n		class=\"ad-CalendarFormula-start\"\n		selection=\"scope.start\"\n		selection-change=\"scope.updateFormula()\"\n		options=\"::scope.startOptions\">\n	</ad-select>\n\n	<span ng-if=\"scope.start == \'fixed\'\">\n		<input class=\'coral-Textfield\' type=\'text\' ng-model=\'scope.fixedDay\' placeholder=\'YYYY-MM-DD\' ng-change=\'scope.updateFormula()\' />\n	</span>\n\n	<span ng-if=\"scope.start != \'fixed\'\">\n		<ad-select\n			class=\"ad-CalendarFormula-currentRange\"\n			selection=\"scope.currentRange\"\n			selection-change=\"scope.updateFormula()\"\n			options=\"::scope.currentRangeOptions\">\n		</ad-select>\n\n		<ad-select\n			class=\"ad-CalendarFormula-plus\"\n			selection=\"scope.plus\"\n			selection-change=\"scope.updateFormula()\"\n			options=\"::scope.plusOptions\">\n		</ad-select>\n\n		<span ng-if=\"scope.plus != \'\'\">\n			<ad-select\n				class=\"ad-CalendarFormula-quantity\"\n				selection=\"scope.quantity\"\n				selection-change=\"scope.updateFormula()\"\n				options=\"::scope.quantityOptions\">\n			</ad-select>\n\n			<ad-select\n				ng-if=\"scope.quantity == 1\"\n				class=\"ad-CalendarFormula-unit\"\n				selection=\"scope.unit\"\n				selection-change=\"scope.updateFormula()\"\n				options=\"::scope.unitOptions\">\n			</ad-select>\n\n			<ad-select\n				ng-if=\"scope.quantity != 1\"\n				class=\"ad-CalendarFormula-units\"\n				selection=\"scope.unit\"\n				selection-change=\"scope.updateFormula()\"\n				options=\"::scope.unitsOptions\">\n			</ad-select>\n		</span>\n	</span>\n</span>");
$templateCache.put("adobe/widgets/directives/ad-calendar.tpl.html","<div class=\"ad-Calendar\">\n	<div class=\"ad-Calendar-header\">\n		<div class=\"ad-Calendar-previousMonthButton\" ng-click=\"clickPreviousMonth()\">\n			<i class=\"coral-Icon coral-Icon--chevronLeft coral-Icon--sizeXS\"></i>\n		</div>\n		<span class=\"ad-Calendar-monthLabel ad-Calendar-quietSelect\" ng-dblclick=\"scope.dblClickRange(scope.middleOfMonthDay,\'month\')\">\n			<ad-select selection=\"scope.selectedMonth\" selection-change=\"scope.updateMonthFromSelect(newValue)\" options=\"::scope.monthOptions\" quiet=\"true\"></ad-select>\n		</span>\n		<span class=\"ad-Calendar-yearLabel ad-Calendar-quietSelect\" ng-dblclick=\"scope.dblClickRange(scope.middleOfMonthDay, \'year\')\">\n			<ad-select selection=\"scope.selectedYear\" selection-change=\"scope.updateYearFromSelect(newValue)\" options=\"::scope.yearOptions\" quiet=\"true\" ></ad-select>\n		</span>\n		<div class=\"ad-Calendar-nextMonthButton\" ng-click=\"clickNextMonth()\">\n			<i class=\"coral-Icon coral-Icon--chevronRight coral-Icon--sizeXS\"></i>\n		</div>\n	</div>\n	<div class=\"ad-Calendar-dayHeader\">\n		<div ng-repeat=\"dayLabel in ::scope.dayLabels\" class=\"ad-Calendar-dayHeaderLabel\">{{::dayLabel}}</div>\n	</div>\n\n	<div class=\'ad-Calendar-monthHolder\'>\n		<table>\n			<tbody>\n				<tr class=\"ad-Calendar-week\" ng-repeat=\"week in scope.weeks\">\n					<td\n					 ng-class=\"getDayClasses(day)\"\n					 ng-repeat=\"day in ::week\"\n					 ng-click=\"scope.clickDay(day)\"\n					 ad-context-menu=\"scope.clickEndDay(day)\"\n					 ng-dblclick=\"scope.dblClickRange(day, \'day\')\">\n					 	<div class=\"ad-Calendar-dayOuter\">\n					 		<div class=\"ad-Calendar-dayInner\">\n					 			{{::day.date()}}\n					 		</div>\n					 	</div>\n					 </td>\n				</tr>\n			</tbody>\n		</table>\n	</div>\n\n	<div ng-if=\"scope.isEndDate\" class=\"ad-Calendar-numberOfDays\" ng-class=\"{\'ad-Calendar-errorColor\': scope.getNumberOfDays() < 0}\">\n		{{::[\'selectedDaysColon\', \'Selected Days:\'] | l10n }} {{scope.getNumberOfDays()}}\n	</div>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-content-editable-block.tpl.html","<div class=\"ad-content-editable-block\" ng-click=\'edit()\'>\n	<div class=\'ad-content-editable-block-label\'></div>\n	<textarea class=\'ad-content-editable-block-textarea\'></textarea>\n	<div class=\'ad-content-editable-block-controls\'>\n		<i class=\"coral-Icon coral-Icon--sizeS coral-Icon--checkCircle\" ng-click=\"save($event)\" data-tooltip=\"{{ [\'submit\', \'Submit\'] | l10n }}\"></i>\n		<i class=\"coral-Icon coral-Icon--sizeS coral-Icon--closeCircle\" ng-click=\'clear($event);\' data-tooltip=\"{{ [\'clear\', \'Clear\'] | l10n }}\"></i>\n	</div>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-multi-select-popover.tpl.html","<div class=\"coral-Popover multi-select-popover\">\n	<div class=\"list-content\">\n		<ad-search-bar search-model=\"search\" ad-enter=\"onSearchFieldEnterKey()\" search-placeholder=\"{{ searchPlaceholder }}\" class=\"search\"></ad-search-bar>\n		<div class=\"items\" ng-class=\"{\'tall\': (tall == \'true\')}\">\n			<div class=\"add-item-label\" ng-show=\"isAddNewReady()\">{{ [\'addNewItemLabel\', \"Press ENTER to add \'%s\'\"] | l10n | sprintf:search }}</div>\n			<div ng-repeat=\"item in filteredItems = (items | filter:{name:search} | orderBy:\'name\' | groupBy:\'type\':itemTypePriority)\">\n				<div class=\"itemTypeHeader\" ng-if=\"::item.type && titleLookupByType[item.type] && ($index == 0 || item.type != filteredItems[$index - 1].type)\">\n					<span>{{::titleLookupByType[item.type]}}</span>\n				</div>\n				<div class=\"item\">\n					<label class=\"coral-Form-field coral-Checkbox\">\n						<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"item.checkedState\" ad-indeterminate ng-click=\"onItemClick(item)\" ng-disabled=\"allOthersDisabled && !item.toggleDisableAllOthersOnClick\">\n						<span class=\"coral-Checkbox-checkmark\"></span>\n						<span class=\"coral-Checkbox-description\" ng-title=\"::item.name\" ng-bind=\"::item.name\"></span>\n					</label>\n				</div>\n			</div>\n			<div class=\"coral-Wait coral-Wait--large coral-Wait--center\" style=\"display:none;\"></div>\n		</div>\n	</div>\n	<div class=\"button-container\">\n		<button class=\"coral-Form-field coral-Button cancel\" ng-click=\"onCancelClick()\" ng-bind=\"::[\'cancel\', \'Cancel\'] | l10n\"></button>\n		<button class=\"coral-Form-field coral-Button coral-Button--primary\" ng-click=\"onActionClick()\" ng-disabled=\"items.length == 0\" ng-bind=\"::actionLabel\"></button>\n	</div>\n</div>\n");
$templateCache.put("adobe/widgets/directives/ad-numberinput.tpl.html","<div class=\"coral-InputGroup\" ad-mousewheel=\"onMouseWheel($event)\">\n	<span class=\"coral-InputGroup-button\">\n	  <button class=\"coral-Button coral-Button--secondary coral-Button--square\" ng-disabled=\"isDisabled\" type=\"button\" ng-click=\"decrementValue()\">\n		  <i class=\"coral-Icon coral-Icon--sizeS coral-Icon--minus\"></i>\n	  </button>\n	</span>\n	<input type=\"text\" class=\"coral-InputGroup-input coral-Textfield\" \n		ng-model=\"internalValue\" ng-keypress=\"constrainNumericKeypress($event)\" \n		ng-keydown=\"onKeydown($event)\"\n		ng-blur=\"handleBlur($event)\"\n		placeholder=\"{{ placeholder }}\"\n		ng-disabled=\"isDisabled\">\n	<span class=\"coral-InputGroup-button\">\n	  <button class=\"coral-Button coral-Button--secondary coral-Button--square\" type=\"button\" ng-click=\"incrementValue()\" ng-disabled=\"isDisabled\">\n		  <i class=\"coral-Icon coral-Icon--sizeS coral-Icon--add\"></i>\n	  </button>\n	</span>	\n</div>");
$templateCache.put("adobe/widgets/directives/ad-popover-menu-item-back.tpl.html","<div class=\"has-left-icon\">\n	<i class=\"coral-Icon coral-Icon--accordionLeft coral-Icon--sizeXS ad-SlideMenu-item-icon--left\" ></i>\n	<span class=\"ad-SlideMenu-item-label\" data-title>{{item[adSlideMenuParams.labelKey]}}</span>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-popover-menu-item.tpl.html","<div ng-class=\"::{\'has-right-icon\':showDrillDown, \'is-current-value\':adSlideMenuParams.currentValue(item)}\">\n	<span class=\"ad-SlideMenu-item-label\" data-title=\"{{:: showTooltips ? item[adSlideMenuParams.labelKey] : \'\'}}\">{{::item[adSlideMenuParams.labelKey]}}</span>\n	<i ng-show=\"::showDrillDown\" class=\"coral-Icon coral-Icon--accordionRight coral-Icon--sizeXS ad-SlideMenu-item-icon--right\" ></i>\n	<span ng-if=\"adSlideMenuParams.search.showSubLabels\" class=\"ad-SlideMenu-item-sublabel\" data-tooltip=\"{{:: showTooltips ? item[adSlideMenuParams.subLabelKey] : \'\'}}\">{{::item[adSlideMenuParams.subLabelKey]}}</span>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-popover-menu.tpl.html","<ad-popover \n	ad-popover-control=\"menuController\" \n	hide=\"adPopoverMenu.onHideMenu()\"\n	hide-border=\"adPopoverMenu.hideBorder\"\n	ad-escape=\"onEscape($event)\" \n	class=\"ad-PopoverMenu\" \n	ng-class=\"{\'ad-PopoverMenu--isSearching\' : adPopoverMenu.isSearching, \'shrink-to-fit\':adPopoverMenu.shrinkMenu, \'hide-border\': adPopoverMenu.hideBorder}\">\n	<ad-search-bar\n		ng-show=\"adPopoverMenu.showSearchBar\"\n		ad-enter=\"onSearch()\"\n		search-model=\"adPopoverMenu.search.str\"\n		search-placeholder=\"{{ adPopoverMenu.searchPlaceholder }}\"\n		ng-keydown=\"onKeyDown($event)\"\n		class=\"ad-PopoverMenu-search\">\n	</ad-search-bar>\n\n	<div class=\"ad-PopoverMenu-items\">\n		<div ng-show=\"adPopoverMenu.showSearchBar && slideMenu.filteredItems.length == 0\" class=\"ad-PopoverMenu-noResults\">\n			{{ adPopoverMenu.noResultsPlaceholder }}\n		</div>\n\n		<ad-slide-menu ad-slide-menu-params=\"slideMenu\"></ad-slide-menu>\n\n		<an-spinner id=\"ad-PopoverMenu-spinner--search\" large=\"true\" center=\"true\"></an-spinner>\n	</div>\n	<an-spinner id=\"ad-PopoverMenu-spinner\" large=\"true\" center=\"true\"></an-spinner>\n</ad-popover>\n\n");
$templateCache.put("adobe/widgets/directives/ad-quick-add.tpl.html","<div class=\"ad-quick-add\" ng-class=\"optionalClass\">\n	<ad-autocomplete\n		ng-init=\"loadItems()\"\n		multi=\"true\"\n		data-provider=\"items\"\n		ad-placeholder-text=\"{{ placeholderTextKey | l10n }}\"\n		selected-item=\"selectedItems\"\n		loading-data=\"loadingItems\"\n		icon-class-name=\"{{ iconClassName }}\"\n		add-new-item-text-key=\"{{ addNewItemTextKey }}\"\n		item-type-map=\"itemTypeMap\"\n		clear-text-on-select=\"true\"\n		hide-selected-list-items=\"true\"\n		item-changed-handler=\"onSelectedItemChange(item, text)\"\n		allow-create=\"allowCreate\"\n		group-key=\"groupKey\"\n		sort=\"sort\"\n		size=\"block\"\n		group-label-mappings=\"groupLabelMappings\">\n	</ad-autocomplete>\n</div>\n");
$templateCache.put("adobe/widgets/directives/ad-radio-group-button.tpl.html","<label class=\"coral-Radio\">\n	\n	<input class=\"coral-Radio-input\" type=\"radio\" name=\"{{ group.name }}\" value=\"{{value}}\" ng-model=\"group.model\">\n\n 	<span class=\"coral-Radio-checkmark\"></span>\n    <span class=\"coral-Radio-description\" ng-transclude></span>\n\n</label>\n");
$templateCache.put("adobe/widgets/directives/ad-radio-group.tpl.html","<div class=\"coral-RadioGroup\" ng-transclude></div>");
$templateCache.put("adobe/widgets/directives/ad-search-bar.tpl.html","<span class=\"coral-Form-field coral-DecoratedTextfield\" ng-init=\"init()\">\n	<i class=\"coral-DecoratedTextfield-icon coral-Icon coral-Icon--sizeXS coral-Icon--{{ icon }}\" ng-click=\"focusSearchField()\"></i>\n	<input type=\"text\" class=\"coral-DecoratedTextfield-input coral-Textfield\" ng-model=\"searchModel\" ng-blur=\"blur()\" ad-escape=\"clearSearchField()\" placeholder=\"{{ searchPlaceholder }}\">\n	<button type=\"button\" class=\"coral-DecoratedTextfield-button coral-MinimalButton\" ng-show=\"searchModel.length > 0\" ng-click=\"clearSearchField()\">\n		<i class=\"coral-MinimalButton-icon coral-Icon coral-Icon--sizeXS coral-Icon--close\"></i>\n	</button>\n</span>");
$templateCache.put("adobe/widgets/directives/ad-search-popover.tpl.html","<ad-popover ad-popover-control=\"popoverParams\" ad-escape=\"onEscape($event)\" class=\"ad-SearchPopover\">\n<div class=\"ad-SearchPopover-header\">\n	<span class=\"coral-Heading coral-Heading--2\">{{ [\"search\", \"Search\"] | l10n }}</span>\n	<span ng-if=\"!scope.advanced\" ng-click=\"scope.advanced = !scope.advanced; scope.focus();\" class=\"coral-Link ad-SearchPopoverToggleMode\">{{ [\"show-advanced\", \"Show Advanced\"] | l10n }}</span>\n	<span ng-if=\"scope.advanced\" ng-click=\"scope.advanced = !scope.advanced; scope.focus();\" class=\"coral-Link ad-SearchPopoverToggleMode\">{{ [\"hide-advanced\", \"Hide Advanced\"] | l10n }}</span>\n</div>\n<div class=\"ad-SearchPopover-content\">\n	<div ng-if=\"!scope.advanced\">\n		{{ [\"search-word-or-phrase\", \"Search Word or Phrase\"] | l10n }}<br />\n\n		<span class=\"coral-DecoratedTextfield\">\n		  <input type=\'text\'\n			placeholder=\"{{ [\'enter-search-word-or-phrase\', \'Enter search word or phrase\'] | l10n }}\"\n			class=\"ad-SearchPopover-simpleSearchTextField coral-DecoratedTextfield-input coral-Textfield\"\n			ng-model=\"scope.search.rules[0].rules[0].value\"\n			ad-enter=\"scope.save()\" />\n		  <button type=\"button\" class=\"coral-DecoratedTextfield-button coral-MinimalButton\" ng-click=\"scope.clearAll()\">\n		    <i class=\"coral-MinimalButton-icon coral-Icon coral-Icon--sizeXS coral-Icon--close\"></i>\n		  </button>\n		</span>\n	</div>\n	<div ng-if=\"scope.advanced\">\n\n		{{ [\"match\", \"Match\"] | l10n }}<br />\n	    <ad-select\n			selection=\"scope.search.rules[scope.currentRule].operator\"\n			options=\"operatorOptions\">\n		</ad-select>\n\n		<br /><br />\n		{{ [\"criteria-colon\", \"Criteria:\"] | l10n }} <span class=\'coral-Link\' ng-click=\"scope.clearAll()\">({{ [\"clear-all\", \"Clear all\"] | l10n }})</span> <br />\n\n		<div ng-repeat=\"rule in scope.search.rules[scope.currentRule].rules track by $index\" class=\'ad-SearchPopover-searchRow\'>\n			<ad-select\n				class=\"contains\"\n				use-raw-value=\"true\"\n				selection=\"rule.contains\"\n				options=\"containOptions\">\n			</ad-select>\n\n			<input type=\'text\' class=\"advanced_search_string coral-Textfield\" ng-model=\"rule.value\" ad-enter=\"scope.search.addRule(null, scope.search.rules[scope.currentRule].rules); scope.focus();\" />\n\n			<button class=\"coral-MinimalButton search_icon\">\n	  			<i class=\"coral-Icon coral-Icon--delete coral-MinimalButton-icon\" \n	  			   data-tooltip=\"{{ [\'remove\', \'Remove\'] | l10n }}\" \n	  			   ng-click=\"scope.removeRule(rule, scope.search.rules[scope.currentRule].rules);\">\n	  			</i>\n			</button>\n		</div>\n		<button class=\"coral-Button--quiet\" ng-click=\"scope.search.addRule(null, scope.search.rules[scope.currentRule].rules); scope.focus();\" >\n	  		<i class=\"coral-Icon coral-Icon--addCircle coral-MinimalButton-icon\"></i>\n			<span>{{ [\"add-row\", \"Add row\"] | l10n }}</span>\n		</button>\n\n		<div class=\'ad-SearchPopover-preview\' ng-if=\'false\'>\n			{{ [\"preview\", \"Preview\"] | l10n }} <span class=\'coral-Link\' ng-click=\"scope.clearAll()\">({{ [\"clear-all\", \"Clear all\"] | l10n }})</span>\n			<div>\n				<div ng-repeat=\"ruleGroup in scope.search.rules track by $index\" class=\'ad-SearchPopover-searchGroupHolder\'>\n\n						<div  class=\'ad-SearchPopover-searchGroup\' ng-class=\"{highlightRow: scope.currentRule == $index}\" ng-click=\"scope.currentRule = $index\">\n							<i\n								class=\"coral-Icon coral-Icon--sizeXS coral-Icon--close ad-SearchPopover-removeGroup\"\n								ng-click=\"scope.removeRuleGroup(ruleGroup, scope.search.rules);  $event.stopPropagation(); $event.preventDefault();\" >\n							</i>\n							<span ng-if=\"ruleGroup.string.length > 0\">{{ ruleGroup.string }}</span>\n							<span ng-if=\"ruleGroup.string.length == 0\" class=\'ad-SearchPopover-empty\'>\n								{{ [\"empty\", \"Empty\"] | l10n }}\n							</span>\n						</div>\n						<span class=\"ad-SearchPopover-AndLabel\" ng-if=\"$index < scope.search.rules.length - 1\">{{ [\"and\", \"AND\"] | l10n }}</span>\n				</div>\n				\n				<div class=\"ad-SearchPopover-addGroup\">\n					<button\n						class=\"coral-Button--quiet\"\n						ng-click=\"scope.search.addRuleGroup(null, scope.search.rules); scope.currentRule=scope.search.rules.length-1; scope.focus();\">\n						<i class=\"coral-Icon coral-Icon--addCircle coral-MinimalButton-icon\"></i>\n						<span>{{ [\"add-group\", \"Add group\"] | l10n }}</span>\n					</button>\n				</div>\n			</div>\n		</div>\n	</div>\n	<div class=\"ad-SearchPopover-buttonBar\">\n		<button class=\"coral-Button coral-Button--quiet\" ng-click=\"scope.cancel()\">{{ [\"cancel\", \"Cancel\"] | l10n }}</button>\n		<button class=\"coral-Button coral-Button--primary\" ng-click=\"scope.save()\">{{ [\"apply\", \"Apply\"] | l10n }}</button>\n	</div>\n</div>\n</ad-popover>");
$templateCache.put("adobe/widgets/directives/ad-slide-menu-item-back.tpl.html","<div class=\"has-left-icon\">\n	<i class=\"coral-Icon coral-Icon--accordionLeft coral-Icon--sizeXS ad-SlideMenu-item-icon--left\" ></i>\n	<span class=\"ad-SlideMenu-item-label\" data-title>{{item[adSlideMenuParams.labelKey]}}</span>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-slide-menu-item.tpl.html","<div ng-class=\"::{\'has-right-icon\':showDrillDown}\">\n	<span class=\"ad-SlideMenu-item-label\" data-title=\"{{::showTooltips ? item[adSlideMenuParams.labelKey] : \'\'}}\">{{::item[adSlideMenuParams.labelKey]}}</span>\n	<i ng-show=\"::showDrillDown\" class=\"coral-Icon coral-Icon--accordionRight coral-Icon--sizeXS ad-SlideMenu-item-icon--right\" ></i>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-slide-menu.tpl.html","\n<div class=\"ad-SlideMenu\" ng-keydown=\"onKeyDown($event)\" tabindex=\"0\" ng-blur=\"scope.showKeyboardHighlighter = false\">\n	<div ng-repeat=\"paneId in [0,1]\" ng-if=\"paneId == activePane\" class=\"ad-SlideMenu-pane\" ng-class=\"{\'ad-SlideMenu--slideLeft\': direction == \'left\', \'ad-SlideMenu--slideRight\': direction == \'right\'}\">\n		<div ng-if=\"backLists.length > 0\"\n			ng-init=\"item = backLists[backLists.length - 1].item;\"\n			ng-click=\"goBack()\"\n			ng-include = \"adSlideMenuParams.itemBackTemplate\"\n			class = \"ad-SlideMenu-item ad-SlideMenu-backItem\" >\n		</div>\n\n		<div class=\"ad-SlideMenu-items\" ng-class=\"{\'has-header\': backLists.length > 0, \'show-vibrant-selector\':scope.showKeyboardHighlighter}\">\n			<div\n				ng-repeat = \"item in adSlideMenuParams.filteredItems = (panes[paneId].items | adSlideMenuFilter : adSlideMenuParams)\"\n				ng-hide = \"item.items != undefined && item.items.length === 0\"\n				ng-click = \"panes[paneId].currentIndex = $index; onClick(item, $event)\"\n				ng-include = \"adSlideMenuParams.itemTemplate\"\n				ng-init = \"showDrillDown = item.items != undefined; showTooltips = adSlideMenuParams.showTooltips;\"\n				class = \"ad-SlideMenu-item\"\n				ng-class = \"{\'is-selected\': panes[paneId].currentIndex == $index}\"\n				ad-scroll-to = \"item.doScroll\" ad-scroll-to-parent-selector=\"{{adSlideMenuParams.overflowParentSelector}}\">\n			</div>\n		</div>\n	</div>\n</div>");
$templateCache.put("adobe/widgets/directives/ad-slider.tpl.html","<div class=\"coral-Slider angular-slider\" ng-init=\"init()\"></div>\n");
$templateCache.put("adobe/widgets/directives/ad-sort.tpl.html","<i class=\"ad-Sort coral-Icon js-not-selectable\" ng-class=\"getSortClasses()\" />");
$templateCache.put("adobe/widgets/directives/ad-switch.tpl.html","<label class=\"coral-Switch\">\n	<input class=\"coral-Switch-input\" type=\"checkbox\" ng-model=\"model\">\n	<span class=\"coral-Switch-offLabel\">{{falseLabel}}</span><span class=\"coral-Switch-onLabel\">{{trueLabel}}</span>\n</label>");
$templateCache.put("adobe/widgets/directives/ad-tooltip.tpl.html","<span>\n	<i ng-if=\"hasIcon()\" ng-mouseenter=\"showTooltip()\" ng-mouseleave=\"hideTooltip()\" class=\"tooltip-icon coral-Icon coral-Icon--{{ icon }} coral-info-icon coral-Icon--size{{ size }}\"></i>\n	<span style=\"display:none;\">\n		<span ng-mouseenter=\"showTooltip()\" ng-mouseleave=\"hideTooltip()\" class=\"coral-Popover u-coral-padding\" id=\"{{popoverId}}\">\n			<span ng-transclude></span>\n			<a ng-if=\"link\" href=\"{{ fullLink }}\" target=\"_blank\" ad-track=\"Tooltip Learn More Clicked\" ad-track-params=\"{\'url\': fullLink}\">{{ [\'learnMore\', \'Learn more\'] | l10n }}</a>\n		</span>\n	</span>\n</span>\n");
$templateCache.put("analytics/calendar/directives/an-date-range-picker.tpl.html","<div class=\"ad-date-range-picker\">\n	<div class=\"coral-DatePicker coral-InputGroup\" ng-click=\"$event.preventDefault()\" locale=\"momentLocale\">\n		<input class=\"coral-InputGroup-input coral-Textfield\" type=\"text\" ng-model=\"currentRangeString\" >\n		<span class=\"coral-InputGroup-button\">\n	  		<button class=\"coral-Button coral-Button--secondary coral-Button--square icon-calendar-button\" type=\"button\"\n					data-target=\"#{{simpleDatePickerId}}\" data-toggle=\"popover\" data-point-from=\"bottom\" data-align-from=\"right\">\n		  		<i class=\"coral-Icon coral-Icon--sizeS coral-Icon--calendar\"></i>\n	  		</button>\n		</span>\n	</div>\n	<div class=\"coral-Popover range-picker ad-date-range-picker\" id=\"{{simpleDatePickerId}}\" ng-click=\"$event.preventDefault()\" >\n		<div class=\"coral-Popover-content\">\n			<div class=\"coral-DatePicker-calendar\">\n				<div class=\"coral-DatePicker-calendarHeader\" ng-if=\"rangeType != \'year\' && rangeType != \'week\'\">\n					<h2 class=\"coral-Heading coral-Heading--2\">{{ selectedYear }}</h2>\n					<button class=\"coral-MinimalButton coral-DatePicker-nextMonth\" ng-click=\"incrementYear()\" ng-show=\"selectedYear < maxYear\">›</button>\n					<button class=\"coral-MinimalButton coral-DatePicker-prevMonth\" ng-click=\"decrementYear()\" ng-show=\"selectedYear > minYear\">‹</button>\n				</div>\n				<div class=\"coral-DatePicker-calendarHeader\" ng-if=\"rangeType == \'year\'\">\n					<h2 class=\"coral-Heading coral-Heading--2\">{{ [\'selectYear\', \'Select Year\'] | l10n }}</h2>\n				</div>\n				<div class=\"coral-DatePicker-calendarHeader\" ng-if=\"rangeType == \'week\'\">\n					<h2 class=\"coral-Heading coral-Heading--2\">{{ selectedMonthName }} {{ selectedYear }}</h2>\n					<button class=\"coral-MinimalButton coral-DatePicker-nextMonth\" ng-click=\"incrementMonth()\" ng-show=\"displayIncrementMonthButton()\">›</button>\n					<button class=\"coral-MinimalButton coral-DatePicker-prevMonth\" ng-click=\"decrementMonth()\" ng-show=\"displayDecrementMonthButton()\">‹</button>\n				</div>\n				<div class=\"coral-DatePicker-calendarBody\" ng-class=\"{quarter:rangeType==\'quarter\', week:rangeType==\'week\', year:rangeType==\'year\'}\">\n					<div class=\"coral-Datepicker-calendarSlidingContainer\">\n						<div ng-repeat=\"page in rangeList\" class=\"calendar-page\">\n							<table >\n								<tbody>\n								<tr ng-repeat=\"row in page.rows\" >\n									<td ng-repeat=\"col in row.cols\" date-id=\"col.id\" ng-class=\"{selected:col.selected, today:col.current}\" >\n										<a ng-if=\"col.enabled\" ng-click=\"onItemClick(col)\">{{col.name}}</a>\n										<span ng-if=\"!col.enabled\">{{col.name}}</span>\n									</td>\n								</tr>\n								</tbody>\n							</table>\n						</div>\n					</div>\n				</div>\n			</div>\n		</div>\n		<div class=\"popover-arrow arrow-up\" style=\"top: -20px; left: 171.28125px;\"></div>\n	</div>\n</div>");
$templateCache.put("analytics/calendar/directives/an-datepicker.tpl.html","<div class=\"coral-DatePicker coral-InputGroup\" ng-init=\"monkeyPatchCUIDatepicker()\">\n	<input class=\"coral-InputGroup-input coral-Textfield\" type=\"{{inputType}}\" ng-model=\"dateStr\">\n	<span class=\"coral-InputGroup-button\">\n	  <button class=\"coral-Button coral-Button--secondary coral-Button--square icon-calendar-button\" type=\"button\">\n		  <i class=\"coral-Icon coral-Icon--sizeS coral-Icon--calendar\"></i>\n	  </button>\n	</span>\n	<input type=\"hidden\" value=\"\" class=\"js-hidden-calendar-input\">\n</div>");
$templateCache.put("analytics/charts/directives/an-anomaly-line-chart-info.tpl.html","<div class=\"anomaly-line-chart-info\">\n	<div class=\"anomaly-date\" ng-show=\"anomalyDate\">{{ anomalyDate | date:\'longDate\' }}</div>\n	<div class=\"anomaly-date\" ng-hide=\"!viewPeriod || anomalyDate\">\n		{{ viewPeriod.start.toDate() | date:\'longDate\' }} - {{ viewPeriod.end.valueOf() | date:\'longDate\' }}\n	</div>\n	<an-change-indicator \n		class=\"anomaly-change-amount\" \n		source-value=\"expectedValue\" \n		target-value=\"actualValue\"\n		polarity=\"metricPolarity\">\n	</an-change-indicator>\n	<div class=\"value\" ng-show=\"anomalyDate && !isCompact\" data-tooltip=\"{{metricName}}\">\n		<span class=\"label\">{{ [\'expectedValue\', \'Expected Value\'] | l10n }}:</span>\n		{{ expectedValue | fragToOberonMetric:metricType:hasFragDataSource | metric:metricType:metricPrecision }} {{ metricName }}\n	</div>\n	<div class=\"value\" ng-show=\"anomalyDate\">\n		<span ng-if=\"!isCompact\">\n			<span class=\"label\">{{ [\'actualValue\', \'Actual Value\'] | l10n }}:</span>\n			{{ actualValue | fragToOberonMetric:metricType:hasFragDataSource | metric:metricType:metricPrecision }}\n			{{ metricName }}\n		</span>\n		<span ng-if=\"isCompact\">\n			<span class=\"label totalMetricLabel\" data-tooltip=\"{{metricName}}\">{{ totalMetricLabel }}:</span>\n			<span class=\"totalMetricValue\" data-title>{{ actualValue | fragToOberonMetric:metricType:hasFragDataSource | metric:metricType:metricPrecision }}</span>\n		</span>\n	</div>\n	<div class=\"u-coral-clearFix\"></div>\n</div>");
$templateCache.put("analytics/component-management/directives/an-component-rail.tpl.html","<div class=\"coral-MultiPanel\" id=\"project-info\">\n	<div class=\"coral-Collapsible coral-Collapsible--block is-active\" data-init=\"accordion\">\n		<h3 class=\"coral-Collapsible-header\">\n			<span class=\"coral-Collapsible-title\">{{ [\'projectDescription\', \'Description\'] | l10n }}</span>\n		</h3>\n		<div class=\"coral-Collapsible-content\">\n			<textarea ng-model=\"component.description\" class=\"project-description coral-Textfield coral-Textfield--multiline\"></textarea>\n		</div>\n	</div>\n	<div class=\"coral-Collapsible coral-Collapsible--block is-active\" data-init=\"accordion\">\n		<h3 class=\"coral-Collapsible-header\">\n			<span class=\"coral-Collapsible-title\">{{ [\'projectTags\', \'Tags\'] | l10n }}</span>\n		</h3>\n		<div class=\"coral-Collapsible-content\">\n			<!-- tags tag list -->\n			<ad-tag-list items=\"component.tags\" read-only=\"!canUpdateComponent()\"\n						 no-items-message=\"{{ noTagsMessage }}\">\n			</ad-tag-list >\n			<br /><br />\n			<!-- Tag Popover -->\n			<an-tag-popover trigger-type=\"link\" ng-if=\"canUpdateComponent()\"\n							checked-tags=\"component.tags\"\n							unsaved-tags=\"unsavedTags\"\n							ng-show=\"canTag\"\n							confirm-action=\"applyTags(selectedTags)\">\n			</an-tag-popover>\n		</div>\n	</div>\n	<div class=\"coral-Collapsible coral-Collapsible--block is-active\" data-init=\"accordion\">\n		<h3 class=\"coral-Collapsible-header\">\n			<span class=\"coral-Collapsible-title\">{{ [\'projectCollaborators\', \'Collaborators\'] | l10n }}</span>\n		</h3>\n		<div class=\"coral-Collapsible-content\">\n			<!-- share tag list -->\n			<ad-tag-list items=\"component.shares\" read-only=\"!canUpdateComponent()\"\n						 when-remove-all=\"onRemoveAllShares()\"\n						 when-remove-item=\"onRemoveShare($removedItem)\"\n						 no-items-message=\"{{ noCollaboratorsMessage }}\">\n			</ad-tag-list>\n			<br /><br />\n			\n			<!-- Share Popover -->\n			<an-share-popover trigger-type=\"link\" ng-if=\"canUpdateComponent()\"\n							  id=\"component-rail-share\"\n							  ng-show=\"canShare\"\n							  checked-shares=\"checkedShares\"\n							  confirm-action=\"applyShareables(selectedShareables)\">\n			</an-share-popover>\n		</div>\n	</div>\n	<div ng-transclude></div>\n</div>\n");
$templateCache.put("analytics/component-management/directives/an-filter-sub-rail.tpl.html","<ul class=\"filter-sub-rail coral-Accordion\" data-init=\"accordion\">\n	<li class=\"coral3-Accordion-item is-active\">\n		<h3 class=\"coral3-Accordion-header an-item nowrap nopadding\">\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n			<span class=\"coral-Accordion-title an-item-content\">\n				{{ [\'tagsHeader\', \'Tags\'] | l10n }}\n				<span class=\"coral-Accordion-subtitle\" ng-show=\"componentListService.selectedTags.length\">\n				({{ componentListService.selectedTags.length }})\n				</span>\n			</span>\n\n			<span class=\"item-count\">{{ tagList.length || 0 }}</span>\n		</h3>\n		<div class=\"coral-Accordion-content\" ng-style=\"accordionContent\">\n			<ad-search-bar search-model=\"tagSearch\" search-placeholder=\"{{ [\'tagSearchPlaceholder\', \'Search Tags\'] | l10n }}\"></ad-search-bar>\n			<div class=\"no-items-available\" ng-show=\"componentListService.tags.length == 0\">{{ [\'noTagsAvailableLabel\', \'No Tags Available\'] | l10n }}</div>\n			<div class=\"filter-sub-rail-subitems an-item nowrap\" ng-repeat=\"tag in tagList = (componentListService.tags | fuzzySearchFilter:tagSearch | orderBy:\'count\':true)\">\n				<label class=\"coral-Checkbox an-item-content\" data-title>\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" name=\"tagGroup\" ng-checked=\"tag.selected\"\n						   ng-model=\"tag.selected\" ng-change=\"onFilterSelectionChange()\"\n						   ad-track=\"Filter By Tag\" ad-track-params=\"{tagFilterState: tag.selected}\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<span class=\"coral-Checkbox-description sub-rail-truncate\">{{ ::tag.name }}</span>\n				</label>\n				<span class=\"item-count\">{{ tag.count }}</span>\n			</div>\n		</div>\n	</li>\n	<li class=\"coral3-Accordion-item\" ng-if=\"hasReportSuiteColumn\" ng-class={\'is-active\':rail.activeAccordions.favorite}>\n		<h3 class=\"coral3-Accordion-header an-item nowrap nopadding\">\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n			<span class=\"coral-Accordion-title an-item-content\">\n				{{ reportSuiteLabel }}\n				<span class=\"coral-Accordion-subtitle\" ng-show=\"componentListService.selectedReportSuites.length\">\n					({{ componentListService.selectedReportSuites.length }})\n				</span>\n			</span>\n			\n			<span class=\"item-count\">{{ reportSuites.length || 0 }}</span>\n		</h3>\n		<div class=\"coral-Accordion-content\" ng-style=\"accordionContent\">\n			<ad-search-bar search-model=\"reportSuiteSearch\" search-placeholder=\"{{ [\'reportSuiteSearchPlaceholder\', \'Search Report Suites\'] | l10n }}\"></ad-search-bar>\n			<div class=\"no-items-available\" ng-show=\"filters.reportSuites.length == 0\">{{ [\'noReportSuitesAvailableLabel\', \'No Report Suites Available\'] | l10n }}</div>\n			<div class=\"filter-sub-rail-subitems an-item nowrap\" ng-repeat=\"reportSuite in reportSuites = (componentListService.reportSuites | fuzzySearchFilter:reportSuiteSearch | orderBy:\'count\':true)\"\n				ng-class=\"{disabledOption:reportSuite.disabled}\">\n				<label class=\"coral-Checkbox an-item-content\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-checked=\"reportSuite.selected&&!reportSuite.disabled\"\n						   ng-model=\"reportSuite.selected\" ng-disabled=\"reportSuite.disabled\" ng-change=\"onFilterSelectionChange()\"\n						   ad-track=\"Filter By Report Suite\" ad-track-params=\"{reportSuiteFilterState: reportSuite.selected}\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<span class=\"coral-Checkbox-description sub-rail-truncate\">{{ ::reportSuite.name }}</span>\n				</label>\n				<span class=\"item-count\">{{ reportSuite.count }}</span>\n			</div>\n		</div>\n	</li>\n	<li class=\"coral3-Accordion-item\" ng-class={\'is-active\':rail.activeAccordions.frequent}>\n		<h3 class=\"coral3-Accordion-header an-item nowrap nopadding\">\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n			<span class=\"coral-Accordion-title an-item-content\">\n				{{ [\'ownersHeader\', \'Owners\'] | l10n }}\n				<span class=\"coral-Accordion-subtitle\" ng-show=\"componentListService.selectedOwners.length\">\n					({{ componentListService.selectedOwners.length }})\n				</span>\n			</span>\n			<span class=\"item-count\">{{ owners.length || 0 }}</span>\n		</h3>\n		<div class=\"coral-Accordion-content\" ng-style=\"accordionContent\">\n			<ad-search-bar search-model=\"ownerSearch\" search-placeholder=\"{{ [\'ownerSearchPlaceholder\', \'Search Owners\'] | l10n }}\"></ad-search-bar>\n			<div class=\"no-items-available\" ng-show=\"filters.owners.length == 0\">{{ [\'noOwnersAvailableLabel\', \'No Owners Available\'] | l10n }}</div>\n			<div class=\"filter-sub-rail-subitems an-item nowrap\" ng-repeat=\"owner in owners = (componentListService.owners | fuzzySearchFilter:ownerSearch | orderBy:\'count\':true)\"\n				ng-class=\"{disabledOption:owner.disabled}\">\n				<label class=\"coral-Checkbox an-item-content\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-checked=\"owner.selected&&!owner.disabled\"\n						   ng-model=\"owner.selected\" ng-disabled=\"owner.disabled\" ng-change=\"onFilterSelectionChange()\"\n						   ad-track=\"Filter By Owner\" ad-track-params=\"{ownerFilterState: owner.selected}\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<span class=\"coral-Checkbox-description sub-rail-truncate\">{{ ::owner.name }}</span>\n				</label>\n				<span class=\"item-count\">{{ owner.count }}</span>\n			</div>\n		</div>\n	</li>\n	<li class=\"coral3-Accordion-item\" ng-class={\'is-active\':rail.activeAccordions.recent}>\n		<h3 class=\"coral3-Accordion-header an-item nowrap nopadding\">\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n			<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n			<span class=\"coral-Accordion-title an-item-content\">\n				{{ [\'otherFiltersHeader\', \'Other Filters\'] | l10n }}\n				<span class=\"coral-Accordion-subtitle\" ng-show=\"componentListService.selectedOthers.length\">\n					({{ componentListService.selectedOthers.length }})\n				</span>\n			</span>\n			<span class=\"item-count\">{{ others.length || 0 }}</span>\n		</h3>\n		<div class=\"coral-Accordion-content\" ng-style=\"accordionContent\">\n			<div class=\"filter-sub-rail-subitems an-item nowrap\" ng-repeat=\"other in others = (componentListService.others | orderBy:\'count\':true)\"\n				ng-class=\"{disabledOption:other.count==0||other.disabled}\">\n				<label class=\"coral-Checkbox an-item-content\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-checked=\"other.selected&&other.count!=0\"\n						   ng-model=\"other.selected\" ng-disabled=\"other.count==0||other.disabled\" ng-change=\"onFilterSelectionChange(other)\"\n						   ad-track=\"Filter By Other\" ad-track-params=\"{otherFilterState: other.selected, filterType: other.name}\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<span class=\"coral-Checkbox-description sub-rail-truncate\">{{ ::other.name }}</span>\n				</label>\n				<span class=\"item-count\">{{ other.count }}</span>\n			</div>\n		</div>\n	</li>\n</ul>\n");
$templateCache.put("analytics/component-management/directives/an-share-popover.tpl.html","<div class=\"share-popover\" >\n	<button ng-if=\"!triggerType\"\n		id=\"{{ triggerId }}\"\n		class=\"coral-Button coral-Button--primary\"\n		ng-click=\"onTriggerAction()\">\n		{{ [\'shareLabel\', \'Share\'] | l10n }}\n	</button>\n	<!-- Share Action Button -->\n	<ad-action-bar-button ng-if=\"triggerType === \'button\'\"\n					   ng-click=\"onTriggerAction()\"\n					   icon=\"coral-Icon--share\"\n					   icon-id=\"{{ triggerId }}\">\n		{{ [\'shareLabel\', \'Share\'] | l10n }}\n	</ad-action-bar-button>\n	<!-- Share Link -->\n	<span ng-if=\"triggerType === \'link\'\"\n		  id=\"{{ triggerId }}\"\n		  ng-click=\"onTriggerAction()\"\n		  class=\"coral-Link\">\n		  {{ [\'addCollaboratorsLabel\', \'Add Collaborators\'] | l10n }}\n	</span>\n	<!-- Share Popover -->\n	<ad-multi-select-popover id=\"{{ ::popoverId }}\"\n						  popover-id=\"{{ ::popoverId }}\"\n						  class=\"share-multi-select-popover\"\n						  action=\"action(selectedItems)\"\n						  action-label=\"{{ [\'shareLabel\', \'Share\'] | l10n }}\"\n						  search-placeholder=\"{{ sharingSearchPlaceholder }}\"\n						  item-type-map=\"shareablesTypeMap\"\n						  items=\"shareables\"\n						  loading-items=\"data.loadingShares\"\n						  ctrl-obj=\"popCtrlObject\"\n						  allow-add-new=\"false\">\n	</ad-multi-select-popover>\n</div>\n");
$templateCache.put("analytics/component-management/directives/an-tag-popover.tpl.html","<div class=\"tag-popover\" >\n	<!-- Tag Action Button -->\n	<ad-action-bar-button ng-if=\"triggerType === \'button\'\"\n					   ng-click=\"onTriggerAction()\"\n					   icon=\"coral-Icon--tag\"\n					   icon-id=\"tagPopoverIcon\">\n		{{ [\'tagLabel\', \'Tag\'] | l10n }}\n	</ad-action-bar-button>\n	<!-- Tag Link -->\n	<span ng-if=\"triggerType === \'link\'\"\n		  class=\"tagPopoverTrigger coral-Link\"\n		  ng-click=\"onTriggerAction()\">\n		  {{ [\"add-tag-label-1\", \"Add Tag\"] | l10n }}\n	</span>\n	<!-- Tag Popover -->\n	<ad-multi-select-popover class=\"tagPopoverMultiSelect\"\n						  action=\"action(selectedItems)\"\n						  action-label=\"{{ [\'tagLabel\', \'Tag\'] | l10n }}\"\n						  search-placeholder=\"{{ [\'addTagsLabel\', \'Add Tags\'] | l10n }}\"\n						  item-type-map=\"tagsTypeMap\"\n						  items=\"copiedTags\"\n						  loading-items=\"data.loadingTags\"\n						  ctrl-obj=\"popCtrlObject\"\n						  allow-add-new=\"true\">\n	</ad-multi-select-popover>\n</div>\n");
$templateCache.put("analytics/contribution-analysis/directives/an-analysis-queue.tpl.html","<div ng-init=\"loadReportQueue()\" ad-inner-rail-toggled=\"onInnerRailToggle(leftRailId)\">\n	<div class=\"processing-queue\">\n		<div class=\"processing-queue-header\">\n			<h4 class=\"coral-Heading coral-Heading--4\">\n				{{ [\'processingQueueLabel\', \'Analysis Queue\'] | l10n }}\n				<ad-tooltip class=\"tooltip-icon\">\n					{{ [\'processingQueueTooltipText\', \'Identify the analysis currently running and a list of additional reports queued to run.\'] | l10n }}\n				</ad-tooltip>\n			</h4>\n			<a class=\"config-icon-link\" ng-href=\"{{ contributionConfigUrl }}\" ad-track=\"Configure Link Clicked\" an-register-callback=\"contribution-analysis-config\" an-coachmark=\"analysisQueue.configure\">\n				<i class=\"coral-Icon coral-Icon--gear coral-Icon--sizeS\"></i>\n			</a>\n		</div>\n		<div class=\"local-scroll\">\n			<div ng-repeat=\"report in queue | orderBy:\'dateCreated\' | groupBy:\'status\':statusPriority\"\n				class=\"queue-item\" ng-class=\"{\'new-queue-item\':report.new, \'failed-report-container\':isFailed(report.status)}\">\n				<i class=\"coral-Icon coral-Icon--close coral-Icon--sizeXS u-coral-pullRight coral-Icon--deleteReport\" title=\"{{ [\'deleteReport\', \'Delete report\'] | l10n }}\" ng-show=\"isFailed(report.status)\" ng-click=\"confirmDeleteReport($event, report)\"></i>\n				<span class=\"report-title\">{{ report.reportDefinition.name }}</span>\n				<span class=\"failed-text\" ng-show=\"isFailed(report.status)\" title=\"{{ [\'jobIdLabel\', \'Job ID:\'] | l10n }} {{ report.id }}\">{{ [\'failedLabel\', \'Failed.\'] | l10n }}</span>\n				<span class=\"failed-text\" ng-show=\"report.status == noDataStatus\">{{ [\'noDataStatusLabel\', \'There was no data available for analysis during the selected time period.\'] | l10n }}</span>\n				<div ng-hide=\"isFailed(report.status)\">\n					<span title=\"{{ [\'jobIdLabel\', \'Job ID:\'] | l10n }} {{ report.id }}\">\n						<span class=\"progress-info\">{{ report.progress.percent }}</span>\n						<div class=\"progress-total\"><div class=\"progress-complete\" ng-style=\"report.progress.style\"></div></div>\n						<span class=\"progress-info\">{{ report.progress.countdown }}</span>\n					</span>\n					<a class=\"cancel-btn\" ng-click=\"cancelReport(report)\" ng-hide=\"report.cancelling\">{{ [\'cancel\', \'Cancel\'] | l10n }}</a>\n					<an-spinner id=\"{{\'cancelQueueItem\'+report.id}}\" backdrop=\"false\"></an-spinner>\n				</div>\n			</div>\n			<div class=\"no-reports\" ng-show=\"queue.length == 0\">{{ [\'noCurrentReportsInQueue\', \'You currently have no contribution analysis reports in the queue for %s.\'] | l10n | sprintf:currentReportSuite }}</div>\n		</div>\n	</div>\n	<div an-coachmark=\"analysisQueue.completedList\" class=\"completed-reports\">\n		<div class=\"completed-reports-header\">\n			<h4 class=\"coral-Heading coral-Heading--4\">\n				{{ [\'completedReportsLabel\', \'Completed Reports\'] | l10n }}\n				<ad-tooltip position=\"above\" class=\"tooltip-icon\">\n					{{ [\'completedReportsTooltipText\', \'Select completed Contribution Analysis reports listed by anomaly date and tracked metric.\'] | l10n }}\n				</ad-tooltip>\n			</h4>\n			<ad-search-bar search-model=\"reportFilter\" search-placeholder=\"{{ [\'searchReportsPlaceholder\', \'Search Reports\'] | l10n }}\"></ad-search-bar>\n		</div>\n		<div class=\"local-scroll\">\n			<div class=\"completed-report-container\" ng-repeat=\"report in completedReports | fuzzySearchFilter:reportFilter:\'reportDefinition.name\' | orderBy:\'dateCompleted\':true\">\n				<i class=\"coral-Icon coral-Icon--close coral-Icon--sizeXS u-coral-pullRight coral-Icon--deleteReport\" title=\"{{ [\'deleteReport\', \'Delete report\'] | l10n }}\" ng-click=\"confirmDeleteReport($event, report)\"></i>\n				<div class=\"completed-report-title-box\">\n					<a class=\"completed-report\" ng-href=\"{{ report.url }}\" ad-track=\"Completed Report in Queue Rail Clicked\" data-tooltip=\"{{ report.reportDefinition.name }} - {{ [\'jobIdLabel\', \'Job ID:\'] | l10n }} {{ report.id }}\" target=\"_blank\">\n						{{ report.reportDefinition.name }}\n					</a>\n					<ad-tooltip ng-if=\"report.reportDefinition.description\" link=\"\" position=\"left\" icon=\"infoCircle\" class=\"tooltip-icon u-coral-pullRight completedReportDescription\">\n						{{ report.reportDefinition.description }}\n					</ad-tooltip>					\n				</div>\n				<span ng-if=\"report.segmentTooltip.length === 0\" class=\"segments-label\" data-title>{{ report.segmentLabel }}</span>\n				<span ng-if=\"report.segmentTooltip.length > 0\" class=\"segments-label\" data-tooltip=\"{{report.segmentTooltip}}\">\n					{{ report.segmentLabel }}\n				</span>\n			</div>\n			<div class=\"no-reports\" ng-show=\"completedReports.length == 0\">{{ [\'noCurrentCompletedReports\', \'You currently have no completed reports for %s.\'] | l10n | sprintf:currentReportSuite }}</div>\n		</div>\n	</div>\n	<an-spinner id=\"processingQueueSpinner\" large=\"true\" center=\"true\"></an-spinner>\n</div>\n");
$templateCache.put("analytics/derived-metrics/directives/an-graph-popover.tpl.html","<div id=\"graph-popover\" class=\"coral-Popover\" ng-init=\"load()\">\n	<div class=\"coral-Dialog-header\">\n		<h2 class=\"coral-Dialog-title coral-Heading coral-Heading--2\">{{ [\'chartTypeHeader\', \'Chart Type\'] | l10n }}</h2>\n	</div>\n\n	<div class=\"coral-Popover-content\">\n\n\n		<div class=\"u-coral-padding graph-selector\">\n			<ad-button-group model=\"selectedGraph\">\n				<ad-button-group-button\n					ng-repeat=\"graph in graphs\"\n					ng-if=\"graph.enabled\"\n					value=\"{{ ::graph.key }}\"\n					icon=\"{{ ::graph.icon }}\"\n					data-tooltip=\"{{ ::graph.name }}\">\n				</ad-button-group-button>\n			</ad-button-group>\n		</div>\n\n		<div class=\"metric-list\" ng-if=\"metricsEnabled\" ng-init=\"loadMetrics()\">\n			<div class=\"metric-list-item u-coral-padding\" ng-repeat=\"metric in selectedMetrics\">\n				<label class=\"coral-Checkbox\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"metric.selected\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<span class=\"coral-Checkbox-description\">{{ ::metric.name }}</span>\n				</label>\n				<label class=\"coral-Checkbox u-coral-pullRight graph-checkbox\" data-tooltip=\"{{ [\'showInRightGraphLabel\', \'Show in right graph\'] | l10n }}\" ng-if=\"isRankedReport\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"metric.rightGraph\" ng-change=\"setGraphValue(metric)\"/>\n					<i class=\"coral-Icon coral-Icon--report coral-Icon--sizeS graph-icon\"\n						ng-class=\"{\'graph-icon-unselected\':!metric.rightGraph}\"></i>\n				</label>\n				<label class=\"coral-Checkbox u-coral-pullRight graph-checkbox\" data-tooltip=\"{{ [\'showInLeftGraphLabel\', \'Show in left graph\'] | l10n }}\" ng-if=\"isRankedReport\">\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"metric.leftGraph\" ng-change=\"setGraphValue(metric)\"/>\n					<i class=\"coral-Icon coral-Icon--report coral-Icon--sizeS graph-icon\"\n						ng-class=\"{\'graph-icon-unselected\':!metric.leftGraph}\"></i>\n				</label>\n			</div>\n		</div>\n\n		<div class=\"u-coral-padding show-hide-trends\" ng-if=\"trendsSupported\">\n			<ad-button-group model=\"trends.hide\">\n				<ad-button-group-button value=\"0\">{{ [\'showTrendsLabel\', \'Show Trends\'] | l10n }}</ad-button-group-button>\n				<ad-button-group-button value=\"1\">{{ [\'hideTrendsLabel\', \'Hide Trends\'] | l10n }}</ad-button-group-button>\n			</ad-button-group>\n		</div>\n\n		<div class=\"u-coral-padding u-coral-pullLeft\" ng-if=\"percentsSupported\">\n			<ad-button-group model=\"percentages.show\">\n				<ad-button-group-button value=\"1\">{{ [\'percentagesLabel\', \'Percentages\'] | l10n }}</ad-button-group-button>\n				<ad-button-group-button value=\"0\">{{ [\'numbersLabel\', \'Numbers\'] | l10n }}</ad-button-group-button>\n			</ad-button-group>\n		</div>\n\n		<div class=\"u-coral-padding u-coral-pullRight\" ng-if=\"itemCount\" ng-init=\"loadItemCount()\">\n			<span class=\"item-count-label\">{{ [\'itemsShownLabel\', \'Items Shown: \'] | l10n }}</span>\n			<ad-select class=\"item-count-select\" selection=\"items.count\" options=\"itemCountOptions\" size=\"XS\"></ad-select>\n		</div>\n\n		<div class=\"u-coral-clearFix\"></div>\n\n		<an-spinner id=\"graphPopoverSpinner\" center=\"true\" large=\"true\"></an-spinner>\n	</div>\n	<div class=\"coral-Dialog-footer\">\n\n		<button class=\"coral-Button\" ng-click=\"hidePopover()\">{{ [\'cancel\', \'Cancel\'] | l10n }}</button>\n		<button class=\"coral-Button coral-Button--primary\" ng-click=\"run()\" ng-disabled=\"metricsEnabled && runDisabled()\">{{ [\'runLabel\', \'Run\'] | l10n }}</button>\n	</div>\n</div>\n");
$templateCache.put("analytics/derived-metrics/directives/an-metric-selector.tpl.html","<div class=\"metric-selector\">\n	<an-selector-rail\n		load-components=\"loadMetrics(callback, rsid)\"\n		apply=\"applyMetrics(selectedComponents)\"\n		max-components=\"maxMetrics\"\n		register-callback=\"calculated-metric-builder\"\n		callback-params=\"{\n			type: currentReportType,\n			existingMetrics: selectedComponents,\n			reportParamName: reportParamName\n		}\"\n		params=\"{\n			builderUrl: metricBuilderUrl,\n			managerUrl: metricManagerUrl,\n			headerIconClass: \'coral-Icon--event\',\n			railId: \'metric-selector-rail\',\n			trackUsageKey: \'trackMetricUsage\',\n			componentType: \'metric\',\n			componentLabel: metricLabel,\n			componentsDraggable: true,\n			lazyLoadComponents: true,\n			canApplyZeroComponents: false,\n			togglePreviewEventBusName: \'calculated-metric-preview:toggleVisibility\',\n			hidePreviewEventBusName: \'calculated-metric-preview:hide\',\n			hasAddPermission: hasAddPermission\n		}\"\n		show-icons=true\n		selected-components=\"selectedComponents\"\n		>\n	</an-selector-rail>\n</div>\n");
$templateCache.put("analytics/report-navigation/directives/an-analytics-rail.tpl.html","<div class=\"analytics-rail\" ng-init=\"loadAnalyticsRailMenu()\" ad-inner-rail-toggled=\"onInnerRailToggle(leftRailId)\"\n	 ad-track=\"{\'My Reports Rail Loaded\':bookmarkFavorites !== undefined && rail.activeAccordions !== undefined}\"\n	 ad-track-params=\"{\n	 	favoriteCount: bookmarkFavorites.length,\n		frequentlyViewedCount: frequentlyViewed.length,\n		reportHistoryCount: reportHistory.length,\n		activeAccordions: rail.activeAccordions\n	 }\">\n	<div ng-if=\"!rail.disableClose\">\n		<button class=\"coral-ButtonGroup-item coral-Button coral-Button--quiet coral-Button--secondary coral-Button-blockItem\"\n			ng-click=\"toggleNavigationView($event)\" ng-class=\"{\'is-selected\': rail.browseAllReports}\">\n			<div class=\"chevron-icon\" ng-show=\"!rail.browseAllReports && (!rail.transitioning || rail.animationNotSupported)\">\n				<i class=\"coral-Icon coral-Icon--chevronDoubleRight\"></i>\n			</div>\n			<i class=\"coral-Icon coral-Icon--folderSearch\"></i>\n			<span class=\"coral-Button-labelBlock\">{{ [\'railBrowseLabel\', \'View All Reports\'] | l10n }}</span>\n		</button>\n	</div>\n	<div class=\"analytics-rail-subsections \">\n\n\n		<div class=\"js-favorite-accordion coral3-Accordion-item\" ng-class=\"{\'is-active\': rail.activeAccordions.favorite}\" data-accordion-id=\"favorite\" >\n			<h3 class=\"coral3-Accordion-header\">\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n				<span class=\"coral-Accordion-title\">{{ [\'myFavoritesLabel\', \'My Favorites\'] | l10n }}</span>\n			</h3>\n\n			<div class=\"coral-Accordion-content\">\n				<div class=\"report-link-container\" ng-repeat=\"favorite in bookmarkFavorites | limitTo:(showAllFavorites ? bookmarkFavorites.length : 10)\"\n					 ad-track=\"{\'Navigate to Report From Favorite List\': {selector: \'.report-link\'}}\"\n					 ad-track-params=\"{\'reportName\': favorite.name, \'reportUrl\': favorite.url, \'navigateType\': \'Favorites\'}\">\n					<i class=\"coral-Icon coral-Icon--close coral-Icon--sizeXS u-coral-pullRight coral-Icon--deleteFavorite\"\n					   ng-click=\"deleteFavorite($event, favorite);\"></i>\n					<a class=\"report-link\" ng-class=\"{\'new-menu-item\':favorite.new}\" href=\"{{ favorite.url }}\" ng-click=\"onFavoriteClick(favorite)\"\n					   title=\"{{ favorite.name }}\" >\n						{{ favorite.name }}\n					</a>\n				</div>\n				<a class=\"more-reports-link\" ng-show=\"!showAllFavorites && bookmarkFavorites.length > 10\" ng-click=\"showAllFavorites = true\">\n					{{ [\'moreLink\', \'More...\'] | l10n }}\n				</a>\n				<div class=\"empty-list-link\" ng-show=\"bookmarkFavorites.length == 0\">\n					{{  [\'noFavoritesYet\', \"You have not marked any reports/dashboards as favorites.\"] | l10n }}\n				</div>\n			</div>\n		</div>\n		\n\n		<div class=\"js-frequent-accordion coral3-Accordion-item\" ng-class=\"{\'is-active\': rail.activeAccordions.frequent}\" data-accordion-id=\"frequent\">\n			<h3 class=\"coral3-Accordion-header\">\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n				<span class=\"coral-Accordion-title\">{{ [\'frequentlyViewedLabel\', \'Frequently Viewed\'] | l10n }}</span>\n			</h3>\n\n			<div class=\"coral-Accordion-content\">\n				<div class=\"report-link-container\" ng-repeat=\"report in frequentlyViewed\"\n					 ad-track=\"{\'Navigate to Report From Frequenty Viewed List\': {selector:\'.report-link\'}}\"\n					 ad-track-params=\"{\'reportName\': report.name, \'reportUrl\': report.url, \'navigateType\': \'Frequently Viewed\'}\">\n					<a class=\"report-link\" ng-href=\"{{ report.url }}\" title=\"{{ report.name }}\">\n						{{ report.name }}\n					</a>\n				</div>\n				<div class=\"empty-list-link\" ng-show=\"frequentlyViewed.length == 0\">\n					{{  [\'noFrequentlyViewedItems\', \"You have not viewed any reports for this report suite.\"] | l10n }}\n				</div>\n			</div>\n		</div>\n		\n\n		<div class=\"js-recent-accordion coral3-Accordion-item\" ng-class=\"{\'is-active\': rail.activeAccordions.recent}\" data-accordion-id=\"recent\">\n			<h3 class=\"coral3-Accordion-header\">\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronDown\"></i>\n				<i class=\"coral-Icon coral-Icon--sizeXS coral-Icon--chevronRight\"></i>\n				<span class=\"coral-Accordion-title\">{{ [\'reportHistoryLabel\', \'Report History\'] | l10n }}</span>\n			</h3>\n\n			<div class=\"coral-Accordion-content\">\n				<div ng-repeat=\"report in reportHistory\" class=\"report-link-container\"\n					 ad-track=\"{\'Navigate to Report From Report History List\': {selector:\'.report-link\'}}\"\n					 ad-track-params=\"{\'reportName\': report.name, \'reportUrl\': report.url, \'navigateType\': \'Recent Reports\'}\">\n					<a class=\"report-link\" href=\"{{ report.url }}\" title=\"{{ report.name }}\">\n						{{ report.name }}\n					</a>\n				</div>\n				<div class=\"empty-list-link\" ng-show=\"reportHistory.length == 0\">\n					{{  [\'noReportHistory\', \"You have not viewed any reports for this report suite.\"] | l10n }}\n				</div>\n			</div>\n		</div>\n	</div>\n	<an-spinner id=\"analyticsRailSpinner\" center=\"true\" large=\"true\"></an-spinner>\n</div>\n");
$templateCache.put("analytics/report-navigation/directives/an-favorite-popover.tpl.html","<div id=\"favorite-popup\" class=\"coral-Popover favorite-popup\" >\n	<div class=\"endor-List\">\n		<div class=\"favorite-input-field\" >\n			<span class=\"coral-DecoratedTextfield\">\n			  <input type=\"text\" class=\"coral-DecoratedTextfield-input coral-Textfield\" ng-model=\"inputText\"\n					 placeholder=\"{{ [\'favoritePlaceholder\', \'Name Your Favorite\'] | l10n }}\" ad-enter=\"onEnterPressed()\"\n					 maxlength=\"{{ FAVORITE_TITLE_MAX_CHARS }}\">\n			  <button type=\"button\" class=\"coral-DecoratedTextfield-button coral-MinimalButton\" ng-show=\"inputText.length > 0\" ng-click=\"inputText = \'\'\">\n				  <i class=\"coral-MinimalButton-icon coral-Icon coral-Icon--sizeXS coral-Icon--close\"></i>\n			  </button>\n			</span>\n		</div>\n		<div class=\"button-container\">\n			<button class=\"coral-Button\" ng-click=\"hideFavoritePopover()\">{{ [\'cancelFavorite\', \'Cancel\'] | l10n }}</button>\n			<button class=\"coral-Button coral-Button--primary\" ng-click=\"addFavorite()\" ng-disabled=\"inputText.length == 0\">\n				{{ [\'doneFavoriteLabel\', \'Done\'] | l10n }}\n			</button>\n		</div>\n	</div>\n</div>");
$templateCache.put("analytics/report-navigation/directives/an-favorite-tool.tpl.html","<a class=\"coral-ButtonGroup-item coral-Button coral-Button--secondary coral-Button--quiet favorite-tool\"\n   type=\"button\" data-tooltip=\"{{ favoriteLabel }}\" data-target=\"#favorite-popup\" ng-click=\"onFavoriteToolClick($event)\"\n   data-toggle=\"popover\" data-point-from=\"bottom\" data-point-at=\"#toolbar-favorite-button\" data-align-from=\"right\">\n	<i id=\"toolbar-favorite-button\" class=\"shell-ActionButton-icon coral-Icon\" ng-class=\"{\n		\'coral-Icon--starStroke\': !isFavorited,\n		\'coral-Icon--starFill\': isFavorited\n	}\"></i>\n	<span class=\"shell-ActionButton-label\" ></span>\n	<an-favorite-popover></an-favorite-popover>\n</a>\n");
$templateCache.put("analytics/report-navigation/directives/an-miller-column-view.tpl.html","<div class=\"miller-column-view\" ng-keydown=\"onKeyDown($event)\" tabindex=\"0\" ng-focus=\"hasFocus = true\" ng-blur=\"hasFocus = false\"\n	 ad-track=\"{\n	 	\'Navigate Miller Columns Using Enter\': \'navigateUsingEnter\',\n	 	\'Navigate Miller Columns\': {\n	 		\'when\': \'click\',\n	 		\'selector\': \'.miller-column-link\'\n	 	}\n	 }\" ad-track-params=\"trackParams\" >\n	<div class=\"miller-columns-container\" >\n		<div ng-repeat=\"column in columns\" class=\"miller-column\" ng-class=\"{\'is-active\': column.active, \'is-focused\': hasFocus}\">\n			<ul class=\"miller-column-list\">\n				<li ng-repeat=\"item in column.children\" class=\"miller-column-item\" ng-click=\"onItemClick(item, column)\"\n					ng-class=\"{\'is-selected\': item.selected}\">\n					<a ng-if=\"item.url\" href=\"{{ item.url }}\" class=\"coral-Link miller-column-link\">\n						<span class=\"miller-column-linkLabel\" ng-class=\"{\'with-tooltip\': item.tooltip}\" title=\"{{ item.name }}\">{{ item.name }}</span>\n					</a>\n					<div ng-if=\"item.children\" \n						class=\"miller-column-folderLabel\" \n						ng-class=\"{\n							\'ad-append-new-flag\': item.elementId == \'guidedReports\' \n						}\">{{ item.name }}</div>\n					<i ng-if=\"item.children\" class=\"coral-Icon coral-Icon--sizeXS coral-Icon--accordionRight miller-column-folderIcon\" ></i>\n					<ad-tooltip ng-if=\"item.description && !item.tooltipTemplate\" icon=\"helpCircle miller-column-tooltipIcon\">{{ ::item.description }}</ad-tooltip>\n					<ad-tooltip ng-if=\"item.tooltipTemplate\" icon=\"infoCircle miller-column-tooltipIcon\" position=\"right\">\n						<div ng-include=\"item.tooltipTemplate\"></div>\n					</ad-tooltip>\n				</li>\n			</ul>\n		</div>\n	</div>\n</div>");
$templateCache.put("analytics/report-navigation/directives/an-report-navigation-view.tpl.html","<div class=\"report-navigation-view ng-hide\" ng-show=\"rail.browseAllReports\" ad-global-keydown=\"onGlobalKeydown($event)\"\n	 ad-animation-finish=\"onAnimationComplete()\" ad-animation-unsupported=\"rail.animationNotSupported = true\"\n	 ng-init=\"onInit()\" ad-track=\"{\n	 	\'Open All Reports\': rail.browseAllReports,\n	 	\'Close All Reports\': !rail.browseAllReports\n	 }\" ad-track-params=\"getBrowseAllReportsTrackParams()\">\n	<nav class=\"shell-Panel-header shell-ActionBar report-navigation-actionbar\" >\n		<span class=\"coral-DecoratedTextfield coral-DecoratedTextfield--chromeless\" style=\"width:auto; /* IE Fix */\" >\n		  <i class=\"coral-DecoratedTextfield-icon coral-Icon coral-Icon--sizeXS coral-Icon--search\"></i>\n		  <input type=\"text\" class=\"coral-DecoratedTextfield-input coral-Textfield js-report-navigation-search-field\" placeholder=\"{{ [\'searchReportsPlaceholder\', \'Search Reports\'] | l10n }}\"\n				 ng-model=\"searchText\" ng-keydown=\"onKeyDown($event)\">\n		</span>\n		<div class=\"navigation-actionbar-right\">\n			<button type=\"button\" class=\"coral-ButtonGroup-item coral-Button coral-Button--secondary coral-Button--quiet\"\n					ng-show=\"searchText.length > 0\" ng-click=\"searchText = \'\'\">\n				<i class=\"shell-ActionButton-icon coral-Icon coral-Icon--accordionLeft coral-Icon--close\"></i>\n			</button>\n			<an-report-suite-selector class=\"coral-ButtonGroup-item\" params=\"{alternateDisplayText: initialReportSuite, excludeVrs: millerColumns.excludeVrs}\"></an-report-suite-selector>\n			<button class=\"coral-ButtonGroup-item js-shell-innerrail-toggle coral-Button coral-Button--secondary coral-Button--quiet\"\n					ad-track=\"Click on Chevron to close\" type=\"button\" ng-click=\"searchText = \'\'; rail.browseAllReports = false;\"\n					tabindex=\"-1\" ng-if=\"!rail.displayCloseX && !rail.disableClose\">\n				<i class=\"shell-ActionButton-icon coral-Icon coral-Icon--chevronDoubleLeft\" ></i>\n			</button>\n			<button class=\"coral-ButtonGroup-item js-shell-innerrail-toggle coral-Button coral-Button--secondary coral-Button--quiet\"\n					ad-track=\"Click on Chevron to close\" type=\"button\" ng-click=\"searchText = \'\'; rail.browseAllReports = false;\"\n					tabindex=\"-1\" ng-if=\"rail.displayCloseX && !rail.disableClose\">\n				<i class=\"shell-ActionButton-icon coral-Icon coral-Icon--closeCircle\" ></i>\n			</button>\n		</div>\n	</nav>\n	<div class=\"js-shell-content shell-Panel-content shell-Panel-content--actionBarHeight\">\n		<an-miller-column-view ad-model=\"menu.raw\" ng-show=\"searchText.length == 0\"></an-miller-column-view>\n		<div class=\"grouped-search-results\" ng-if=\"searchText.length > 0\" infinite-scroll=\"increaseLimit()\"\n			 infinite-scroll-distance=\"1\" infinite-scroll-immediate-check=\"false\" infinite-scroll-parent\n			ad-track=\"{\n				\'Navigate Search\': {\n					\'when\': \'click\',\n					\'selector\': \'.js-coral-search-link\'\n				},\n				\'Navigate Search Using Enter\': \'navigateSearchUsingEnter\'\n			}\" ad-track-params=\"searchTrackParams\">\n			<a ng-repeat=\"menuItem in (menu.filtered = (menu.flattened | fuzzySearchFilter:searchText:\'metaSearchName\')) | limitTo:limit track by menuItem.uniqueId\"\n				 class=\"search-grouping\" ng-class=\"{\'display-cursor\': $index == searchCursorIndex}\" href=\"{{ menuItem.url }}\">\n				<div class=\"search-name-container\" >\n					<span class=\"coral-Link js-coral-search-link\">{{ menuItem.name }}</span>\n					<span class=\"extra-title-info-label\" ng-if=\"menuItem.extraTitleInfo\">&nbsp;({{ menuItem.extraTitleInfo }})</span>\n				</div>\n				<span class=\"hierarchy-Label\" >{{ menuItem.hierarchy.join(\' / \') | uppercase }} /</span>\n				<span class=\"description-Label\" ng-if=\"menuItem.description\">{{ menuItem.description }}</span>\n			</a>\n		</div>\n		<div class=\"coral-Wait coral-Wait--center coral-Wait--large\" ng-show=\"menu.loading\"></div>\n	</div>\n</div>\n");
$templateCache.put("analytics/report-navigation/directives/guided-info-tooltip.tpl.html","<table class=\"miller-column-guided-info\">\n	<tr>\n		<td>{{ [\'nameHeading\', \'Name\'] | l10n }}:</td>\n		<td>{{ ::item.name }}</td>\n	</tr>\n	<tr ng-if=\"item.description\">\n		<td>{{ [\'descriptionHeading\', \'Description\'] | l10n }}:</td>\n		<td>{{ ::item.description }}</td>\n	</tr>\n	<tr>\n		<td>{{ [\'ownerHeading\', \'Owner\'] | l10n }}:</td>\n		<td>{{ ::item.owner.name }}</td>\n	</tr>\n	<tr>\n		<td>{{ [\'modifiedHeading\', \'Modified\'] | l10n }}:</td>\n		<td>{{ ::item.dateModified }}</td>\n	</tr>\n	<tr>\n		<td>{{ [\'tagsHeading\', \'Tags\'] | l10n }}:</td>\n		<td>{{ ::item.tagList }}</td>\n	</tr>\n</table>");
$templateCache.put("analytics/sc/directives/an-bookmark-popover.tpl.html","<div id=\"bookmark-popup\" class=\"coral-Popover bookmark-popover\" >\n	<div class=\"endor-List\">\n		<div class=\"coral-Dialog-header\">\n			<h2 class=\"coral-Dialog-title coral-Heading coral-Heading--2\" >{{ [\'bookmarkFormTitle\', \'Add Bookmark\'] | l10n }}</h2>\n		</div>\n		<div class=\"coral-Dialog-content u-coral-padding\">\n			<form class=\"coral-Form coral-Form--vertical\" >\n				<section class=\"coral-Form-fieldset\">\n					<!-- Bookmark Name -->\n					<label class=\"coral-Form-fieldlabel\">{{ [\'bookmarkFormName\', \'Name:\'] | l10n }}</label>\n					<input class=\"coral-Form-field coral-Textfield js-bookmark-input\" ng-model=\"bookmarkName\"\n						   placeholder=\"{{ [\'bookmarkPlaceholderFormName\', \'Enter Name\'] | l10n }}\">\n\n					<!-- Add To -->\n					<label class=\"coral-Form-fieldlabel\">{{ [\'bookmarkAddTo\', \'Add to:\'] | l10n }}</label>\n					<ad-autocomplete\n						data-provider=\"folders\"\n						ad-placeholder-text=\"{{ [\'addToPlaceholderText\', \'Select Folder\'] | l10n }}\"\n						selected-item=\"folder\"\n						loading-data=\"folders.length === 0\"\n						size=\"block\"\n						item-changed-handler=\"onFolderChange(item)\">\n					</ad-autocomplete>\n\n					<!-- New Folder Name -->\n					<label class=\"coral-Form-fieldlabel\" ng-show=\"folder.id == \'-1\'\">{{ [\'bookmarkFormFolderName\', \'Folder Name:\'] | l10n }}</label>\n					<input class=\"coral-Form-field coral-Textfield js-bookmarkname-input\" ng-model=\"bookmarkFolderName\" ng-show=\"folder.id == \'-1\'\"\n						   placeholder=\"{{ [\'bookmarkPlaceholderFolderName\', \'Enter Folder Name\'] | l10n }}\">\n\n					<!-- Other Options -->\n					<label class=\"coral-Form-fieldlabel\">{{ [\'bookmarkFormOtherOptions\', \'Other Options:\'] | l10n }}</label>\n					<div class=\"coral-Form-fieldwrapper coral-Form-fieldwrapper--singleline\">\n						<label class=\"coral-Form-field coral-Checkbox\">\n							<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"makePublic\">\n							<span class=\"coral-Checkbox-checkmark\"></span>\n							<span class=\"coral-Checkbox-description\">\n								{{ [\'bookmarkAdditionalOptionsMakePublic\', \'Make Public\'] | l10n }}\n							</span>\n						</label>\n					</div>\n\n					<!-- Make Public AutoComplete and associated New Folder Field -->\n					<div ng-show=\"makePublic\" class=\"make-public-container\">\n						<!-- Add To -->\n						<label class=\"coral-Form-fieldlabel\">{{ [\'bookmarkAddTo\', \'Add to:\'] | l10n }}</label>\n						<ad-autocomplete\n							data-provider=\"sharedFolders\"\n							ad-placeholder-text=\"{{ [\'addToPlaceholderText\', \'Select Folder\'] | l10n }}\"\n							selected-item=\"sharedFolder\"\n							loading-data=\"sharedFolders.length === 0\"\n							item-changed-handler=\"onSharedFolderChange(item)\">\n						</ad-autocomplete>\n\n						<!-- New Folder Name -->\n						<label class=\"coral-Form-fieldlabel\" ng-show=\"sharedFolder.id == \'-1\'\">{{ [\'bookmarkFormSharedFolderName\', \'Shared Folder Name:\'] | l10n }}</label>\n						<input class=\"coral-Form-field coral-Textfield shared-bookmark-name js-sharedbookmarkname-input\"\n							   ng-model=\"sharedBookmarkFolderName\" ng-show=\"sharedFolder.id == \'-1\'\"\n							   placeholder=\"{{ [\'bookmarkPlaceholderSharedFolderName\', \'Enter Shared Folder Name\'] | l10n }}\">\n					</div>\n\n					<div class=\"coral-Form-fieldwrapper coral-Form-fieldwrapper--singleline\">\n						<label class=\"coral-Form-field coral-Checkbox\">\n							<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"displayOnLogin\">\n							<span class=\"coral-Checkbox-checkmark\"></span>\n							<span class=\"coral-Checkbox-description\">\n								{{ [\'bookmarkAdditionalOptionsDisplayOnLogin\', \'Display report upon login\'] | l10n }}\n							</span>\n						</label>\n					</div>\n\n					<div class=\"coral-Form-fieldwrapper coral-Form-fieldwrapper--singleline\">\n						<a class=\"coral-Link\" href=\"{{ manageBookmarkLink }}\">{{ [\'bookmarkPopoverManageLabel\', \'Manage Bookmarks\'] | l10n }}</a>\n					</div>\n\n					<!-- Submit/Cancel Options -->\n					<div class=\"coral-Form-fieldwrapper coral-Form-fieldwrapper--alignRight\">\n						<button class=\"coral-Form-field coral-Button\" type=\"button\" ng-click=\"cancelCreateNewBookmark()\">\n							{{ [\'bookmarkPopoverCancelLbl\', \'Cancel\'] | l10n }}\n						</button>\n						<button class=\"coral-Form-field coral-Button coral-Button--primary\" ng-click=\"createNewBookmark()\" ng-class=\"{\'is-disabled\': folders.length === 0}\">\n							{{ [\'bookmarkPopoverSaveLbl\', \'Save\'] | l10n }}\n						</button>\n					</div>\n				</section>\n			</form>\n		</div>\n\n	</div>\n</div>\n");
$templateCache.put("analytics/sc/directives/an-bookmark-tool.tpl.html","<a class=\"coral-ButtonGroup-item coral-Button coral-Button--secondary coral-Button--quiet\"\n   type=\"button\" title=\"{{ [\'bookmarkToolLabel\', \'Bookmark\'] | l10n }}\" data-target=\"#bookmark-popup\" ng-click=\"onBookmarkToolClick($event)\"\n   data-toggle=\"popover\" data-point-from=\"bottom\" data-point-at=\"#toolbar-bookmark-button\" data-align-from=\"right\">\n	<i id=\"toolbar-bookmark-button\" class=\"endor-ActionButton-icon coral-Icon coral-Icon--bookmark\" ></i>\n	<span class=\"endor-ActionButton-label\" >{{ [\'bookmarkToolLabel\', \'Bookmark\'] | l10n }}</span>\n	<an-bookmark-popover ></an-bookmark-popover>\n</a>");
$templateCache.put("analytics/sc/directives/an-selector-rail.tpl.html","<div class=\"selector-rail\" ng-init=\"load()\" ad-inner-rail-toggled=\"onInnerRailToggle(leftRailId)\">\n	<!-- Header -->\n	<div class=\"selector-rail-header {{::params.railId}}-header u-coral-padding\">\n		<i class=\"u-coral-pullLeft coral-Icon coral-Icon--sizeS {{ ::params.headerIconClass }}\"></i>\n		<h4 class=\"u-coral-pullLeft coral-Heading coral-Heading--4\" data-title>{{ ::params.componentLabel }}</h4>\n		<span class=\"item-count\">{{ componentList.length }}</span>\n		<div class=\"add-manage-links u-coral-pullRight\" an-coachmark=\"metricSelector.createNewMetric\">\n			<a class=\"coral-Link u-coral-pullRight\" ng-href=\"{{ params.managerUrl }}\"\n				ad-track=\"Component Manager Link Clicked\"\n				ad-track-params=\"{componentType: params.componentType}\"\n				data-title>\n				{{ [\'manageLabel\', \'Manage\'] | l10n }}\n			</a>\n			\n			<a ng-if=\"hasAddPermission\" class=\"coral-Link u-coral-pullRight\" ng-href=\"{{ params.builderUrl }}\"\n				an-register-callback=\"{{ registerCallback }}\"\n				an-callback-params=\"callbackParams\"\n				ad-track=\"Component Builder Link Clicked\"\n				ad-track-params=\"{componentType: params.componentType}\"\n				data-title>\n				<span class=\"link-separator u-coral-pullRight\">|</span>\n				{{ [\'addLabel\', \'Add\'] | l10n }}\n			</a>\n		</div>\n		<div class=\"u-coral-clearFix\"></div>\n\n		<div an-coachmark=\"metricSelector.searchMetrics\">\n			<div class=\"selector-rail-actions\">\n				<ad-search-bar\n					class=\"selector-rail-search-bar u-coral-pullLeft\"\n					search-model=\"componentSearch\"\n					ng-model-options=\"{ debounce: 300 }\"\n					search-placeholder=\"{{ [\'componentSearchPlaceholder\', \'Search %s\'] | l10n | sprintf:params.componentLabel }}\">\n				</ad-search-bar>\n				<i class=\"sort-button u-coral-pullRight coral-Icon coral-Icon--reorder coral-Icon--sizeS\" ng-click=\"sortByPopover.show($event)\"></i>\n			</div>\n			<div class=\"u-coral-clearFix\"></div>\n		</div>\n\n		<label class=\"coral-Checkbox rsid-checkbox-filter\">\n			<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"reportSuiteFilterChecked\" ng-checked=\"reportSuiteFilterChecked\" ng-change=\"filterByReportSuite()\"\n				ad-track=\"Report Suite Filter Clicked\" ad-track-params=\"{reportSuiteFilterState: reportSuiteFilterChecked}\">\n			<span class=\"coral-Checkbox-checkmark\"></span>\n			<span class=\"coral-Checkbox-description\">{{ [\'onlyLabel\', \'(Only)\'] | l10n }} {{ currentReportSuiteName }}</span>\n		</label>\n		<a class=\"modal-link\" ng-click=\"showAdvancedModal()\" ad-track=\"Advanced Filters Link Clicked\">{{ [\'advancedSelectionLabel\', \'Advanced Selection\'] | l10n }}</a>\n	</div>\n\n	<!-- Main List -->\n	<div class=\"main-list\" ng-style=\"mainListStyle\" ad-scroll=\"onScroll($event)\">\n		<div class=\"no-items\" ng-show=\"componentList.length == 0\">{{ [\'noItemsAvailableLabel\', \'No %s Available\'] | l10n | sprintf:params.componentLabel }}</div>\n		<div class=\"single-list-item\"\n			ng-repeat=\"component in (componentList = (filteredComponents | fuzzySearchFilter:componentSearch:\'name\' | orderBy:selectedSortOption.attribute:selectedSortOption.reverse)) | limitTo:limit\">\n			<label class=\"coral-Checkbox\" data-title>\n				<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"component.selected\" ng-change=\"changeSelection(component, $index)\" ng-disabled=\"selectedComponents.length == maxComponents && !component.selected\">\n				<span class=\"coral-Checkbox-checkmark\"></span>\n				<span class=\"coral-Checkbox-description\">\n					<span ng-if=\"showIcons\" ng-switch on=\"::component.calculated\">\n						<i ng-switch-when=true class=\"calculated-icon coral-Icon coral-Icon--calculator coral-Icon--sizeXS\"></i>\n						<i ng-switch-default class=\"calculated-icon coral-Icon coral-Icon--event coral-Icon--sizeXS\"></i>\n					</span>\n					<span>{{ ::component.name }}</span>\n				</span>\n			</label>\n			<i class=\"info-button coral-Icon coral-Icon--infoCircle coral-Icon--sizeXS coral-MinimalButton-icon coral-MinimalButton\"\n				ng-click=\"onInfoClick($event, component)\" ng-hide=\"component.unknown\" data-point-from=\"right\"\n				ad-track=\"Component Preview Clicked\" ad-track-params=\"{componentType: params.componentType}\"></i>\n		</div>\n	</div>\n\n	<!-- Selected Components -->\n	<div class=\"selected-items {{::params.railId}}-footer u-coral-padding\" an-coachmark=\"metricSelector.applyMetrics\">\n		<h4 class=\"coral-Heading coral-Heading--4 u-coral-pullLeft\">{{ [\'selectedComponentsLabel\', \'Selected %s\'] | l10n | sprintf:params.componentLabel }}</h4>\n		<span class=\"num-selected-items\" ng-hide=\"maxComponents || !selectedComponents.length\">({{ selectedComponents.length }})</span>\n		<span class=\"num-remaining-items u-coral-pullLeft\" ng-show=\"maxComponents\" ng-class=\"{\'maximum-items\': selectedComponents.length == maxComponents}\">\n			{{ [\'numComponentsSelected\', \'%1$s of %2$s selected\'] | l10n | sprintf:[selectedComponents.length, maxComponents] }}\n		</span>\n		<div class=\"u-coral-clearFix\"></div>\n		<div ad-drag-over=\"onDragOver($event, $localPt, $draggableModel)\"\n			ad-drag-drop=\"draggingComponentId = null\"\n			ad-drag-drop-outside-invalid=\"draggingComponentId = null\">\n			<div class=\"single-selected-item\" ng-repeat=\"component in selectedComponents\"\n				ng-class=\"{\'currently-dragging\':component.id == draggingComponentId}\"\n				ad-draggable=\"{draggableModel: component, draggableArea: \'.draggable-area\'}\" >\n				<label class=\"coral-Checkbox\">\n					<i ng-show=\"params.componentsDraggable\" class=\"draggable-area drag-icon coral-Icon coral-Icon--moreVertical coral-Icon--sizeXS\"></i>\n					<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"component.selected\" ng-value=\"component.selected\" ng-change=\"changeSelection(component)\">\n					<span class=\"coral-Checkbox-checkmark\"></span>\n					<!-- couldn\'t use ng-class here because it causes the element to not get rendered as draggable -->\n					<span ng-show=\"params.componentsDraggable\" class=\"draggable-area coral-Checkbox-description\">\n						<span ng-if=\"showIcons\" ng-switch on=\"::component.calculated\">\n							<i ng-switch-when=true class=\"calculated-icon coral-Icon coral-Icon--calculator coral-Icon--sizeXS\"></i>\n							<i ng-switch-default class=\"calculated-icon coral-Icon coral-Icon--event coral-Icon--sizeXS\"></i>\n						</span>\n						{{ ::component.name }}\n					</span>\n					<span ng-show=\"!params.componentsDraggable\" class=\"coral-Checkbox-description\">\n						<i ng-show=\"::component.calculated\" class=\"calculated-icon coral-Icon coral-Icon--calculator coral-Icon--sizeXS\"></i>\n						{{ ::component.name }}\n					</span>\n				</label>\n				<i class=\"info-button coral-Icon coral-Icon--infoCircle coral-Icon--sizeXS coral-MinimalButton-icon coral-MinimalButton\"\n					ng-click=\"onInfoClick($event, component)\" ng-hide=\"component.unknown\" data-point-from=\"right\"\n					ad-track=\"Component Preview Clicked\" ad-track-params=\"{componentType: params.componentType}\"></i>\n			</div>\n		</div>\n		<button class=\"coral-Button coral-Button--primary\"\n			ng-click=\"trackAndApply(selectedComponents)\"\n			ng-disabled=\"!canApply()\"\n			ad-track=\"Components Applied From Rail\"\n			ad-track-params=\"{\n				componentType: params.componentType,\n				numComponentsApplied: selectedComponents.length + \'\',\n				totalComponentsAvailable: components.length + \'\',\n				selectedSortOption: selectedSortOption.attribute,\n				indexesOfSelected: getIndexesOfSelected(),\n				searchText: (componentSearch.length ? true : false),\n				reportSuiteCheckboxChecked: reportSuiteFilterChecked\n			}\">\n			{{ [\'applyLabel\', \'Apply\'] | l10n  }}\n		</button>\n	</div>\n\n	<!-- Sort By Popover -->\n	<ad-popover ad-popover-control=\"sortByPopover\" class=\"sort-by-popover\">\n		<div class=\"popover-header\">{{ [\'sortByLabel\', \'Sort By\'] | l10n }}</div>\n		<div class=\"sort-option-container u-coral-padding\" ng-repeat=\"option in sortOptions\">\n			<label class=\"coral-Radio\">\n				<input class=\"coral-Radio-input\" type=\"radio\" name=\"sortOption-{{::params.railId}}\" ng-checked=\"option.initialSelected\" ng-click=\"updateSortOption(option)\">\n				<i class=\"coral-Icon coral-Icon--check coral-Icon--sizeXS\"></i>\n				<span class=\"coral-Radio-description\">{{ ::option.name }}</span>\n			</label>\n		</div>\n	</ad-popover>\n\n	<an-spinner id=\"selectorRailSpinner-{{ ::params.railId }}\" large=\"true\" center=\"true\"></an-spinner>\n</div>\n");
$templateCache.put("analytics/segmentation/directives/an-component-filter-modal.tpl.html","<div class=\"component-filter-modal coral-Modal\">\n	<div class=\"coral-Modal-body\">\n		<div class=\"component-filter-rail\">\n			<an-filter-sub-rail component-list-service=\"componentListService\" has-report-suite-column=\"true\"></an-filter-sub-rail>\n		</div>\n		<div class=\"component-list\">\n			<i class=\"coral-Icon coral-Icon--users coral-Icon--sizeS\"></i><span class=\"component-header\">{{ componentLabel }}</span>\n			<span class=\"selected-count\" ng-style=\"{color:countSelected() > 10 ? \'red\' : \'#aaa\'}\" ng-show=\"countSelected()!=0\">({{ [\'only10AllowedLabel\', \'%s of 10\'] | l10n | sprintf:countSelected() }})</span>\n			<ad-search-bar class=\"segment-search\" search-model=\"componentSearch\" search-placeholder=\"{{ [\'componentSearchPlaceholder\', \'Search %s\'] | l10n | sprintf:componentLabel }}\"></ad-search-bar>\n			<div class=\"no-components-available\" ng-show=\"componentListService.components.length == 0\">{{ [\'noComponentsAvailableLabel\', \'No %s Available\'] | l10n | sprintf:componentLabel }}</div>\n			<ul ad-scroll=\"onScroll($event)\">\n				<li ng-repeat=\"component in (filteredComponents = (componentListService.components | fuzzySearchFilter:componentSearch)) | limitTo:limit\">\n					<label class=\"coral-Checkbox\">\n						<input class=\"coral-Checkbox-input\" type=\"checkbox\" ng-model=\"component.selected\" ng-change=\"updateComponentSelection(component)\">\n						<span class=\"coral-Checkbox-checkmark\"></span>\n						<span class=\"coral-Checkbox-description component-name\" >\n							<i ng-show=\"::component.calculated\" class=\"calculated-icon coral-Icon coral-Icon--calculator coral-Icon--sizeXS\"></i>\n							{{::component.name}}\n						</span>\n					</label>\n				</li>\n			</ul>\n		</div>\n	</div>\n	<div class=\"coral-Modal-footer\">\n\n\n		<div class=\"segment-tag-list\">\n			<an-component-tag-list components=\"selectedComponents\" when-info-click=\"onInfoClick({$event:$event, $item:$item})\"></an-component-tag-list>\n		</div>\n\n\n		<div class=\"component-filter-modal-actionButtons\">\n			<button type=\"button\" class=\"coral-Button\" data-dismiss=\"modal\" ng-click=\"cancel()\">{{ [\'cancel\', \'Cancel\'] | l10n }}</button>\n			<button type=\"button\" class=\"coral-Button coral-Button--primary\" data-dismiss=\"modal\" ng-click=\"apply($event)\"\n				ng-disabled=\"countSelected() > 10\"\n				ad-track=\"Components Applied From Modal\"\n				ad-track-params=\"{\n					numComponentsApplied: countSelected() + \'\',\n					totalComponentsAvailable: components.length + \'\',\n					reportlet: reportlet,\n					searchText: (componentSearch.length ? true : false),\n					filteredByTags: (componentListService.selectedTags.length ? true : false),\n					filteredByReportSuite: (componentListService.selectedReportSuites.length ? true : false),\n					filteredByOwners: (componentListService.selectedOwners.length ? true : false),\n					filteredByOthers: (componentListService.selectedOthers.length ? true : false)\n				}\">\n				{{ [\'apply\', \'Apply\'] | l10n }}\n			</button>\n		</div>\n\n	</div>\n	<an-spinner ng-if=\"railId\" id=\"componentFilterModalSpinner-{{::railId}}\" large=\"true\" center=\"true\"></an-spinner>\n</div>\n");
$templateCache.put("analytics/segmentation/directives/an-segment-selector.tpl.html","<div class=\"segment-selector\">\n	<an-selector-rail\n		load-components=\"loadSegments(callback)\"\n		apply=\"applySegments(selectedComponents)\"\n		register-callback=\"segment-builder\"\n		callback-params=\"{\n			type: currentReportType,\n			existingSegments: initialSelected\n		}\"\n		params=\"{\n			builderUrl: segmentBuilderUrl,\n			managerUrl: segmentManagerUrl,\n			headerIconClass: \'coral-Icon--users\',\n			railId: \'segment-selector-rail\',\n			componentLabel: segmentsLabel,\n			trackUsageKey: \'trackSegmentUsage\',\n			componentType: \'segment\',\n			togglePreviewEventBusName: \'toggleSegmentPreviewVisibility\',\n			hidePreviewEventBusName: \'hideSegmentPreview\',\n			hasAddPermission: hasAddPermission\n		}\">\n	</an-selector-rail>\n</div>\n");
$templateCache.put("analytics/segmentation/directives/an-segment-summary-legend.tpl.html","<table class=\"chart-legend\" cellpadding=\"0\" cellspacing=\"0\">\n	<tr class=\"legend-item\" ng-repeat=\"metric in metrics\">\n		<td class=\"metric-title\">\n			<i class=\"coral-Icon coral-Icon--minus coral-Icon--sizeXS legend-stroke stretch\"\n			   style=\"color:{{metric.color}};opacity:1;\" ></i>{{ metric.title }}\n			<!--<span style=\"color:{{metric.color}};opacity:1;\" class=\"legend-stroke stretch adobe-icon\"></span>{{ metric.title }}-->\n		</td>\n		<td class=\"metric-numbers\" ng-bind-html=\"metric.html\"></td>\n		<td class=\"metric-percent\">{{ percent(metric.value,metric.total)<1&&metric.value>0?\'< 1\':percent(metric.value,metric.total) }}%</td>\n	</tr>\n</table>");
$templateCache.put("analytics/segmentation/directives/an-segment-summary-lite.tpl.html","<div class=\"segment-summary-lite\" ng-class=\"{\'loading-summary-data\':loadingData}\">\n	<an-segment-summary-graph data-metrics=\"metrics\" data-chart-width=\"70\" data-chart-height=\"70\"></an-segment-summary-graph>\n	<an-segment-summary-legend data-metrics=\"metrics\"></an-segment-summary-legend>\n	<div class=\"modal-loader\">\n		<div class=\"coral-Wait coral-Wait--center coral-Wait--large\"></div>\n	</div>\n</div>");
$templateCache.put("analytics/segmentation/directives/an-segment-summary.tpl.html","<div class=\"segment-summary\" ng-class=\"{ims:isIMSSession}\">\n	<div class=\"owner-last-modified\">\n		<div ng-show=\"segment.id != \'\'\"><strong>{{ [\'ownerLabel\', \'Owner\'] | l10n }}: </strong>{{ segment.owner.name }}</div>\n		<div ng-show=\"segment.id != \'\'\"><strong>{{ [\'lastModifiedLabel\', \'Last Modified\'] | l10n }}: </strong>{{ segment.modified | date:\'MMM d, y\' }}</div>\n	</div>\n	<div class=\'clear\'></div>\n	<div class=\'segment-summary-content\'>\n		<div class=\"an-SegmentPreview\">\n			<div ng-show=\"previewNotSupported\" class=\"previewNotSupported\">\n				{{[\'cmb:previewNotSupportedForSegment\', \'Preview is not supported for this segment\'] | l10n}}\n			</div>\n		</div>\n		<div class=\"chart-info\">\n			<an-segment-summary-legend ng-hide=\"previewNotSupported\"  metrics=\"metrics\"></an-segment-summary-legend>\n			<div class=\"time-period-footnote\" ng-hide=\"previewNotSupported\" >* {{ timePeriod }}</div>\n			<div class=\"clear\" ng-hide=\"previewNotSupported\" ></div>\n			<div class=\"legend-info\">\n				<strong class=\"compatible-label\">{{ [\'productCompatibilityLabel\', \'Product Compatibility\'] | l10n }}\n					<ad-tooltip link=\"/analytics/segment/?f=seg_compatibility\">\n						{{ [\'productCompatibilityTooltipText\', \'A small number of available segment criteria are not compatible with all Adobe Analytics tools. Tools that are compatible with the segment are indicated in this list. To make a segment compatible with all Adobe Analytics tools, try editing your criteria.\'] | l10n }}\n					</ad-tooltip>\n				</strong>\n				<div ng-show=\"compatibleWith.length == 0\" ng-class=\"{\'segment-not-compatible\': (compatibleWith.length == 0)}\">&nbsp;{{ [\'none\', \'None\'] | l10n }}</div>\n				<div ng-repeat=\"product in compatibleWith\">{{ product }}</div>\n			</div>\n		</div>\n		<div class=\"validation-chart-box\" ng-hide=\"previewNotSupported\" >\n			<an-spinner id=\"validationChartSpinner\" center=\"true\" backdrop=\"false\" ng-hide=\"previewNotSupported\" ></an-spinner>\n			<an-segment-summary-graph data-metrics=\"metrics\" ng-hide=\"previewNotSupported\"  ></an-segment-summary-graph>\n		</div>\n		<div class=\"clear\"></div>\n	</div>\n</div>\n");
$templateCache.put("analytics/widgets/directives/ad-tag-well.tpl.html","<div class=\"coral-Well ad-tag-well\">\n	<ad-quick-add\n		items=\"tags\"\n		load-items=\"loadTags\"\n		loading-items=\"loadingTags\"\n		placeholder-text-key=\"{{ [\'addTagsLabel\', \'Add Tags\'] | l10n }}\"\n		icon-class-name=\"tag\"\n		allow-create=\"true\"\n		add-new-item-text-key=\"{{ clickToAddNewItemLabel }}\">\n	</ad-quick-add>\n</div>\n");
$templateCache.put("analytics/widgets/directives/an-change-indicator.tpl.html","<div ng-class=\"[polarityClass, direction]\" ng-show=\"percentChanged\">\n	<div class=\"percentChanged\">\n		<span class=\"coral-Icon coral-Icon--sizeXS {{arrowIconClass}}\"></span>\n		<span ng-if=\"sourceValue===0\"\n			data-tooltip=\"{{[\'percentChangedFromZero\', \'Percent changed from 0 is infinity\'] | l10n }}\">\n			&infin;\n		</span>\n		<span ng-if=\"sourceValue!==0\">\n			{{ percentChanged | number : 2}}%\n		</span>\n		<span class=\"timeInterval\" ng-if=\"timeInterval\" data-tooltip=\"{{timeIntervalLabel}}\">\n			{{ timeIntervalLabel }}\n		</span>\n	</div>\n</div>\n");
$templateCache.put("analytics/widgets/directives/an-metric-tween.tpl.html","<span class=\"metric\"></span>\n");
$templateCache.put("ui/calculated-metrics/directives/ad-info-popover.tpl.html","<div class=\"ad-info-popup\">\n	<ad-popover ad-popover-control=\"popoverControl\" hide=\"popoverHidden()\">\n		<div class=\"ad-info-popover-content\">\n			<div class=\"coral-Modal-header coral-Dialog-header\" ng-if=\"component\">\n				<h2 class=\"coral-Modal-title coral-Dialog-title coral-Heading coral-Heading--2\" data-title>\n				{{component.name}}\n				</h2>\n			</div>\n			<div class=\"description-container info-section\" ng-if=\"component.description\">\n				<h4>{{[\'aip:description\', \'Description\'] | l10n }}</h4>\n				<div class=\"description section-content\">\n					{{component.description}}\n				</div>\n			</div>\n			<div class=\"documentation-container info-section\" ng-if=\"component.documentation.url && component.documentation.linkText\">\n				<a class=\"coral-Link\" href=\"{{component.documentation.url}}\" target=\"_blank\">{{component.documentation.linkText}}</a>\n			</div>\n			<ng-transclude></ng-transclude>\n		</div>\n	</ad-popover>\n</div>");
$templateCache.put("ui/calculated-metrics/directives/an-function-info.tpl.html","<ad-info-popover\n	toggle-visibility-command=\"function-info:toggleVisibility\" \n	hide-command=\"function-info:hide\"\n	update-model=\"updateModel\">\n	\n	<div class=\"an-function-info\">		\n		<h3 data-title>\n			{{function.name}}				\n		</h3>\n		<div class=\"an-function-info-content\">\n			<h4>{{[\'afi:description\', \'Description\'] | l10n }}</h4>\n			<p class=\"description\" ng-show=\"function.description\">{{function.description}}</p>\n			<h4>{{[\'afi:parameters\', \'Parameters\'] | l10n }}</h4>\n			<div class=\"parameters\">\n				<div class=\"parameter\" ng-repeat=\"param in function.definition.parameters\">\n					<span class=\"param-name\">{{param.friendlyName || param.name}}</span>\n					<span class=\"param-description\">{{param.description}}</span>\n				</div>\n			</div>\n			<div class=\"more-info\">\n				<a ng-href=\"{{baseUrl}}/{{function.id}}.html\" target=\"_blank\">{{[\'afi:MoreInfo\', \'Learn more\'] | l10n }}</a>\n			</div>\n		</div>\n	</div>\n	\n</ad-info-popover>");
$templateCache.put("ui/calculated-metrics/directives/an-metric-expression-summary.tpl.html","<div class=\"an-metric-expression-summary\" ng-class=\"{\'has-segments\': expression.segments.length > 0}\">\n	<div class=\"segments\" ng-show=\"expression.segments.length > 0\">\n		<i class=\"coral-Icon coral-Icon--users coral-Icon--sizeS\"></i>\n		<ul>\n			<li ng-repeat=\"segment in expression.segments track by segment.id\">\n				{{segment.name | uppercase}}{{ ($index+1 < expression.segments.length) ? \',\' : \'\'}} \n			</li>\n		</ul>\n	</div>\n	<div class=\"items\">		\n		<ul class=\"cm-metric-preview\">			\n			<li ng-repeat=\"item in expression.items track by item.uniqueId\">\n				<div class=\"metric\" ng-if=\"item.itemType == \'cmMetricRef\'\">\n					<i class=\"coral-Icon coral-Icon--event coral-Icon--sizeS\"></i>\n					{{item.totalledName}}\n				</div>\n				<div class=\"operator\" ng-if=\"item.itemType == \'cmOperator\'\">\n					<i class=\"coral-Icon coral-Icon--{{item.operatorIcon}} coral-Icon--sizeXS\"></i>	 \n				</div>\n				<div class=\"expression\" ng-if=\"item.itemType == \'cmExpression\'\">\n					<an-metric-expression-summary expression=\"item\"></an-metric-expression-summary>\n				</div>\n				<div class=\"function\" ng-if=\"item.itemType == \'cmFunctionRef\'\">\n					<i class=\"coral-Icon coral-Icon--effects coral-Icon--sizeS\"></i>\n					{{item.name | uppercase}}\n					<ul class=\"parameters\">\n						<li ng-repeat=\"param in item.parameters track by param.name\">\n							<label>{{param.name}}</label>\n							<an-metric-expression-summary ng-if=\"!param.isArray\" expression=\"param.value\"></an-metric-expression-summary>\n							<div ng-if=\"param.isArray\" ng-repeat=\"exp in param.value\">\n								<an-metric-expression-summary expression=\"exp\"></an-metric-expression-summary>\n							</div>\n						</li>\n					</ul>\n				</div>\n				<div class=\"numeric-value\" ng-if=\"item.itemType == \'cmNumericValue\'\">\n					{{item.value}}\n				</div>\n			</li>\n		</ul>\n	</div>\n</div>");
$templateCache.put("ui/calculated-metrics/directives/an-metric-summary.tpl.html","<span class=\"an-metric-summary\" ng-class=\"{\n	\'has-segments\': expression.segments.length > 0, \n	\'outer-summary\': expression == expression.rootExpression,\n	\'complex\': isComplex \n	}\">		\n	<div class=\"items\">		\n		<span ng-repeat=\"item in items\">\n\n			<span ng-if=\":: item.type == \'word\'\" class=\"word {{:: item.wordType}}\">\n				<i class=\"coral-Icon coral-Icon--sizeS coral-Icon--{{:: item.icon}}\"></i>\n\n				<span class=\"name full-name\">{{:: item.name}}</span>\n				\n				<span class=\"name abbreviated-name\" data-tooltip=\"{{:: item.name}}\" >{{:: abbreviate(item.name)}}</span>\n\n			</span>\n\n			<span ng-if=\":: item.type == \'operator\'\" class=\"operator\">\n				<i class=\"coral-Icon coral-Icon--sizeS coral-Icon--{{:: item.icon}}\"></i>\n			</span>\n\n			<span ng-if=\":: item.type == \'small-word\'\" class=\"small-word\">\n				{{:: item.name}}\n			</span>\n\n			<span ng-if=\":: item.type == \'compare-operator\'\" class=\"compare-operator\">\n				{{:: item.name}}\n			</span>\n\n			<span ng-if=\":: item.type == \'paren\'\" class=\"paren\">\n				{{:: item.name}}\n			</span>\n\n			<span ng-if=\":: item.type == \'value\'\" class=\"value {{:: item.valueType}}\">\n				{{:: item.value}}\n			</span>\n		</span>\n	</div>\n</span>");}]);
//# sourceMappingURL=data:application/json;base64,